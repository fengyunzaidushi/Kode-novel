{
  "files": [
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\agents.tsx",
      "relativePath": "src/commands/agents.tsx",
      "name": "agents.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useState",
            "useEffect",
            "useMemo",
            "useCallback",
            "useReducer",
            "Fragment"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink-text-input",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "getActiveAgents",
            "clearAgentCache"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "AgentConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "writeFileSync",
            "unlinkSync",
            "mkdirSync",
            "existsSync",
            "readFileSync",
            "renameSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "gray-matter",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "exec",
            "spawn"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "util",
          "imports": [
            "promisify"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "watch",
            "FSWatcher"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "getMCPTools"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/utils/agentLoader.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/services/mcpClient.ts",
        "src/utils/model.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getDisplayModelName",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "modelId: string | null"
          ],
          "returnType": "string",
          "description": "Map a stored model identifier to a display name via ModelManager",
          "lineNumber": 98
        },
        {
          "name": "generateAgentWithClaude",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "prompt: string"
          ],
          "returnType": "Promise<GeneratedAgent>",
          "description": "AI generation function (use main pointer model)",
          "lineNumber": 120
        },
        {
          "name": "validateAgentType",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "agentType: string",
            "existingAgents: AgentConfig[]"
          ],
          "returnType": "{ \n  isValid: boolean\n  errors: string[]\n  warnings: string[]\n}",
          "description": "Comprehensive validation system",
          "lineNumber": 233
        },
        {
          "name": "validateAgentConfig",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "config: Partial<CreateState>",
            "existingAgents: AgentConfig[]"
          ],
          "returnType": "{\n  isValid: boolean\n  errors: string[]\n  warnings: string[]\n}",
          "lineNumber": 286
        },
        {
          "name": "getAgentDirectory",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "location: AgentLocation"
          ],
          "returnType": "string",
          "description": "File system operations with Claude Code alignment",
          "lineNumber": 328
        },
        {
          "name": "getAgentFilePath",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "agent: AgentConfig"
          ],
          "returnType": "string",
          "lineNumber": 340
        },
        {
          "name": "ensureDirectoryExists",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "location: AgentLocation"
          ],
          "returnType": "string",
          "lineNumber": 348
        },
        {
          "name": "generateAgentFileContent",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "agentType: string",
            "description: string",
            "tools: string[] | '*'",
            "systemPrompt: string",
            "model: string",
            "color: string"
          ],
          "returnType": "string",
          "description": "Generate agent file content",
          "lineNumber": 357
        },
        {
          "name": "saveAgent",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "location: AgentLocation",
            "agentType: string",
            "description: string",
            "tools: string[]",
            "systemPrompt: string",
            "model: string",
            "color: string",
            "throwIfExists: boolean"
          ],
          "returnType": "Promise<void>",
          "description": "Save agent to file",
          "lineNumber": 398
        },
        {
          "name": "deleteAgent",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "agent: AgentConfig"
          ],
          "returnType": "Promise<void>",
          "description": "Delete agent file",
          "lineNumber": 449
        },
        {
          "name": "openInEditor",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "filePath: string"
          ],
          "returnType": "Promise<void>",
          "description": "Open file in system editor - 安全版本，防止命令注入",
          "lineNumber": 459
        },
        {
          "name": "updateAgent",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "agent: AgentConfig",
            "description: string",
            "tools: string[] | '*'",
            "systemPrompt: string",
            "color: string",
            "model: string"
          ],
          "returnType": "Promise<void>",
          "description": "Update existing agent",
          "lineNumber": 529
        },
        {
          "name": "Header",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ title, subtitle, step, totalSteps, children }"
          ],
          "lineNumber": 558
        },
        {
          "name": "InstructionBar",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ instructions = \"Press ↑↓ to navigate · Enter to select · Esc to go back\" }"
          ],
          "lineNumber": 577
        },
        {
          "name": "SelectList",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ options, selectedIndex, onChange, onCancel, numbered = true }"
          ],
          "lineNumber": 596
        },
        {
          "name": "MultilineTextInput",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{\n  value,\n  onChange,\n  placeholder = '',\n  onSubmit,\n  focus = true,\n  rows = 5,\n  error\n}"
          ],
          "lineNumber": 633
        },
        {
          "name": "LoadingSpinner",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ text }"
          ],
          "lineNumber": 772
        },
        {
          "name": "AgentsUI",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ onExit }"
          ],
          "lineNumber": 796
        },
        {
          "name": "AgentListView",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ \n  location, \n  agents, \n  allAgents, \n  onBack, \n  onSelect, \n  onCreateNew, \n  changes \n}"
          ],
          "lineNumber": 1311
        },
        {
          "name": "GenerateStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState, existingAgents }"
          ],
          "lineNumber": 1721
        },
        {
          "name": "TypeStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState, existingAgents }"
          ],
          "lineNumber": 1799
        },
        {
          "name": "DescriptionStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState }"
          ],
          "description": "Step 5: Description input",
          "lineNumber": 1832
        },
        {
          "name": "ToolsStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState, tools }"
          ],
          "lineNumber": 1863
        },
        {
          "name": "ModelStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState }"
          ],
          "description": "Step 6: Model selection (clean design like /models)",
          "lineNumber": 2074
        },
        {
          "name": "ColorStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState }"
          ],
          "description": "Step 7: Color selection (using hex colors for display)",
          "lineNumber": 2161
        },
        {
          "name": "PromptStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState }"
          ],
          "description": "Step 8: System prompt",
          "lineNumber": 2227
        },
        {
          "name": "ConfirmStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState, tools, onAgentCreated }"
          ],
          "lineNumber": 2259
        },
        {
          "name": "LocationSelect",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState }"
          ],
          "lineNumber": 2389
        },
        {
          "name": "MethodSelect",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ createState, setCreateState, setModeState }"
          ],
          "lineNumber": 2448
        },
        {
          "name": "AgentMenu",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ agent, setModeState }"
          ],
          "lineNumber": 2506
        },
        {
          "name": "EditMenu",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ agent, setModeState }"
          ],
          "lineNumber": 2564
        },
        {
          "name": "EditToolsStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ agent, tools, setModeState, onAgentUpdated }"
          ],
          "lineNumber": 2657
        },
        {
          "name": "EditModelStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ agent, setModeState, onAgentUpdated }"
          ],
          "lineNumber": 2880
        },
        {
          "name": "EditColorStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ agent, setModeState, onAgentUpdated }"
          ],
          "lineNumber": 2978
        },
        {
          "name": "ViewAgent",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ agent, tools, setModeState }"
          ],
          "lineNumber": 3096
        },
        {
          "name": "EditAgent",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ agent, tools, setModeState, onAgentUpdated }"
          ],
          "lineNumber": 3167
        },
        {
          "name": "DeleteConfirm",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ agent, setModeState, onAgentDeleted }"
          ],
          "lineNumber": 3340
        }
      ],
      "classes": [],
      "interfaces": [
        "HeaderProps",
        "InstructionBarProps",
        "SelectListProps",
        "MultilineTextInputProps",
        "LoadingSpinnerProps",
        "AgentsUIProps",
        "AgentListProps",
        "StepProps",
        "GenerateStepProps",
        "TypeStepProps",
        "ToolsStepProps",
        "ConfirmStepProps",
        "LocationSelectProps",
        "MethodSelectProps",
        "AgentMenuProps",
        "EditMenuProps",
        "EditToolsStepProps",
        "EditModelStepProps",
        "EditColorStepProps",
        "ViewAgentProps",
        "EditAgentProps",
        "DeleteConfirmProps"
      ],
      "types": [
        "AgentLocation",
        "ModeState",
        "CreateState",
        "Tool",
        "GeneratedAgent"
      ],
      "constants": [
        "execAsync",
        "AGENT_LOCATIONS",
        "UI_ICONS",
        "FOLDER_CONFIG",
        "TOOL_CATEGORIES",
        "profiles",
        "profile",
        "systemPrompt",
        "messages",
        "response",
        "textContent",
        "MAX_JSON_SIZE",
        "MAX_FIELD_LENGTH",
        "startIdx",
        "endIdx",
        "jsonStr",
        "identifier",
        "whenToUse",
        "agentSystemPrompt",
        "sanitize",
        "cleanIdentifier",
        "fallbackId",
        "errors",
        "warnings",
        "reserved",
        "duplicate",
        "errors",
        "warnings",
        "typeValidation",
        "dir",
        "dir",
        "descriptionLines",
        "formattedDescription",
        "lines",
        "filePath",
        "tempFile",
        "toolsForFile",
        "content",
        "filePath",
        "resolvedPath",
        "projectDir",
        "homeDir",
        "isSub",
        "path",
        "rel",
        "platform",
        "child",
        "toolsForFile",
        "content",
        "filePath",
        "theme",
        "theme",
        "theme",
        "theme",
        "timer",
        "lines",
        "lineCount",
        "charCount",
        "isEmpty",
        "hasContent",
        "formatLines",
        "maxWidth",
        "result",
        "textLines",
        "displayLines",
        "visibleLines",
        "handleSubmit",
        "theme",
        "interval",
        "theme",
        "loadAgents",
        "abortController",
        "loadingId",
        "result",
        "freshSelectedAgent",
        "availableTools",
        "mcpTools",
        "load",
        "changesSummary",
        "current",
        "handleAgentSelect",
        "handleCreateNew",
        "handleAgentCreated",
        "handleAgentDeleted",
        "theme",
        "allAgentsList",
        "customAgents",
        "builtInAgents",
        "locationTabs",
        "activeMap",
        "map",
        "checkOverride",
        "active",
        "isOverridden",
        "renderCreateOption",
        "renderAgent",
        "isSelected",
        "dimmed",
        "color",
        "agentModel",
        "modelDisplay",
        "displayAgents",
        "tabIndex",
        "allNavigableItems",
        "lastAgent",
        "currentIndex",
        "prevItem",
        "firstAgent",
        "currentIndex",
        "nextItem",
        "EmptyStateInput",
        "isActive",
        "isSelected",
        "handleSubmit",
        "generated",
        "validation",
        "testId",
        "testValidation",
        "handleSubmit",
        "validation",
        "handleSubmit",
        "initialSelection",
        "categorizedTools",
        "categories",
        "displayTools",
        "allSelected",
        "categoryOptions",
        "readSelected",
        "editSelected",
        "execSelected",
        "webSelected",
        "options",
        "handleSelect",
        "option",
        "result",
        "categoryName",
        "categoryTools",
        "newSelected",
        "categorySelected",
        "newSelected",
        "isSelected",
        "isContinue",
        "isAdvancedToggle",
        "isSeparator",
        "theme",
        "manager",
        "profiles",
        "groupedModels",
        "provider",
        "modelOptions",
        "idx",
        "handleSelect",
        "isSelected",
        "isInherit",
        "theme",
        "colors",
        "handleSelect",
        "isSelected",
        "handleSubmit",
        "theme",
        "handleConfirm",
        "validation",
        "toolNames",
        "handleEditInEditor",
        "filePath",
        "command",
        "theme",
        "options",
        "handleChange",
        "handleCancel",
        "options",
        "handleChange",
        "handleCancel",
        "options",
        "availableOptions",
        "handleSelect",
        "theme",
        "options",
        "handleSelect",
        "filePath",
        "handleBack",
        "initialTools",
        "categorizedTools",
        "categories",
        "allSelected",
        "readSelected",
        "editSelected",
        "execSelected",
        "options",
        "handleSave",
        "toolsArray",
        "freshAgents",
        "updatedAgent",
        "fallbackAgent",
        "handleSelect",
        "option",
        "categoryName",
        "categoryTools",
        "newSelected",
        "categorySelected",
        "newSelected",
        "isSelected",
        "isContinue",
        "isAdvancedToggle",
        "isSeparator",
        "manager",
        "profiles",
        "currentModel",
        "modelOptions",
        "defaultIndex",
        "handleSave",
        "modelValue",
        "freshAgents",
        "updatedAgent",
        "fallbackAgent",
        "currentColor",
        "colors",
        "defaultIndex",
        "handleSave",
        "colorValue",
        "freshAgents",
        "updatedAgent",
        "fallbackAgent",
        "selectedColor",
        "previewColor",
        "isSelected",
        "isCurrent",
        "theme",
        "agentTools",
        "hasAllTools",
        "locationPath",
        "displayModel",
        "allowedTools",
        "prefix",
        "theme",
        "handleSave",
        "renderStepContent",
        "validation",
        "steps",
        "currentIndex",
        "handleConfirm"
      ],
      "lineCount": 3417,
      "complexity": "high"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\approvedTools.ts",
      "relativePath": "src/commands/approvedTools.ts",
      "name": "approvedTools.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../utils/config.js",
          "imports": [
            "ProjectConfig",
            "getCurrentProjectConfigDefault",
            "saveCurrentProjectConfigDefault"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "handleListApprovedTools",
          "type": "named"
        },
        {
          "name": "handleRemoveApprovedTool",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {
        "fileHeader": "导入项目配置相关类型和函数"
      },
      "functions": [
        {
          "name": "handleListApprovedTools",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "cwd: string",
            "projectConfigHandler: ProjectConfigHandler"
          ],
          "returnType": "string",
          "description": "处理 'approved-tools list' 命令的函数",
          "lineNumber": 24
        },
        {
          "name": "handleRemoveApprovedTool",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "tool: string",
            "projectConfigHandler: ProjectConfigHandler"
          ],
          "returnType": "{ success: boolean; message: string }",
          "description": "处理 'approved-tools remove' 命令的函数",
          "lineNumber": 38
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "ProjectConfigHandler"
      ],
      "constants": [
        "defaultConfigHandler",
        "projectConfig",
        "projectConfig",
        "originalToolCount",
        "updatedAllowedTools"
      ],
      "lineCount": 68,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\bug.tsx",
      "relativePath": "src/commands/bug.tsx",
      "name": "bug.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Bug",
          "imports": [
            "Bug"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出bug命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/Bug.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "bug"
      ],
      "lineCount": 27,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\clear.ts",
      "relativePath": "src/commands/clear.ts",
      "name": "clear.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesSetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/style",
          "imports": [
            "getCodeStyle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getOriginalCwd",
            "setCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/systemReminder",
          "imports": [
            "resetReminderSession"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/fileFreshness",
          "imports": [
            "resetFileFreshnessSession"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "clearConversation",
          "type": "named"
        },
        {
          "name": "default",
          "type": "default",
          "description": "导出clear命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/messages.ts",
        "src/context.ts",
        "src/utils/style.ts",
        "src/utils/terminal.ts",
        "src/utils/state.ts",
        "src/query.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/commands/login.tsx",
        "src/commands/onboarding.tsx",
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [
        {
          "name": "clearConversation",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "context: {\n  setForkConvoWithMessagesOnTheNextRender: (  // 用于设置新对话消息的函数类型定义\n    forkConvoWithMessages: Message[],  // 消息数组参数\n  ) => void\n}"
          ],
          "description": "导出清除对话的异步函数，用于完全重置对话状态",
          "lineNumber": 21
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "clear"
      ],
      "lineCount": 56,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\compact.ts",
      "relativePath": "src/commands/compact.ts",
      "name": "compact.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesGetter",
            "getMessagesSetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "API_ERROR_MESSAGE_PREFIX",
            "queryLLM"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages.js",
          "imports": [
            "createUserMessage",
            "normalizeMessagesForAPI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/style",
          "imports": [
            "getCodeStyle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/systemReminder",
          "imports": [
            "resetReminderSession"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/fileFreshness",
          "imports": [
            "resetFileFreshnessSession"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出compact命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/context.ts",
        "src/messages.ts",
        "src/services/claude.ts",
        "src/utils/style.ts",
        "src/utils/terminal.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "COMPRESSION_PROMPT",
        "compact",
        "messages",
        "summaryRequest",
        "summaryResponse",
        "content",
        "summary"
      ],
      "lineCount": 144,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\config.tsx",
      "relativePath": "src/commands/config.tsx",
      "name": "config.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Config",
          "imports": [
            "Config"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出config命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/Config.tsx"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "config"
      ],
      "lineCount": 25,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\cost.ts",
      "relativePath": "src/commands/cost.ts",
      "name": "cost.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../cost-tracker",
          "imports": [
            "formatTotalCost"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出cost命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/cost-tracker.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口类型定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "cost"
      ],
      "lineCount": 23,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\ctx_viz.ts",
      "relativePath": "src/commands/ctx_viz.ts",
      "name": "ctx_viz.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "cli-table3",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/prompts",
          "imports": [
            "getSystemPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesGetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/Tool.ts",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/messages.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口类型定义"
      },
      "functions": [
        {
          "name": "getContextSections",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "text: string"
          ],
          "returnType": "Section[]",
          "lineNumber": 32
        },
        {
          "name": "formatTokenCount",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "bytes: number"
          ],
          "returnType": "string",
          "lineNumber": 87
        },
        {
          "name": "formatByteCount",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "bytes: number"
          ],
          "returnType": "string",
          "lineNumber": 93
        },
        {
          "name": "createSummaryTable",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "systemText: string",
            "systemSections: Section[]",
            "tools: ToolSummary[]",
            "messages: unknown"
          ],
          "returnType": "string",
          "lineNumber": 98
        }
      ],
      "classes": [],
      "interfaces": [
        "Section",
        "ToolSummary"
      ],
      "types": [],
      "constants": [
        "BYTES_PER_TOKEN",
        "sections",
        "firstContextIndex",
        "coreSysprompt",
        "regex",
        "trimmedNonContext",
        "tokens",
        "k",
        "kb",
        "table",
        "messagesStr",
        "toolsStr",
        "total",
        "getPercentage",
        "command",
        "rawTools",
        "tools",
        "fullPrompt",
        "schema",
        "messages",
        "sections"
      ],
      "lineCount": 220,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\doctor.ts",
      "relativePath": "src/commands/doctor.ts",
      "name": "doctor.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../screens/Doctor",
          "imports": [
            "Doctor"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出doctor命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/screens/Doctor.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入React库，用于创建React元素"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "doctor",
        "element"
      ],
      "lineCount": 33,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\help.tsx",
      "relativePath": "src/commands/help.tsx",
      "name": "help.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Help",
          "imports": [
            "Help"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出help命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/Help.tsx"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "help"
      ],
      "lineCount": 27,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\init.ts",
      "relativePath": "src/commands/init.ts",
      "name": "init.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../ProjectOnboarding",
          "imports": [
            "markProjectOnboardingComplete"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出init命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/ProjectOnboarding.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口类型定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "command"
      ],
      "lineCount": 47,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\listen.ts",
      "relativePath": "src/commands/listen.ts",
      "name": "listen.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出listen命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/log.ts",
        "src/utils/execFileNoThrow.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "isEnabled",
        "listen",
        "script"
      ],
      "lineCount": 54,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\login.tsx",
      "relativePath": "src/commands/login.tsx",
      "name": "login.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../components/ConsoleOAuthFlow",
          "imports": [
            "ConsoleOAuthFlow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/auth",
          "imports": [
            "isLoggedInToAnthropic"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./clear",
          "imports": [
            "clearConversation"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出login命令的默认配置，使用函数形式以支持动态描述"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/utils/terminal.ts",
        "src/utils/auth.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/commands/clear.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入React库，用于JSX语法支持"
      },
      "functions": [
        {
          "name": "Login",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "props: { onDone: () => void }"
          ],
          "description": "Login组件，用于显示登录界面",
          "lineNumber": 46
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "exitState"
      ],
      "lineCount": 64,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\logout.tsx",
      "relativePath": "src/commands/logout.tsx",
      "name": "logout.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出logout命令的默认配置对象"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/config.ts",
        "src/utils/terminal.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入React库，用于JSX语法支持"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "config",
        "message"
      ],
      "lineCount": 54,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\mcp.ts",
      "relativePath": "src/commands/mcp.ts",
      "name": "mcp.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "listMCPServers",
            "getClients"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出mcp命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/services/mcpClient.ts",
        "src/constants/product.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口类型定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "mcp",
        "servers",
        "clients",
        "theme",
        "serverStatusLines",
        "isConnected",
        "status",
        "coloredStatus"
      ],
      "lineCount": 55,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\model.tsx",
      "relativePath": "src/commands/model.tsx",
      "name": "model.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/ModelConfig",
          "imports": [
            "ModelConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "enableConfigs"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "triggerModelConfigChange"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "help",
          "type": "named"
        },
        {
          "name": "description",
          "type": "named"
        },
        {
          "name": "isEnabled",
          "type": "named"
        },
        {
          "name": "isHidden",
          "type": "named"
        },
        {
          "name": "name",
          "type": "named"
        },
        {
          "name": "type",
          "type": "named"
        },
        {
          "name": "userFacingName",
          "type": "named"
        },
        {
          "name": "call",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/ModelConfig.tsx",
        "src/utils/config.ts",
        "src/messages.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入React库，用于JSX语法支持"
      },
      "functions": [
        {
          "name": "userFacingName",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "导出返回用户界面显示命令名称的函数",
          "lineNumber": 26
        },
        {
          "name": "call",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "onDone: (result?: string) => void",
            "context: any"
          ],
          "returnType": "Promise<React.ReactNode>",
          "description": "导出异步调用函数，执行model命令的核心逻辑",
          "lineNumber": 31
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "help",
        "description",
        "isEnabled",
        "isHidden",
        "name",
        "type"
      ],
      "lineCount": 54,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\modelstatus.tsx",
      "relativePath": "src/commands/modelstatus.tsx",
      "name": "modelstatus.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../components/ModelStatusDisplay",
          "imports": [
            "ModelStatusDisplay"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出modelstatus命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/ModelStatusDisplay.tsx"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入React库，用于JSX语法支持"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "modelstatus"
      ],
      "lineCount": 27,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\onboarding.tsx",
      "relativePath": "src/commands/onboarding.tsx",
      "name": "onboarding.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../components/Onboarding",
          "imports": [
            "Onboarding"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./clear",
          "imports": [
            "clearConversation"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出onboarding命令的默认配置对象"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/Onboarding.tsx",
        "src/utils/terminal.ts",
        "src/utils/config.ts",
        "src/commands/clear.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入React库，用于JSX语法支持"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "config"
      ],
      "lineCount": 46,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\pr_comments.ts",
      "relativePath": "src/commands/pr_comments.ts",
      "name": "pr_comments.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出pr-comments命令的默认配置对象"
        }
      ],
      "dependencies": [
        "src/commands.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 64,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\refreshCommands.ts",
      "relativePath": "src/commands/refreshCommands.ts",
      "name": "refreshCommands.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/customCommands",
          "imports": [
            "reloadCustomCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "getCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出refresh-commands命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/services/customCommands.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "refreshCommands",
        "commands",
        "customCommands"
      ],
      "lineCount": 60,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\release-notes.ts",
      "relativePath": "src/commands/release-notes.ts",
      "name": "release-notes.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../constants/macros.js",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../constants/releaseNotes",
          "imports": [
            "RELEASE_NOTES"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出release-notes命令作为默认导出，供其他模块使用"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/constants/releaseNotes.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入宏常量，包含版本信息"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "releaseNotes",
        "currentVersion",
        "requestedVersion",
        "notes",
        "header",
        "formattedNotes"
      ],
      "lineCount": 45,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\resume.tsx",
      "relativePath": "src/commands/resume.tsx",
      "name": "resume.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../screens/ResumeConversation",
          "imports": [
            "ResumeConversation"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "CACHE_PATHS",
            "loadLogList"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出resume命令的默认配置对象"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/screens/ResumeConversation.tsx",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ],
      "comments": {
        "fileHeader": "导入React库，用于JSX语法支持"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "logs"
      ],
      "lineCount": 41,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\review.ts",
      "relativePath": "src/commands/review.ts",
      "name": "review.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "导出review命令的默认配置对象"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/tools/BashTool/BashTool.tsx"
      ],
      "dependents": [
        "src/commands.ts",
        "src/entrypoints/mcp.ts"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 55,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\terminalSetup.ts",
      "relativePath": "src/commands/terminalSetup.ts",
      "name": "terminalSetup.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL",
            "platform",
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../ProjectOnboarding",
          "imports": [
            "markProjectOnboardingComplete"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "readFileSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "isShiftEnterKeyBindingInstalled",
          "type": "named"
        },
        {
          "name": "handleHashCommand",
          "type": "named"
        },
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/theme.ts",
        "src/utils/env.ts",
        "src/utils/config.ts",
        "src/ProjectOnboarding.tsx",
        "src/utils/json.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands.ts",
        "src/components/PromptInput.tsx",
        "src/ProjectOnboarding.tsx",
        "src/screens/REPL.tsx"
      ],
      "comments": {
        "fileHeader": "导入命令接口定义"
      },
      "functions": [
        {
          "name": "isShiftEnterKeyBindingInstalled",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "boolean",
          "lineNumber": 62
        },
        {
          "name": "handleHashCommand",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "interpreted: string"
          ],
          "returnType": "void",
          "lineNumber": 66
        },
        {
          "name": "installBindingsForITerm2",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<string>",
          "lineNumber": 146
        },
        {
          "name": "installBindingsForVSCodeTerminal",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "lineNumber": 183
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "VSCodeKeybinding"
      ],
      "constants": [
        "terminalSetup",
        "config",
        "cwd",
        "codeContextPath",
        "claudePath",
        "filesToUpdate",
        "now",
        "timezoneMatch",
        "timezone",
        "timestamp",
        "updatedFiles",
        "separator",
        "newContent",
        "vscodeKeybindingsPath",
        "content",
        "keybindings",
        "existingBinding"
      ],
      "lineCount": 234,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands.ts",
      "relativePath": "src/commands.ts",
      "name": "commands.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/bug",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/clear",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/compact",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/config",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/cost",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/ctx_viz",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/doctor",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/help",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/init",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/listen",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/login",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/logout",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/mcp",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/model",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/modelstatus",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/onboarding",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/pr_comments",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/refreshCommands",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/release-notes",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/review",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/terminalSetup",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/resume",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/agents",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/mcpClient",
          "imports": [
            "getMCPCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/customCommands",
          "imports": [
            "loadCustomCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "MessageParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./utils/auth",
          "imports": [
            "isAnthropicAuthEnabled"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getCommands",
          "type": "named"
        },
        {
          "name": "hasCommand",
          "type": "named"
        },
        {
          "name": "getCommand",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands/bug.tsx",
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/config.tsx",
        "src/commands/cost.ts",
        "src/commands/ctx_viz.ts",
        "src/commands/doctor.ts",
        "src/commands/help.tsx",
        "src/commands/init.ts",
        "src/commands/listen.ts",
        "src/commands/login.tsx",
        "src/commands/logout.tsx",
        "src/commands/mcp.ts",
        "src/commands/model.tsx",
        "src/commands/modelstatus.tsx",
        "src/commands/onboarding.tsx",
        "src/commands/pr_comments.ts",
        "src/commands/refreshCommands.ts",
        "src/commands/release-notes.ts",
        "src/commands/review.ts",
        "src/commands/terminalSetup.ts",
        "src/Tool.ts",
        "src/commands/resume.tsx",
        "src/commands/agents.tsx",
        "src/services/mcpClient.ts",
        "src/services/customCommands.ts",
        "src/query.ts",
        "src/utils/auth.ts"
      ],
      "dependents": [
        "src/commands/bug.tsx",
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/config.tsx",
        "src/commands/cost.ts",
        "src/commands/ctx_viz.ts",
        "src/commands/doctor.ts",
        "src/commands/help.tsx",
        "src/commands/init.ts",
        "src/commands/listen.ts",
        "src/commands/login.tsx",
        "src/commands/logout.tsx",
        "src/commands/mcp.ts",
        "src/commands/modelstatus.tsx",
        "src/commands/onboarding.tsx",
        "src/commands/pr_comments.ts",
        "src/commands/refreshCommands.ts",
        "src/commands/release-notes.ts",
        "src/commands/resume.tsx",
        "src/commands/review.ts",
        "src/commands/terminalSetup.ts",
        "src/components/Help.tsx",
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useUnifiedCompletion.ts",
        "src/screens/REPL.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/services/customCommands.ts",
        "src/services/mcpClient.ts",
        "src/utils/ask.tsx",
        "src/utils/messages.tsx"
      ],
      "comments": {
        "fileHeader": "导入React库，用于JSX命令组件"
      },
      "functions": [
        {
          "name": "hasCommand",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "commandName: string",
            "commands: Command[]"
          ],
          "returnType": "boolean",
          "description": "检查是否存在指定名称的命令 - 支持命令名称和别名查找",
          "lineNumber": 136
        },
        {
          "name": "getCommand",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "commandName: string",
            "commands: Command[]"
          ],
          "returnType": "Command",
          "description": "根据命令名称获取具体的命令对象 - 如果找不到则抛出错误",
          "lineNumber": 144
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "PromptCommand",
        "LocalCommand",
        "LocalJSXCommand",
        "Command"
      ],
      "constants": [
        "INTERNAL_ONLY_COMMANDS",
        "COMMANDS",
        "getCommands",
        "command",
        "name"
      ],
      "lineCount": 166,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ApproveApiKey.tsx",
      "relativePath": "src/components/ApproveApiKey.tsx",
      "name": "ApproveApiKey.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ApproveApiKey",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts",
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ApproveApiKey",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  customApiKeyTruncated,\n  onDone,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 14
        },
        {
          "name": "onChange",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "value: 'yes' | 'no'"
          ],
          "lineNumber": 20
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "theme",
        "config",
        "exitState"
      ],
      "lineCount": 94,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\AsciiLogo.tsx",
      "relativePath": "src/components/AsciiLogo.tsx",
      "name": "AsciiLogo.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "ASCII_LOGO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AsciiLogo",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/Logo.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "AsciiLogo",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.ReactNode",
          "lineNumber": 6
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "theme"
      ],
      "lineCount": 14,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\binary-feedback\\BinaryFeedback.tsx",
      "relativePath": "src/components/binary-feedback/BinaryFeedback.tsx",
      "name": "BinaryFeedback.tsx",
      "extension": ".tsx",
      "directory": "src/components/binary-feedback",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "React",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/useNotifyAfterTimeout",
          "imports": [
            "useNotifyAfterTimeout"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage",
            "BinaryFeedbackResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "NormalizedMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./BinaryFeedbackView",
          "imports": [
            "BinaryFeedbackView"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils.js",
          "imports": [
            "BinaryFeedbackChoose",
            "getBinaryFeedbackResultForChoice",
            "logBinaryFeedbackEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "BinaryFeedback",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useNotifyAfterTimeout.ts",
        "src/query.ts",
        "src/Tool.ts",
        "src/utils/messages.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "BinaryFeedback",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  m1,\n  m2,\n  resolve,\n  debug,\n  erroredToolUseIDs,\n  inProgressToolUseIDs,\n  normalizedMessages,\n  tools,\n  unresolvedToolUseIDs,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 27
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "onChoose"
      ],
      "lineCount": 64,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\binary-feedback\\BinaryFeedbackOption.tsx",
      "relativePath": "src/components/binary-feedback/BinaryFeedbackOption.tsx",
      "name": "BinaryFeedbackOption.tsx",
      "extension": ".tsx",
      "directory": "src/components/binary-feedback",
      "level": 2,
      "imports": [
        {
          "source": "../../tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions/FileEditPermissionRequest/FileEditToolDiff",
          "imports": [
            "FileEditToolDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Message",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages.js",
          "imports": [
            "normalizeMessages",
            "NormalizedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions/FileWritePermissionRequest/FileWriteToolDiff",
          "imports": [
            "FileWriteToolDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "BinaryFeedbackOption",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/Message.tsx",
        "src/Tool.ts",
        "src/hooks/useTerminalSize.ts",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/query.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackView.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "BinaryFeedbackOption",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  debug,\n  erroredToolUseIDs,\n  inProgressToolUseIDs,\n  message,\n  normalizedMessages,\n  tools,\n  unresolvedToolUseIDs,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 27
        },
        {
          "name": "AdditionalContext",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{\n  message,\n  verbose,\n}"
          ],
          "lineNumber": 61
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "content",
        "input",
        "input"
      ],
      "lineCount": 112,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\binary-feedback\\BinaryFeedbackView.tsx",
      "relativePath": "src/components/binary-feedback/BinaryFeedbackView.tsx",
      "name": "BinaryFeedbackView.tsx",
      "extension": ".tsx",
      "directory": "src/components/binary-feedback",
      "level": 2,
      "imports": [
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option",
            "SelectProps"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink-link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "NormalizedMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./BinaryFeedbackOption",
          "imports": [
            "BinaryFeedbackOption"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./utils",
          "imports": [
            "BinaryFeedbackChoose"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "BinaryFeedbackChoice"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getOptions",
          "type": "named"
        },
        {
          "name": "BinaryFeedbackView",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/Tool.ts",
        "src/utils/messages.tsx",
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/query.ts",
        "src/components/binary-feedback/utils.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedback.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getOptions",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "BinaryFeedbackOption[]",
          "description": "Make options a function to avoid early theme access during module initialization",
          "lineNumber": 22
        },
        {
          "name": "BinaryFeedbackView",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  m1,\n  m2,\n  onChoose,\n  debug,\n  erroredToolUseIDs,\n  inProgressToolUseIDs,\n  normalizedMessages,\n  tools,\n  unresolvedToolUseIDs,\n  verbose,\n}"
          ],
          "lineNumber": 60
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "BinaryFeedbackOption",
        "Props"
      ],
      "constants": [
        "HELP_URL",
        "theme",
        "exitState"
      ],
      "lineCount": 173,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\binary-feedback\\utils.ts",
      "relativePath": "src/components/binary-feedback/utils.ts",
      "name": "utils.ts",
      "extension": ".ts",
      "directory": "src/components/binary-feedback",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlock",
            "ToolUseBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage",
            "BinaryFeedbackResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "MAIN_QUERY_TEMPERATURE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "isEqual",
            "zip"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/git",
          "imports": [
            "getGitState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "logBinaryFeedbackEvent",
          "type": "named"
        },
        {
          "name": "logBinaryFeedbackSamplingDecision",
          "type": "named"
        },
        {
          "name": "logBinaryFeedbackDisplayDecision",
          "type": "named"
        },
        {
          "name": "shouldUseBinaryFeedback",
          "type": "named"
        },
        {
          "name": "messagePairValidForBinaryFeedback",
          "type": "named"
        },
        {
          "name": "getBinaryFeedbackResultForChoice",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/services/claude.ts",
        "src/utils/git.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackView.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getBinaryFeedbackStatsigConfig",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<BinaryFeedbackConfig>",
          "lineNumber": 20
        },
        {
          "name": "getMessageBlockSequence",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "m: AssistantMessage"
          ],
          "lineNumber": 25
        },
        {
          "name": "logBinaryFeedbackEvent",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "m1: AssistantMessage",
            "m2: AssistantMessage",
            "choice: BinaryFeedbackChoice"
          ],
          "returnType": "Promise<void>",
          "lineNumber": 33
        },
        {
          "name": "logBinaryFeedbackSamplingDecision",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "decision: boolean",
            "reason: string"
          ],
          "returnType": "Promise<void>",
          "lineNumber": 44
        },
        {
          "name": "logBinaryFeedbackDisplayDecision",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "decision: boolean",
            "m1: AssistantMessage",
            "m2: AssistantMessage",
            "reason: string"
          ],
          "returnType": "Promise<void>",
          "lineNumber": 51
        },
        {
          "name": "textContentBlocksEqual",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "cb1: TextBlock",
            "cb2: TextBlock"
          ],
          "returnType": "boolean",
          "lineNumber": 60
        },
        {
          "name": "contentBlocksEqual",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "cb1: TextBlock | ToolUseBlock",
            "cb2: TextBlock | ToolUseBlock"
          ],
          "returnType": "boolean",
          "lineNumber": 64
        },
        {
          "name": "allContentBlocksEqual",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "content1: (TextBlock | ToolUseBlock)[]",
            "content2: (TextBlock | ToolUseBlock)[]"
          ],
          "returnType": "boolean",
          "lineNumber": 78
        },
        {
          "name": "shouldUseBinaryFeedback",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<boolean>",
          "lineNumber": 90
        },
        {
          "name": "messagePairValidForBinaryFeedback",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "m1: AssistantMessage",
            "m2: AssistantMessage"
          ],
          "returnType": "boolean",
          "lineNumber": 123
        },
        {
          "name": "getBinaryFeedbackResultForChoice",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "m1: AssistantMessage",
            "m2: AssistantMessage",
            "choice: BinaryFeedbackChoice"
          ],
          "returnType": "BinaryFeedbackResult",
          "lineNumber": 169
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "BinaryFeedbackChoice",
        "BinaryFeedbackChoose",
        "BinaryFeedbackConfig"
      ],
      "constants": [
        "modelA",
        "modelB",
        "gitState",
        "config",
        "logPass",
        "logFail",
        "nonThinkingBlocks1",
        "nonThinkingBlocks2",
        "hasToolUse"
      ],
      "lineCount": 188,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Bug.tsx",
      "relativePath": "src/components/Bug.tsx",
      "name": "Bug.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState",
            "useCallback",
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesGetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./TextInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError",
            "getInMemoryErrors"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/git",
          "imports": [
            "getGitState",
            "getIsGit",
            "GitRepoState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getAnthropicApiKey",
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/http",
          "imports": [
            "USER_AGENT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "API_ERROR_MESSAGE_PREFIX",
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/browser",
          "imports": [
            "openBrowser"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "GITHUB_ISSUES_REPO_URL"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Bug",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/messages.ts",
        "src/query.ts",
        "src/components/TextInput.tsx",
        "src/utils/log.ts",
        "src/utils/env.ts",
        "src/utils/git.ts",
        "src/hooks/useTerminalSize.ts",
        "src/utils/config.ts",
        "src/utils/http.ts",
        "src/constants/product.ts",
        "src/services/claude.ts",
        "src/utils/browser.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/commands/bug.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Bug",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onDone }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 41
        },
        {
          "name": "loadEnvInfo",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 56
        },
        {
          "name": "createGitHubIssueUrl",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "feedbackId: string",
            "title: string",
            "description: string"
          ],
          "returnType": "string",
          "lineNumber": 265
        },
        {
          "name": "generateTitle",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "description: string"
          ],
          "returnType": "Promise<string>",
          "lineNumber": 306
        },
        {
          "name": "submitFeedback",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "data: FeedbackData"
          ],
          "returnType": "Promise<{ success: boolean; feedbackId?: string }>",
          "lineNumber": 323
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props",
        "Step",
        "FeedbackData"
      ],
      "constants": [
        "textInputColumns",
        "messages",
        "isGit",
        "exitState",
        "submitReport",
        "issueUrl",
        "theme",
        "globalConfig",
        "modelProfiles",
        "activeProfiles",
        "body",
        "response",
        "title"
      ],
      "lineCount": 367,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Config.tsx",
      "relativePath": "src/components/Config.tsx",
      "name": "Config.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "GlobalConfig",
            "saveGlobalConfig",
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Config",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/commands/config.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 配置管理组件 - Kode系统的交互式配置管理界面配置管理架构：\n┌─────────────────────────────────────────────────────────────────┐\n│                    配置管理系统架构                              │\n├─────────────────────────────────────────────────────────────────┤\n│ 配置加载 → 界面渲染 → 键盘交互 → 实时更新 → 配置保存           │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 🔧 全局配置：主题、详细模式、流式响应等系统级设置\n2. 🤖 模型管理：显示已配置的AI模型和提供商信息\n3. ⌨️ 键盘导航：方向键导航，回车编辑，ESC退出\n4. 🎨 实时预览：配置更改立即生效并可视化反馈\n5. 💾 自动保存：退出时自动保存配置更改\n6. 🔤 类型安全：支持布尔、枚举、字符串、数字类型设置"
      },
      "functions": [
        {
          "name": "Config",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onClose }"
          ],
          "returnType": "React.ReactNode",
          "description": "🎯 配置管理主组件 - 提供交互式的系统配置管理界面组件状态管理：",
          "lineNumber": 136
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props",
        "Setting"
      ],
      "constants": [
        "initialConfig",
        "exitState",
        "modelManager",
        "activeProfiles",
        "settings",
        "config",
        "config",
        "config",
        "theme",
        "currentSetting",
        "numValue",
        "currentSetting",
        "currentIndex",
        "nextIndex",
        "currentConfigString",
        "initialConfigString"
      ],
      "lineCount": 418,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ConsoleOAuthFlow.tsx",
      "relativePath": "src/components/ConsoleOAuthFlow.tsx",
      "name": "ConsoleOAuthFlow.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useEffect",
            "useState",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Static",
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TextInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/oauth",
          "imports": [
            "OAuthService",
            "createAndStoreApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AsciiLogo",
          "imports": [
            "AsciiLogo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Spinner",
          "imports": [
            "SimpleSpinner"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Onboarding",
          "imports": [
            "WelcomeBox"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/notifier",
          "imports": [
            "sendNotification"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ConsoleOAuthFlow",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/TextInput.tsx",
        "src/services/oauth.ts",
        "src/utils/theme.ts",
        "src/components/AsciiLogo.tsx",
        "src/hooks/useTerminalSize.ts",
        "src/utils/log.ts",
        "src/utils/terminal.ts",
        "src/components/Spinner.tsx",
        "src/components/Onboarding.tsx",
        "src/constants/product.ts",
        "src/services/notifier.ts"
      ],
      "dependents": [
        "src/commands/login.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ConsoleOAuthFlow",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onDone }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 34
        },
        {
          "name": "handleSubmitCode",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "value: string",
            "url: string"
          ],
          "lineNumber": 88
        },
        {
          "name": "renderStatusMessage",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.ReactNode",
          "description": "Helper function to render the appropriate status message",
          "lineNumber": 185
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props",
        "OAuthStatus"
      ],
      "constants": [
        "PASTE_HERE_MSG",
        "theme",
        "textInputColumns",
        "startOAuth",
        "result",
        "apiKey",
        "errorMessage",
        "staticItems"
      ],
      "lineCount": 324,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Cost.tsx",
      "relativePath": "src/components/Cost.tsx",
      "name": "Cost.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Cost",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/tools/WebSearchTool/WebSearchTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Cost",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ costUSD, durationMs, debug }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 10
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "durationInSeconds"
      ],
      "lineCount": 24,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CostThresholdDialog.tsx",
      "relativePath": "src/components/CostThresholdDialog.tsx",
      "name": "CostThresholdDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "CostThresholdDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/utils/theme.ts",
        "src/components/Link.tsx"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "CostThresholdDialog",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onDone }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 11
        }
      ],
      "classes": [],
      "interfaces": [
        "Props"
      ],
      "types": [],
      "constants": [],
      "lineCount": 47,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\option-map.ts",
      "relativePath": "src/components/CustomSelect/option-map.ts",
      "name": "option-map.ts",
      "extension": ".ts",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./select",
          "imports": [
            "optionHeaderKey",
            "OptionHeader"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "OptionMap",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx"
      ],
      "dependents": [
        "src/components/CustomSelect/use-select-state.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [
        {
          "name": "OptionMap",
          "isExported": true,
          "extends": "Map<string, OptionMapItem>",
          "methods": [],
          "lineNumber": 10
        }
      ],
      "interfaces": [],
      "types": [
        "OptionMapItem"
      ],
      "constants": [
        "items",
        "item",
        "key"
      ],
      "lineCount": 43,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\select-option.tsx",
      "relativePath": "src/components/CustomSelect/select-option.tsx",
      "name": "select-option.tsx",
      "extension": ".tsx",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "ReactNode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./theme",
          "imports": [
            "Theme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SelectOption",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/theme.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/CustomSelect/select.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "SelectOption",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  isFocused,\n  isSelected,\n  smallPointer,\n  children,\n  ...props\n}"
          ],
          "lineNumber": 34
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "SelectOptionProps"
      ],
      "constants": [
        "appTheme",
        "styles"
      ],
      "lineCount": 79,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\select.tsx",
      "relativePath": "src/components/CustomSelect/select.tsx",
      "name": "select.tsx",
      "extension": ".tsx",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "ReactNode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./select-option",
          "imports": [
            "SelectOption"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./theme",
          "imports": [
            "Theme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./use-select-state",
          "imports": [
            "useSelectState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./use-select",
          "imports": [
            "useSelect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "optionHeaderKey",
          "type": "named"
        },
        {
          "name": "Select",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select-option.tsx",
        "src/components/CustomSelect/theme.ts",
        "src/components/CustomSelect/use-select-state.ts",
        "src/components/CustomSelect/use-select.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/ApproveApiKey.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/CostThresholdDialog.tsx",
        "src/components/CustomSelect/option-map.ts",
        "src/components/CustomSelect/use-select-state.ts",
        "src/components/InvalidConfigDialog.tsx",
        "src/components/LogSelector.tsx",
        "src/components/MCPServerApprovalDialog.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/Onboarding.tsx",
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/permissions/toolUseOptions.ts",
        "src/components/TrustDialog.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Select",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  isDisabled = false,\n  visibleOptionCount = 5,\n  highlightText,\n  options,\n  defaultValue,\n  onChange,\n  onFocus,\n  focusValue,\n}"
          ],
          "lineNumber": 77
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "OptionSubtree",
        "OptionHeader",
        "SelectProps"
      ],
      "constants": [
        "optionHeaderKey",
        "state",
        "appTheme",
        "styles",
        "key",
        "isFocused",
        "isSelected",
        "smallPointer",
        "labelText",
        "index"
      ],
      "lineCount": 153,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\theme.ts",
      "relativePath": "src/components/CustomSelect/theme.ts",
      "name": "theme.ts",
      "extension": ".ts",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "BoxProps",
            "TextProps"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "Theme",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/CustomSelect/select-option.tsx",
        "src/components/CustomSelect/select.tsx"
      ],
      "comments": {
        "fileHeader": "Theme type definitions for CustomSelect components"
      },
      "functions": [],
      "classes": [],
      "interfaces": [
        "Theme"
      ],
      "types": [],
      "constants": [],
      "lineCount": 45,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\use-select-state.ts",
      "relativePath": "src/components/CustomSelect/use-select-state.ts",
      "name": "use-select-state.ts",
      "extension": ".ts",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "node:util",
          "imports": [
            "isDeepStrictEqual"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useReducer",
            "Reducer",
            "useCallback",
            "useMemo",
            "useState",
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./option-map",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./select",
          "imports": [
            "OptionHeader",
            "OptionSubtree"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "useSelectState",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/option-map.ts",
        "src/components/CustomSelect/select.tsx"
      ],
      "dependents": [
        "src/components/CustomSelect/select.tsx",
        "src/components/CustomSelect/use-select.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [
        "State",
        "Action",
        "SetFocusAction",
        "FocusNextOptionAction",
        "FocusPreviousOptionAction",
        "SelectFocusedOptionAction",
        "ResetAction",
        "UseSelectStateProps",
        "SelectState"
      ],
      "constants": [
        "reducer",
        "item",
        "needsToScroll",
        "nextVisibleToIndex",
        "nextVisibleFromIndex",
        "item",
        "needsToScroll",
        "nextVisibleFromIndex",
        "nextVisibleToIndex",
        "flattenOptions",
        "flatSubtree",
        "optionValues",
        "header",
        "createDefaultState",
        "flatOptions",
        "visibleOptionCount",
        "optionMap",
        "firstOption",
        "focusedIndex",
        "halfVisible",
        "useSelectState",
        "flatOptions",
        "focusNextOption",
        "focusPreviousOption",
        "selectFocusedOption",
        "visibleOptions"
      ],
      "lineCount": 415,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\use-select.ts",
      "relativePath": "src/components/CustomSelect/use-select.ts",
      "name": "use-select.ts",
      "extension": ".ts",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./use-select-state",
          "imports": [
            "SelectState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useSelect",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/use-select-state.ts"
      ],
      "dependents": [
        "src/components/CustomSelect/select.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [
        "UseSelectProps"
      ],
      "constants": [
        "useSelect"
      ],
      "lineCount": 36,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\FallbackToolUseRejectedMessage.tsx",
      "relativePath": "src/components/FallbackToolUseRejectedMessage.tsx",
      "name": "FallbackToolUseRejectedMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FallbackToolUseRejectedMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MCPTool/MCPTool.tsx",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/tools/WebSearchTool/WebSearchTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "FallbackToolUseRejectedMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.ReactNode",
          "lineNumber": 6
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 16,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\FileEditToolUpdatedMessage.tsx",
      "relativePath": "src/components/FileEditToolUpdatedMessage.tsx",
      "name": "FileEditToolUpdatedMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "relative"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileEditToolUpdatedMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/array.ts",
        "src/components/StructuredDiff.tsx",
        "src/utils/theme.ts",
        "src/utils/state.ts",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "FileEditToolUpdatedMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  filePath,\n  structuredPatch,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 17
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "patches",
        "numAdditions",
        "numRemovals"
      ],
      "lineCount": 69,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Help.tsx",
      "relativePath": "src/components/Help.tsx",
      "name": "Help.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND",
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/customCommands",
          "imports": [
            "getCustomCommandDirectories",
            "hasCustomCommands",
            "CustomCommandWithScope"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PressEnterToContinue",
          "imports": [
            "PressEnterToContinue"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Help",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/constants/product.ts",
        "src/services/customCommands.ts",
        "src/utils/theme.ts",
        "src/components/PressEnterToContinue.tsx",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/commands/help.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Help",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  commands,\n  onClose,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "Help Component - Interactive help system with progressive disclosureThis component provides a comprehensive help interface that progressively",
          "lineNumber": 24
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "theme",
        "moreHelp",
        "filteredCommands",
        "builtInCommands",
        "customCommands",
        "timer"
      ],
      "lineCount": 216,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\HighlightedCode.tsx",
      "relativePath": "src/components/HighlightedCode.tsx",
      "name": "HighlightedCode.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "cli-highlight",
          "imports": [
            "highlight",
            "supportsLanguage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "HighlightedCode",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "HighlightedCode",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ code, language }"
          ],
          "returnType": "React.ReactElement",
          "lineNumber": 11
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "highlightedCode"
      ],
      "lineCount": 34,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\InvalidConfigDialog.tsx",
      "relativePath": "src/components/InvalidConfigDialog.tsx",
      "name": "InvalidConfigDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Newline",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/errors",
          "imports": [
            "ConfigParseError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "showInvalidConfigDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/utils/errors.ts",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "InvalidConfigDialog",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{\n  filePath,\n  errorDescription,\n  onExit,\n  onReset,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "Dialog shown when the Claude config file contains invalid JSON",
          "lineNumber": 23
        },
        {
          "name": "showInvalidConfigDialog",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  error,\n}"
          ],
          "returnType": "Promise<void>",
          "lineNumber": 89
        }
      ],
      "classes": [],
      "interfaces": [
        "InvalidConfigHandlerProps",
        "InvalidConfigDialogProps"
      ],
      "types": [],
      "constants": [
        "theme",
        "exitState",
        "handleSelect"
      ],
      "lineCount": 114,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Link.tsx",
      "relativePath": "src/components/Link.tsx",
      "name": "Link.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink-link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Link",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/components/CostThresholdDialog.tsx",
        "src/components/TrustDialog.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Link",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ url, children }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 14
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "LinkProps"
      ],
      "constants": [
        "LINK_SUPPORTING_TERMINALS",
        "supportsLinks",
        "displayContent"
      ],
      "lineCount": 33,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Logo.tsx",
      "relativePath": "src/components/Logo.tsx",
      "name": "Logo.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "Newline"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getAnthropicApiKey",
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AsciiLogo",
          "imports": [
            "AsciiLogo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "WrappedClient"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MIN_LOGO_WIDTH",
          "type": "named"
        },
        {
          "name": "Logo",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/constants/product.ts",
        "src/utils/config.ts",
        "src/utils/state.ts",
        "src/components/AsciiLogo.tsx",
        "src/services/mcpClient.ts",
        "src/utils/model.ts",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/components/Onboarding.tsx",
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Logo",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  mcpClients,\n  isDefaultModel = false,\n  updateBannerVersion,\n  updateBannerCommands,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 19
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "MIN_LOGO_WIDTH",
        "DEFAULT_UPDATE_COMMANDS",
        "width",
        "theme",
        "config",
        "modelManager",
        "mainModelName",
        "currentModel",
        "apiKey",
        "hasOverrides"
      ],
      "lineCount": 172,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\LogSelector.tsx",
      "relativePath": "src/components/LogSelector.tsx",
      "name": "LogSelector.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/logs",
          "imports": [
            "LogOption"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "formatDate"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "LogSelector",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/types/logs.ts",
        "src/utils/theme.ts",
        "src/hooks/useTerminalSize.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/screens/LogList.tsx",
        "src/screens/ResumeConversation.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "LogSelector",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  logs,\n  onSelect,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 14
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "LogSelectorProps"
      ],
      "constants": [
        "visibleCount",
        "hiddenCount",
        "indexWidth",
        "modifiedWidth",
        "createdWidth",
        "countWidth",
        "options",
        "index",
        "modified",
        "created",
        "msgCount",
        "prompt",
        "labelTxt",
        "truncated"
      ],
      "lineCount": 87,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MCPServerApprovalDialog.tsx",
      "relativePath": "src/components/MCPServerApprovalDialog.tsx",
      "name": "MCPServerApprovalDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "saveCurrentProjectConfig",
            "getCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./MCPServerDialogCopy",
          "imports": [
            "MCPServerDialogCopy"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MCPServerApprovalDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/components/MCPServerDialogCopy.tsx",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/services/mcpServerApproval.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "MCPServerApprovalDialog",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  serverName,\n  onDone,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 17
        },
        {
          "name": "onChange",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "value: 'yes' | 'no'"
          ],
          "lineNumber": 22
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "theme",
        "config",
        "exitState"
      ],
      "lineCount": 101,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MCPServerDialogCopy.tsx",
      "relativePath": "src/components/MCPServerDialogCopy.tsx",
      "name": "MCPServerDialogCopy.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink-link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME",
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MCPServerDialogCopy",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/MCPServerApprovalDialog.tsx",
        "src/components/MCPServerMultiselectDialog.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "MCPServerDialogCopy",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.ReactNode",
          "lineNumber": 6
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 26,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MCPServerMultiselectDialog.tsx",
      "relativePath": "src/components/MCPServerMultiselectDialog.tsx",
      "name": "MCPServerMultiselectDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "MultiSelect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "saveCurrentProjectConfig",
            "getCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "partition"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./MCPServerDialogCopy",
          "imports": [
            "MCPServerDialogCopy"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MCPServerMultiselectDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/MCPServerDialogCopy.tsx",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/services/mcpServerApproval.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "MCPServerMultiselectDialog",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  serverNames,\n  onDone,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 18
        },
        {
          "name": "onSubmit",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "selectedServers: string[]"
          ],
          "lineNumber": 23
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "theme",
        "config",
        "exitState",
        "config"
      ],
      "lineCount": 110,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Message.tsx",
      "relativePath": "src/components/Message.tsx",
      "name": "Message.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage",
            "Message",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ContentBlock",
            "DocumentBlockParam",
            "ImageBlockParam",
            "TextBlockParam",
            "ThinkingBlockParam",
            "ToolResultBlockParam",
            "ToolUseBlockParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/UserToolResultMessage/UserToolResultMessage",
          "imports": [
            "UserToolResultMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/AssistantToolUseMessage",
          "imports": [
            "AssistantToolUseMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/AssistantTextMessage",
          "imports": [
            "AssistantTextMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/UserTextMessage",
          "imports": [
            "UserTextMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "NormalizedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/AssistantThinkingMessage",
          "imports": [
            "AssistantThinkingMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/AssistantRedactedThinkingMessage",
          "imports": [
            "AssistantRedactedThinkingMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Message",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/Tool.ts",
        "src/utils/log.ts",
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/UserTextMessage.tsx",
        "src/utils/messages.tsx",
        "src/components/messages/AssistantThinkingMessage.tsx",
        "src/components/messages/AssistantRedactedThinkingMessage.tsx",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/MessageSelector.tsx",
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Message",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  message,\n  messages,\n  addMargin,\n  tools,\n  verbose,\n  debug,\n  erroredToolUseIDs,\n  inProgressToolUseIDs,\n  unresolvedToolUseIDs,\n  shouldAnimate,\n  shouldShowDot,\n  width,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 40
        },
        {
          "name": "UserMessage",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{\n  message,\n  messages,\n  addMargin,\n  tools,\n  param,\n  options: { verbose },\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 103
        },
        {
          "name": "AssistantMessage",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{\n  param,\n  costUSD,\n  durationMs,\n  addMargin,\n  tools,\n  debug,\n  options: { verbose },\n  erroredToolUseIDs,\n  inProgressToolUseIDs,\n  unresolvedToolUseIDs,\n  shouldAnimate,\n  shouldShowDot,\n  width,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 144
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "content"
      ],
      "lineCount": 222,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MessageResponse.tsx",
      "relativePath": "src/components/MessageResponse.tsx",
      "name": "MessageResponse.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MessageResponse",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/screens/REPL.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "MessageResponse",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ children }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 8
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [],
      "lineCount": 16,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantBashOutputMessage.tsx",
      "relativePath": "src/components/messages/AssistantBashOutputMessage.tsx",
      "name": "AssistantBashOutputMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/BashTool/BashToolResultMessage",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantBashOutputMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/utils/messages.tsx"
      ],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "AssistantBashOutputMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  content,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 5
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "stdout",
        "stderr",
        "stdoutLines",
        "stderrLines"
      ],
      "lineCount": 23,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantLocalCommandOutputMessage.tsx",
      "relativePath": "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
      "name": "AssistantLocalCommandOutputMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantLocalCommandOutputMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/messages.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "AssistantLocalCommandOutputMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  content,\n}"
          ],
          "returnType": "React.ReactNode[]",
          "lineNumber": 6
        },
        {
          "name": "format",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "content: string | undefined",
            "color: string"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 44
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "stdout",
        "stderr",
        "theme"
      ],
      "lineCount": 50,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantRedactedThinkingMessage.tsx",
      "relativePath": "src/components/messages/AssistantRedactedThinkingMessage.tsx",
      "name": "AssistantRedactedThinkingMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantRedactedThinkingMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "AssistantRedactedThinkingMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  addMargin = false,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 9
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [],
      "lineCount": 20,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantTextMessage.tsx",
      "relativePath": "src/components/messages/AssistantTextMessage.tsx",
      "name": "AssistantTextMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AssistantBashOutputMessage",
          "imports": [
            "AssistantBashOutputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AssistantLocalCommandOutputMessage",
          "imports": [
            "AssistantLocalCommandOutputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude.js",
          "imports": [
            "API_ERROR_MESSAGE_PREFIX",
            "CREDIT_BALANCE_TOO_LOW_ERROR_MESSAGE",
            "INVALID_API_KEY_ERROR_MESSAGE",
            "PROMPT_TOO_LONG_ERROR_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages.js",
          "imports": [
            "CANCEL_MESSAGE",
            "INTERRUPT_MESSAGE",
            "INTERRUPT_MESSAGE_FOR_TOOL_USE",
            "isEmptyMessageText",
            "NO_RESPONSE_REQUESTED"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/figures",
          "imports": [
            "BLACK_CIRCLE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/markdown",
          "imports": [
            "applyMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantTextMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/messages/AssistantBashOutputMessage.tsx",
        "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
        "src/utils/theme.ts",
        "src/components/Cost.tsx",
        "src/constants/figures.ts",
        "src/utils/markdown.ts",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 AI 助手文本消息组件 - 智能消息显示和格式化的核心组件🏗️ 核心功能：\n- 提供 AI 助手响应消息的统一展示界面\n- 支持多种特殊消息类型的差异化渲染\n- 集成 Markdown 格式化和语法高亮\n- 实现错误消息和状态提示的可视化\n- 提供成本统计和性能指标的实时显示🔄 依赖关系：\n- 上游：被消息渲染系统调用进行 AI 响应展示\n- 下游：依赖主题系统、Markdown 处理、终端适配📊 使用场景：\n- AI 助手的标准文本响应显示\n- 命令输出结果的结构化展示\n- 错误信息和警告提示的可视化\n- 系统状态和用户交互的反馈显示🔧 技术实现：\n- 智能路由：基于内容类型的消息分发机制\n- 样式差异化：不同消息类型的视觉区分\n- 响应式布局：自适应终端宽度的界面调整\n- 成本集成：实时显示 API 调用成本和耗时💡 设计原则：\n- 内容优先：确保消息内容的清晰可读\n- 类型区分：不同消息类型的明确视觉标识\n- 响应适配：适应不同终端尺寸的灵活布局\n- 用户体验：提供丰富的交互反馈和状态提示"
      },
      "functions": [
        {
          "name": "AssistantTextMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  param: { text },\n  costUSD,\n  durationMs,\n  debug,\n  addMargin,\n  shouldShowDot,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "🎨 AI 助手文本消息渲染组件 - 多类型消息的智能分发和展示器负责将 AI 助手的文本响应进行智能分类和格式化显示，支持多种",
          "lineNumber": 123
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [],
      "lineCount": 232,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantThinkingMessage.tsx",
      "relativePath": "src/components/messages/AssistantThinkingMessage.tsx",
      "name": "AssistantThinkingMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/markdown",
          "imports": [
            "applyMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ThinkingBlock",
            "ThinkingBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantThinkingMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/markdown.ts"
      ],
      "dependents": [
        "src/components/Message.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "AssistantThinkingMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  param: { thinking },\n  addMargin = false,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 15
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [],
      "lineCount": 41,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantToolUseMessage.tsx",
      "relativePath": "src/components/messages/AssistantToolUseMessage.tsx",
      "name": "AssistantToolUseMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../ToolUseLoader",
          "imports": [
            "ToolUseLoader"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/figures",
          "imports": [
            "BLACK_CIRCLE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/ThinkTool/ThinkTool",
          "imports": [
            "ThinkTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AssistantThinkingMessage",
          "imports": [
            "AssistantThinkingMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TaskToolMessage",
          "imports": [
            "TaskToolMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantToolUseMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/Tool.ts",
        "src/components/Cost.tsx",
        "src/components/ToolUseLoader.tsx",
        "src/utils/theme.ts",
        "src/constants/figures.ts",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/components/messages/AssistantThinkingMessage.tsx",
        "src/components/messages/TaskToolMessage.tsx"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 AI 助手工具使用消息组件 - 工具调用状态的动态可视化系统🏗️ 核心功能：\n- 提供 AI 助手工具调用过程的实时状态展示\n- 支持多种工具类型的差异化渲染和交互\n- 集成工具执行状态的动画和视觉反馈\n- 实现工具参数的智能格式化显示\n- 提供完整的工具生命周期可视化管理🔄 依赖关系：\n- 上游：被消息渲染系统调用进行工具调用展示\n- 下游：依赖工具系统、状态管理、动画组件📊 使用场景：\n- AI 助手工具调用的实时状态显示\n- 工具执行进度的可视化跟踪\n- 工具参数和结果的结构化展示\n- 错误状态和异常情况的用户反馈\n- 特殊工具类型的定制化渲染🔧 技术实现：\n- 状态管理：跟踪工具的多种执行状态\n- 动态渲染：基于工具类型的差异化展示\n- 实时动画：工具执行过程的视觉动画效果\n- 智能路由：特殊工具的专用渲染逻辑\n- 参数格式化：工具输入参数的用户友好展示💡 设计原则：\n- 状态透明：清晰展示工具执行的各个阶段\n- 视觉反馈：通过动画和颜色提供直观的状态指示\n- 类型适配：不同工具类型采用最适合的显示方式\n- 用户体验：提供丰富的交互反馈和状态信息"
      },
      "functions": [
        {
          "name": "AssistantToolUseMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  param,\n  costUSD,\n  durationMs,\n  addMargin,\n  tools,\n  debug,\n  verbose,\n  erroredToolUseIDs,\n  inProgressToolUseIDs,\n  unresolvedToolUseIDs,\n  shouldAnimate,\n  shouldShowDot,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "🎨 AI 助手工具使用消息渲染组件 - 动态工具执行状态的可视化展示器负责将 AI 助手的工具调用请求进行可视化展示，提供实时的执行状态",
          "lineNumber": 138
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "tool",
        "isQueued",
        "color",
        "userFacingToolName",
        "toolMessage"
      ],
      "lineCount": 241,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\TaskProgressMessage.tsx",
      "relativePath": "src/components/messages/TaskProgressMessage.tsx",
      "name": "TaskProgressMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TaskProgressMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [],
      "comments": {},
      "functions": [
        {
          "name": "TaskProgressMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ agentType, status, toolCount }"
          ],
          "lineNumber": 11
        }
      ],
      "classes": [],
      "interfaces": [
        "Props"
      ],
      "types": [],
      "constants": [
        "theme"
      ],
      "lineCount": 33,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\TaskToolMessage.tsx",
      "relativePath": "src/components/messages/TaskToolMessage.tsx",
      "name": "TaskToolMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useEffect",
            "useState",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentLoader",
          "imports": [
            "getAgentByType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TaskToolMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/agentLoader.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantToolUseMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "TaskToolMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ agentType, children, bold = true }"
          ],
          "lineNumber": 15
        }
      ],
      "classes": [],
      "interfaces": [
        "Props"
      ],
      "types": [],
      "constants": [
        "agentConfigCache",
        "theme",
        "color"
      ],
      "lineCount": 58,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserBashInputMessage.tsx",
      "relativePath": "src/components/messages/UserBashInputMessage.tsx",
      "name": "UserBashInputMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserBashInputMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/messages.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/UserTextMessage.tsx",
        "src/utils/messages.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "UserBashInputMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  param: { text },\n  addMargin,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 12
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "input"
      ],
      "lineCount": 29,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserCommandMessage.tsx",
      "relativePath": "src/components/messages/UserCommandMessage.tsx",
      "name": "UserCommandMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserCommandMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/messages.tsx"
      ],
      "dependents": [
        "src/components/messages/UserTextMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "UserCommandMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  addMargin,\n  param: { text },\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 12
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "commandMessage",
        "args",
        "theme"
      ],
      "lineCount": 31,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserKodingInputMessage.tsx",
      "relativePath": "src/components/messages/UserKodingInputMessage.tsx",
      "name": "UserKodingInputMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserKodingInputMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/messages.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/UserTextMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "UserKodingInputMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  param: { text },\n  addMargin,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 12
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "input"
      ],
      "lineCount": 29,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserPromptMessage.tsx",
      "relativePath": "src/components/messages/UserPromptMessage.tsx",
      "name": "UserPromptMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserPromptMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/log.ts",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/messages/UserTextMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "UserPromptMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  addMargin,\n  param: { text },\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 13
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [],
      "lineCount": 36,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserTextMessage.tsx",
      "relativePath": "src/components/messages/UserTextMessage.tsx",
      "name": "UserTextMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserBashInputMessage",
          "imports": [
            "UserBashInputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserKodingInputMessage",
          "imports": [
            "UserKodingInputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserCommandMessage",
          "imports": [
            "UserCommandMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserPromptMessage",
          "imports": [
            "UserPromptMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "NO_CONTENT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserTextMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/messages/UserBashInputMessage.tsx",
        "src/components/messages/UserKodingInputMessage.tsx",
        "src/components/messages/UserCommandMessage.tsx",
        "src/components/messages/UserPromptMessage.tsx",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 用户文本消息组件 - 用户输入的智能分类和渲染系统🏗️ 核心功能：\n- 提供用户输入消息的统一分发和路由机制\n- 支持多种用户输入类型的智能识别\n- 集成专业化组件的差异化渲染\n- 实现灵活的消息格式解析和处理\n- 确保用户输入的准确展示和交互🔄 依赖关系：\n- 上游：被消息渲染系统调用进行用户输入展示\n- 下游：依赖各类专用用户消息组件📊 使用场景：\n- 用户文本输入的分类识别和渲染\n- Koding 代码输入的特殊格式处理\n- Bash 命令输入的语法高亮显示\n- 斜杠命令的结构化展示\n- 标准用户提示的格式化显示🔧 技术实现：\n- 模式匹配：基于文本内容的输入类型识别\n- 组件路由：将不同输入类型分发到专用组件\n- 内容过滤：跳过空消息和无内容消息\n- 统一接口：为所有子组件提供一致的属性传递💡 设计原则：\n- 智能分发：精准识别不同类型的用户输入\n- 专业渲染：每种输入类型都有最适合的显示方式\n- 扩展灵活：支持新的用户输入类型的轻松添加\n- 用户体验：确保用户输入的清晰可读和直观展示"
      },
      "functions": [
        {
          "name": "UserTextMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ addMargin, param }"
          ],
          "returnType": "React.ReactNode",
          "description": "🎨 用户文本消息路由组件 - 智能用户输入分类和渲染分发器作为用户输入消息的智能路由器，负责识别不同类型的用户输入",
          "lineNumber": 100
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [],
      "lineCount": 126,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolCanceledMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
      "name": "UserToolCanceledMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolCanceledMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "UserToolCanceledMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.ReactNode",
          "lineNumber": 5
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 13,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolErrorMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
      "name": "UserToolErrorMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolResultBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolErrorMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "UserToolErrorMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  param,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 13
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "MAX_RENDERED_LINES",
        "error"
      ],
      "lineCount": 37,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolRejectMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
      "name": "UserToolRejectMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "useGetToolFromMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolRejectMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/query.ts",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "UserToolRejectMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  toolUseID,\n  tools,\n  messages,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 15
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "input"
      ],
      "lineCount": 32,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolResultMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
      "name": "UserToolResultMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolResultBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../query",
          "imports": [
            "Message",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/messages",
          "imports": [
            "CANCEL_MESSAGE",
            "REJECT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserToolCanceledMessage",
          "imports": [
            "UserToolCanceledMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserToolErrorMessage",
          "imports": [
            "UserToolErrorMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserToolRejectMessage",
          "imports": [
            "UserToolRejectMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserToolSuccessMessage",
          "imports": [
            "UserToolSuccessMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolResultMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/query.ts",
        "src/utils/messages.tsx",
        "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 用户工具结果消息组件 - 工具执行结果的智能分类展示系统🏗️ 核心功能：\n- 提供工具执行结果的统一分发和展示机制\n- 支持多种工具结果状态的差异化渲染\n- 集成用户交互结果的可视化反馈\n- 实现工具执行生命周期的完整展示\n- 确保各种结果类型的准确识别和处理🔄 依赖关系：\n- 上游：被消息渲染系统调用进行工具结果展示\n- 下游：依赖各类专用工具结果消息组件📊 使用场景：\n- 工具执行成功结果的详细展示\n- 工具执行错误信息的用户友好显示\n- 用户取消工具操作的状态反馈\n- 用户拒绝工具权限的交互处理\n- 工具结果数据的格式化和可视化🔧 技术实现：\n- 状态识别：基于结果参数的智能状态判断\n- 组件路由：将不同结果类型分发到专用组件\n- 上下文传递：为子组件提供完整的上下文信息\n- 统一接口：确保所有结果组件的一致性💡 设计原则：\n- 状态明确：清晰区分不同的工具执行结果状态\n- 用户友好：为每种结果提供最适合的展示方式\n- 扩展灵活：支持新的工具结果类型的轻松添加\n- 上下文完整：确保结果展示具备必要的上下文信息"
      },
      "functions": [
        {
          "name": "UserToolResultMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  param,\n  message,\n  messages,\n  tools,\n  verbose,\n  width,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "🎨 用户工具结果消息路由组件 - 智能工具结果分类和渲染分发器作为工具执行结果的智能路由器，负责识别不同类型的工具执行结果",
          "lineNumber": 117
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [],
      "lineCount": 155,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolSuccessMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx",
      "name": "UserToolSuccessMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolResultBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../query",
          "imports": [
            "Message",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "useGetToolFromMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolSuccessMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/query.ts",
        "src/components/messages/UserToolResultMessage/utils.tsx"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "UserToolSuccessMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  param,\n  message,\n  messages,\n  tools,\n  verbose,\n  width,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 17
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [],
      "lineCount": 36,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\utils.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/utils.tsx",
      "name": "utils.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useGetToolFromMessages",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/Tool.ts",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getToolUseFromMessages",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "toolUseID: string",
            "messages: Message[]"
          ],
          "returnType": "ToolUseBlockParam | null",
          "lineNumber": 8
        },
        {
          "name": "useGetToolFromMessages",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "toolUseID: string",
            "tools: Tool[]",
            "messages: Message[]"
          ],
          "lineNumber": 29
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "toolUse",
        "tool"
      ],
      "lineCount": 56,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MessageSelector.tsx",
      "relativePath": "src/components/MessageSelector.tsx",
      "name": "MessageSelector.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo",
            "useState",
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Message",
          "imports": [
            "MessageComponent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages.js",
          "imports": [
            "createUserMessage",
            "isEmptyMessageText",
            "isNotEmptyMessage",
            "normalizeMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MessageSelector",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/Message.tsx",
        "src/Tool.ts",
        "src/query.ts",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "MessageSelector",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  erroredToolUseIDs,\n  messages,\n  onSelect,\n  onEscape,\n  tools,\n  unresolvedToolUseIDs,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 29
        },
        {
          "name": "handleSelect",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "message: UserMessage"
          ],
          "lineNumber": 41
        },
        {
          "name": "handleEscape",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 46
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "MAX_VISIBLE_MESSAGES",
        "currentUUID",
        "indexFromEnd",
        "allItems",
        "exitState",
        "num",
        "firstVisibleIndex",
        "normalizedMessages",
        "actualIndex",
        "isSelected",
        "isCurrent"
      ],
      "lineCount": 202,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModeIndicator.tsx",
      "relativePath": "src/components/ModeIndicator.tsx",
      "name": "ModeIndicator.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context/PermissionContext",
          "imports": [
            "usePermissionContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModeIndicator",
          "type": "named"
        },
        {
          "name": "CompactModeIndicator",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/context/PermissionContext.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ModeIndicator",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  showTransitionCount = false,\n}"
          ],
          "lineNumber": 10
        },
        {
          "name": "getThemeColor",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "colorName: string",
            "theme: any"
          ],
          "returnType": "string",
          "lineNumber": 62
        },
        {
          "name": "CompactModeIndicator",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "description": "Compact mode indicator for status bar",
          "lineNumber": 74
        }
      ],
      "classes": [],
      "interfaces": [
        "ModeIndicatorProps"
      ],
      "types": [],
      "constants": [
        "theme",
        "modeConfig",
        "colorMap",
        "modeConfig",
        "theme"
      ],
      "lineCount": 89,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModelConfig.tsx",
      "relativePath": "src/components/ModelConfig.tsx",
      "name": "ModelConfig.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState",
            "useCallback",
            "useEffect",
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "ModelPointerType",
            "setModelPointer"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ModelSelector",
          "imports": [
            "ModelSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ModelListManager",
          "imports": [
            "ModelListManager"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelConfig",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/model.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/components/ModelSelector.tsx",
        "src/components/ModelListManager.tsx"
      ],
      "dependents": [
        "src/commands/model.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ModelConfig",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onClose }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 31
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props",
        "ModelPointerSetting"
      ],
      "constants": [
        "config",
        "theme",
        "selectedIndexRef",
        "exitState",
        "modelManager",
        "availableModels",
        "profiles",
        "menuItems",
        "modelSettings",
        "handleModelPointerChange",
        "handleManageModels",
        "handleModelConfigurationComplete",
        "manageIndex",
        "handleInput",
        "setting",
        "currentIndex",
        "nextIndex",
        "nextOption",
        "isSelected",
        "currentModel"
      ],
      "lineCount": 302,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModelListManager.tsx",
      "relativePath": "src/components/ModelListManager.tsx",
      "name": "ModelListManager.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getGlobalConfig",
            "ModelPointerType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ModelSelector",
          "imports": [
            "ModelSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelListManager",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/model.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/components/ModelSelector.tsx"
      ],
      "dependents": [
        "src/components/ModelConfig.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ModelListManager",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onClose }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 15
        },
        {
          "name": "getModelUsage",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "modelName: string"
          ],
          "returnType": "ModelPointerType[]",
          "description": "Check which pointers are using this model",
          "lineNumber": 50
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "config",
        "theme",
        "exitState",
        "modelManager",
        "availableModels",
        "menuItems",
        "modelItems",
        "usage",
        "pointers",
        "handleDeleteModel",
        "handleAddNewModel",
        "handleModelConfigurationComplete",
        "handleInput",
        "item",
        "isSelected"
      ],
      "lineCount": 228,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModelSelector.tsx",
      "relativePath": "src/components/ModelSelector.tsx",
      "name": "ModelSelector.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useState",
            "useEffect",
            "useCallback",
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Newline"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "ProviderType",
            "ModelPointerType",
            "setAllPointersToModel",
            "setModelPointer"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/models",
          "imports": [
            "default",
            "providers"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TextInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "openai",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "fetchAnthropicModels",
            "verifyApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/openai",
          "imports": [
            "fetchCustomModels",
            "getModelFeatures"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/gpt5ConnectionTest",
          "imports": [
            "testGPT5Connection",
            "validateGPT5Config"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelSelector",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/utils/model.ts",
        "src/constants/product.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/constants/models.ts",
        "src/components/TextInput.tsx",
        "src/services/claude.ts",
        "src/services/openai.ts",
        "src/services/gpt5ConnectionTest.ts"
      ],
      "dependents": [
        "src/components/ModelConfig.tsx",
        "src/components/ModelListManager.tsx",
        "src/components/Onboarding.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 模型选择器组件 - AI模型配置和管理的交互式向导界面模型配置架构：\n┌─────────────────────────────────────────────────────────────────┐\n│                    模型选择器配置流程                            │\n├─────────────────────────────────────────────────────────────────┤\n│ 提供商选择 → API配置 → 模型选择 → 参数设置 → 连接测试 → 确认保存 │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 🤖 多提供商支持：Anthropic、OpenAI、Azure、Ollama等主流AI服务\n2. 🔧 参数配置：最大token、上下文长度、推理努力等模型参数\n3. 🔍 模型搜索：动态加载和搜索可用模型列表\n4. ✅ 连接测试：验证API密钥和模型配置的有效性\n5. 🎯 指针管理：支持主模型、任务模型、推理模型等不同角色配置\n6. 📋 向导流程：逐步引导用户完成复杂的模型配置"
      },
      "functions": [
        {
          "name": "ScreenContainer",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{\n  title,\n  exitState,\n  children,\n}"
          ],
          "description": "🖼️ 屏幕容器组件 - 为配置向导提供统一的界面容器提供一致的界面布局：",
          "lineNumber": 38
        },
        {
          "name": "useEscapeNavigation",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "onEscape: () => void",
            "abortController: AbortController"
          ],
          "description": "Custom hook to handle Escape key navigation",
          "lineNumber": 184
        },
        {
          "name": "printModelConfig",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 206
        },
        {
          "name": "ModelSelector",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  onDone: onDoneProp,\n  abortController,\n  targetPointer,\n  isOnboarding = false,\n  onCancel,\n  skipModelType = false,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "🎯 模型选择器主组件 - AI模型配置向导的核心实现组件特性：",
          "lineNumber": 243
        },
        {
          "name": "getModelDetails",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "model: ModelInfo"
          ],
          "returnType": "string",
          "lineNumber": 519
        },
        {
          "name": "formatNumber",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "num: number"
          ],
          "returnType": "string",
          "lineNumber": 537
        },
        {
          "name": "getProviderLabel",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "provider: string",
            "modelCount: number"
          ],
          "returnType": "string",
          "lineNumber": 546
        },
        {
          "name": "handleProviderSelection",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "provider: string"
          ],
          "lineNumber": 554
        },
        {
          "name": "fetchAnthropicModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "baseURL: string",
            "apiKey: string"
          ],
          "description": "Local implementation of fetchAnthropicModels for UI",
          "lineNumber": 575
        },
        {
          "name": "fetchAnthropicCompatibleModelsWithFallback",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "baseURL: string",
            "provider: string",
            "apiKeyUrl: string"
          ],
          "description": "通用的Anthropic兼容模型获取函数，实现三层降级策略",
          "lineNumber": 650
        },
        {
          "name": "fetchAnthropicCompatibleProviderModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "description": "统一处理所有Anthropic兼容提供商的模型获取",
          "lineNumber": 716
        },
        {
          "name": "fetchKimiModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "description": "Remove duplicate function definitions - using unified fetchAnthropicCompatibleProviderModels instead",
          "lineNumber": 762
        },
        {
          "name": "fetchDeepSeekModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 801
        },
        {
          "name": "fetchSiliconFlowModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 840
        },
        {
          "name": "fetchQwenModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 879
        },
        {
          "name": "fetchGLMModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 918
        },
        {
          "name": "fetchMinimaxModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 956
        },
        {
          "name": "fetchBaiduQianfanModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 994
        },
        {
          "name": "fetchCustomOpenAIModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 1032
        },
        {
          "name": "fetchGeminiModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 1073
        },
        {
          "name": "fetchOllamaModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 1111
        },
        {
          "name": "fetchModelsWithRetry",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 1185
        },
        {
          "name": "fetchModels",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 1256
        },
        {
          "name": "handleApiKeySubmit",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "key: string"
          ],
          "lineNumber": 1392
        },
        {
          "name": "handleResourceNameSubmit",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "name: string"
          ],
          "lineNumber": 1409
        },
        {
          "name": "handleOllamaBaseUrlSubmit",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "url: string"
          ],
          "lineNumber": 1414
        },
        {
          "name": "handleCustomBaseUrlSubmit",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "url: string"
          ],
          "lineNumber": 1425
        },
        {
          "name": "handleProviderBaseUrlSubmit",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "url: string"
          ],
          "lineNumber": 1433
        },
        {
          "name": "handleAnthropicProviderSelection",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "providerType: 'official' | 'bigdream' | 'custom'"
          ],
          "lineNumber": 1454
        },
        {
          "name": "handleCustomModelSubmit",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "model: string"
          ],
          "lineNumber": 1475
        },
        {
          "name": "handleModelSelection",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "model: string"
          ],
          "lineNumber": 1495
        },
        {
          "name": "testConnection",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<{\n    success: boolean\n    message: string\n    endpoint?: string\n    details?: string\n  }>",
          "lineNumber": 1547
        },
        {
          "name": "testChatEndpoint",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "baseURL: string",
            "endpointPath: string",
            "endpointName: string"
          ],
          "returnType": "Promise<{\n    success: boolean\n    message: string\n    endpoint?: string\n    details?: string\n  }>",
          "lineNumber": 1682
        },
        {
          "name": "testResponsesEndpoint",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "baseURL: string",
            "endpointPath: string",
            "endpointName: string"
          ],
          "returnType": "Promise<{\n    success: boolean\n    message: string\n    endpoint?: string\n    details?: string\n  }>",
          "lineNumber": 1807
        },
        {
          "name": "testProviderSpecificEndpoint",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "baseURL: string"
          ],
          "returnType": "Promise<{\n    success: boolean\n    message: string\n    endpoint?: string\n    details?: string\n  }>",
          "lineNumber": 1924
        },
        {
          "name": "handleConnectionTest",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 1987
        },
        {
          "name": "saveConfiguration",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "provider: ProviderType",
            "model: string"
          ],
          "returnType": "Promise<string | null>",
          "lineNumber": 2005
        },
        {
          "name": "handleConfirmation",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 2065
        },
        {
          "name": "handleCursorOffsetChange",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "offset: number"
          ],
          "description": "Handle cursor offset changes",
          "lineNumber": 2110
        },
        {
          "name": "handleApiKeyChange",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "value: string"
          ],
          "description": "Handle API key changes",
          "lineNumber": 2115
        },
        {
          "name": "handleModelSearchChange",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "value: string"
          ],
          "description": "Handle model search query changes",
          "lineNumber": 2121
        },
        {
          "name": "handleModelSearchCursorOffsetChange",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "offset: number"
          ],
          "description": "Handle model search cursor offset changes",
          "lineNumber": 2128
        },
        {
          "name": "getFormFieldsForModelParams",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "description": "Helper function to get form fields for model params",
          "lineNumber": 2301
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props",
        "ModelInfo",
        "ReasoningEffortOption",
        "ContextLengthOption",
        "MaxTokensOption"
      ],
      "constants": [
        "theme",
        "CONTEXT_LENGTH_OPTIONS",
        "DEFAULT_CONTEXT_LENGTH",
        "MAX_TOKENS_OPTIONS",
        "DEFAULT_MAX_TOKENS",
        "handledRef",
        "config",
        "modelProfiles",
        "activeProfiles",
        "profileSummary",
        "config",
        "theme",
        "onDone",
        "exitState",
        "getInitialScreen",
        "currentScreen",
        "navigateTo",
        "goBack",
        "reasoningEffortOptions",
        "availableProviders",
        "providerOptions",
        "modelCount",
        "label",
        "ourModelNames",
        "filteredModels",
        "sortModelsByPriority",
        "priorityKeywords",
        "aModelLower",
        "bModelLower",
        "aHasPriority",
        "bHasPriority",
        "sortedFilteredModels",
        "modelOptions",
        "isInOurModels",
        "details",
        "providerType",
        "defaultBaseUrl",
        "response",
        "data",
        "models",
        "models",
        "baseURL",
        "baseURL",
        "models",
        "kimiModels",
        "baseURL",
        "models",
        "deepseekModels",
        "baseURL",
        "models",
        "siliconflowModels",
        "baseURL",
        "models",
        "qwenModels",
        "baseURL",
        "models",
        "glmModels",
        "baseURL",
        "models",
        "minimaxModels",
        "baseURL",
        "models",
        "baiduModels",
        "models",
        "customModels",
        "response",
        "errorData",
        "geminiModels",
        "response",
        "responseData",
        "ollamaModels",
        "validModels",
        "errorMessage",
        "MAX_RETRIES",
        "models",
        "errorMessage",
        "supportsManualInput",
        "anthropicModels",
        "customModels",
        "geminiModels",
        "kimiModels",
        "deepseekModels",
        "siliconflowModels",
        "qwenModels",
        "glmModels",
        "baiduModels",
        "openai",
        "response",
        "fetchedModels",
        "modelName",
        "modelInfo",
        "cleanUrl",
        "cleanUrl",
        "defaultUrls",
        "modelInfo",
        "modelMaxTokens",
        "matchingPreset",
        "handleModelParamsSubmit",
        "isOpenAICompatible",
        "isGPT5",
        "configValidation",
        "gpt5Result",
        "endpointsToTry",
        "testResult",
        "testURL",
        "testPayload",
        "headers",
        "response",
        "data",
        "containsYes",
        "errorData",
        "errorMessage",
        "testURL",
        "testPayload",
        "headers",
        "response",
        "data",
        "containsYes",
        "errorData",
        "errorMessage",
        "isValid",
        "result",
        "handleContextLengthSubmit",
        "modelManager",
        "modelConfig",
        "modelId",
        "handleBack",
        "currentIndex",
        "newIndex",
        "currentIndex",
        "newIndex",
        "formFields",
        "formFields",
        "currentField",
        "modelTypeText",
        "modelTypeText",
        "formFields",
        "numValue",
        "isCustomOpenAI",
        "providerName",
        "defaultUrl",
        "modelTypeText",
        "selectedOption",
        "isSelected",
        "providerDisplayName",
        "providerDisplayName",
        "showsApiKey",
        "anthropicOptions"
      ],
      "lineCount": 3488,
      "complexity": "high"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModelStatusDisplay.tsx",
      "relativePath": "src/components/ModelStatusDisplay.tsx",
      "name": "ModelStatusDisplay.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text",
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelStatusDisplay",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/model.ts",
        "src/utils/config.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/commands/modelstatus.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ModelStatusDisplay",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onClose }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 12
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "theme",
        "exitState",
        "modelManager",
        "config",
        "pointers",
        "model",
        "availableModels",
        "isInUse"
      ],
      "lineCount": 231,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Onboarding.tsx",
      "relativePath": "src/components/Onboarding.tsx",
      "name": "Onboarding.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Newline",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "DEFAULT_GLOBAL_CONFIG",
            "ProviderType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "OrderedList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Logo",
          "imports": [
            "MIN_LOGO_WIDTH"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme",
            "ThemeNames"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PressEnterToContinue",
          "imports": [
            "PressEnterToContinue"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ModelSelector",
          "imports": [
            "ModelSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Onboarding",
          "type": "named"
        },
        {
          "name": "WelcomeBox",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/product.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/components/Logo.tsx",
        "src/components/CustomSelect/select.tsx",
        "src/components/StructuredDiff.tsx",
        "src/utils/theme.ts",
        "src/utils/terminal.ts",
        "src/components/PressEnterToContinue.tsx",
        "src/components/ModelSelector.tsx"
      ],
      "dependents": [
        "src/commands/onboarding.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Onboarding",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onDone }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 30
        },
        {
          "name": "goToNextStep",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 39
        },
        {
          "name": "handleThemeSelection",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "newTheme: string"
          ],
          "lineNumber": 46
        },
        {
          "name": "handleThemePreview",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "newTheme: string"
          ],
          "lineNumber": 54
        },
        {
          "name": "handleProviderSelectionDone",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 58
        },
        {
          "name": "handleModelSelectionDone",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 63
        },
        {
          "name": "WelcomeBox",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.ReactNode",
          "lineNumber": 259
        }
      ],
      "classes": [],
      "interfaces": [
        "OnboardingStep"
      ],
      "types": [
        "StepId",
        "Props"
      ],
      "constants": [
        "config",
        "theme",
        "nextIndex",
        "exitState",
        "currentStep",
        "themeStep",
        "providersStep",
        "usageStep",
        "modelStep",
        "steps",
        "theme"
      ],
      "lineCount": 275,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\BashPermissionRequest\\BashPermissionRequest.tsx",
      "relativePath": "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
      "name": "BashPermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/BashPermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/usePermissionRequestLogging",
          "imports": [
            "UnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../permissions",
          "imports": [
            "savePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks",
          "imports": [
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequestTitle",
          "imports": [
            "PermissionRequestTitle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils",
          "imports": [
            "logUnaryPermissionEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../toolUseOptions",
          "imports": [
            "toolUseOptions"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "BashPermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/usePermissionRequestLogging.ts",
        "src/permissions.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/theme.ts",
        "src/components/permissions/hooks.ts",
        "src/components/permissions/PermissionRequestTitle.tsx",
        "src/components/permissions/utils.ts",
        "src/components/CustomSelect/select.tsx",
        "src/components/permissions/toolUseOptions.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 Bash命令权限请求组件 - Shell命令执行的专用权限确认界面命令权限管理架构：\n┌─────────────────────────────────────────────────────────────────┐\n│                  Bash命令权限管理流程                           │\n├─────────────────────────────────────────────────────────────────┤\n│ 命令解析 → 风险评估 → 用户选择 → 权限保存 → 命令执行           │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 🔍 命令解析：从输入参数中安全提取Shell命令\n2. ⚠️ 风险展示：显示命令的风险等级和安全警告\n3. 🎯 智能选项：根据命令类型提供合适的权限选择\n4. 💾 权限持久化：支持前缀级和完整命令级的权限记忆\n5. 📊 事件记录：详细记录用户的权限决策和命令执行统计"
      },
      "functions": [
        {
          "name": "BashPermissionRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  toolUseConfirm,\n  onDone,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "🎯 Bash命令权限请求组件 - 为Shell命令执行提供专用的权限确认界面组件特性：",
          "lineNumber": 63
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "theme",
        "unaryEvent",
        "prefix"
      ],
      "lineCount": 166,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FallbackPermissionRequest.tsx",
      "relativePath": "src/components/permissions/FallbackPermissionRequest.tsx",
      "name": "FallbackPermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PermissionRequestTitle.js",
          "imports": [
            "PermissionRequestTitle",
            "textColorForRiskScore"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../permissions",
          "imports": [
            "savePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/usePermissionRequestLogging.js",
          "imports": [
            "UnaryEvent",
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FallbackPermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/utils/theme.ts",
        "src/utils/unaryLogging.ts",
        "src/utils/env.ts",
        "src/utils/state.ts",
        "src/permissions.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx"
      ],
      "comments": {
        "fileHeader": "🛡️ 通用权限请求组件 - 不支持专用权限界面的工具的默认权限请求处理器架构设计：\n┌─────────────────────────────────────────────────────────────────┐\n│               通用权限请求组件工作流程                              │\n├─────────────────────────────────────────────────────────────────┤\n│ 工具信息解析 → 风险评估显示 → 用户选择界面 → 权限执行 → 日志记录   │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 🎯 通用工具支持：为所有工具提供基础权限请求界面\n2. 🔍 MCP工具识别：特殊处理MCP（Model Context Protocol）工具\n3. ⚠️ 风险可视化：显示操作风险等级和相应的视觉提示\n4. 💾 权限记忆：支持\"不再询问\"的权限持久化机制\n5. 📊 使用统计：集成使用情况分析和事件日志记录"
      },
      "functions": [
        {
          "name": "FallbackPermissionRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  toolUseConfirm,\n  onDone,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "🛡️ 通用权限请求组件 - 为所有工具提供标准化的权限确认界面组件职责：",
          "lineNumber": 66
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "theme",
        "originalUserFacingName",
        "userFacingName",
        "unaryEvent"
      ],
      "lineCount": 194,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FileEditPermissionRequest\\FileEditPermissionRequest.tsx",
      "relativePath": "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
      "name": "FileEditPermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FileEditPermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "../../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "basename",
            "extname"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/usePermissionRequestLogging.js",
          "imports": [
            "UnaryEvent",
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../permissions",
          "imports": [
            "savePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequestTitle.js",
          "imports": [
            "PermissionRequestTitle",
            "textColorForRiskScore"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FileEditToolDiff",
          "imports": [
            "FileEditToolDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/permissions/filesystem",
          "imports": [
            "pathInOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "highlight.js",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileEditPermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/permissions.ts",
        "src/utils/env.ts",
        "src/utils/theme.ts",
        "src/utils/unaryLogging.ts",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/hooks/useTerminalSize.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 文件编辑权限请求组件 - 文件编辑操作的专用权限确认界面文件编辑权限架构：\n┌─────────────────────────────────────────────────────────────────┐\n│                  文件编辑权限管理流程                           │\n├─────────────────────────────────────────────────────────────────┤\n│ 文件路径解析 → 差异预览 → 安全检查 → 用户确认 → 权限执行       │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 📝 差异预览：显示文件编辑的具体变更内容\n2. 🔒 路径安全：只允许原始工作目录下的文件编辑\n3. 🎯 智能权限：根据文件位置提供合适的权限选项\n4. 📊 语言检测：基于文件扩展名进行编程语言识别\n5. 📈 使用统计：详细记录文件编辑的权限决策"
      },
      "functions": [
        {
          "name": "getOptions",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "path: string"
          ],
          "lineNumber": 44
        },
        {
          "name": "FileEditPermissionRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  toolUseConfirm,\n  onDone,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 74
        },
        {
          "name": "extractLanguageName",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "file_path: string"
          ],
          "returnType": "Promise<string>",
          "lineNumber": 191
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "showDontAskAgainOptions",
        "unaryEvent",
        "ext",
        "Highlight"
      ],
      "lineCount": 201,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FileEditPermissionRequest\\FileEditToolDiff.tsx",
      "relativePath": "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
      "name": "FileEditToolDiff.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FileEditPermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "relative"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileEditToolDiff",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/StructuredDiff.tsx",
        "src/utils/theme.ts",
        "src/utils/array.ts",
        "src/utils/state.ts",
        "src/utils/diff.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "FileEditToolDiff",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  file_path,\n  new_string,\n  old_string,\n  verbose,\n  useBorder = true,\n  width,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 21
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "file",
        "patch"
      ],
      "lineCount": 78,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FilesystemPermissionRequest\\FilesystemPermissionRequest.tsx",
      "relativePath": "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
      "name": "FilesystemPermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FilesystemPermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequestTitle.js",
          "imports": [
            "PermissionRequestTitle",
            "textColorForRiskScore"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequest.js",
          "imports": [
            "PermissionRequestProps",
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/usePermissionRequestLogging.js",
          "imports": [
            "UnaryEvent",
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/NotebookReadTool/NotebookReadTool",
          "imports": [
            "NotebookReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FallbackPermissionRequest",
          "imports": [
            "FallbackPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/permissions/filesystem.js",
          "imports": [
            "grantWritePermissionForOriginalDir",
            "pathInOriginalCwd",
            "toAbsolutePath"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FilesystemPermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/utils/theme.ts",
        "src/utils/unaryLogging.ts",
        "src/utils/env.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 文件系统权限请求组件 - 文件操作工具的统一权限管理界面文件系统权限架构：\n┌─────────────────────────────────────────────────────────────────┐\n│                文件系统权限管理架构                              │\n├─────────────────────────────────────────────────────────────────┤\n│ 工具识别 → 路径提取 → 权限检查 → 用户确认 → 权限授予           │\n└─────────────────────────────────────────────────────────────────┘支持的工具类型：\n1. 📝 文件操作：FileEditTool, FileWriteTool, FileReadTool\n2. 🔍 搜索工具：GrepTool, GlobTool, LSTool\n3. 📓 笔记本：NotebookEditTool, NotebookReadTool\n4. 🛡️ 路径安全：绝对路径转换和权限边界检查\n5. 📊 操作追踪：统一的文件系统操作日志记录"
      },
      "functions": [
        {
          "name": "pathArgNameForToolUse",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "toolUseConfirm: ToolUseConfirm"
          ],
          "returnType": "string | null",
          "description": "🔍 工具路径参数名映射器 - 根据工具类型获取对应的路径参数名参数映射策略：",
          "lineNumber": 66
        },
        {
          "name": "isMultiFile",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "toolUseConfirm: ToolUseConfirm"
          ],
          "returnType": "boolean",
          "lineNumber": 86
        },
        {
          "name": "pathFromToolUse",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "toolUseConfirm: ToolUseConfirm"
          ],
          "returnType": "string | null",
          "lineNumber": 97
        },
        {
          "name": "FilesystemPermissionRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  toolUseConfirm,\n  onDone,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 110
        },
        {
          "name": "getDontAskAgainOptions",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "toolUseConfirm: ToolUseConfirm",
            "path: string"
          ],
          "lineNumber": 136
        },
        {
          "name": "FilesystemPermissionRequestImpl",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{\n  toolUseConfirm,\n  path,\n  onDone,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 160
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "pathArgName",
        "input",
        "path",
        "userFacingName",
        "userFacingReadOrWrite",
        "title",
        "unaryEvent"
      ],
      "lineCount": 271,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FileWritePermissionRequest\\FileWritePermissionRequest.tsx",
      "relativePath": "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
      "name": "FileWritePermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FileWritePermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "basename",
            "extname"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequestTitle.js",
          "imports": [
            "PermissionRequestTitle",
            "textColorForRiskScore"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../permissions",
          "imports": [
            "savePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/usePermissionRequestLogging.js",
          "imports": [
            "UnaryEvent",
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FileWriteToolDiff",
          "imports": [
            "FileWriteToolDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "highlight.js",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileWritePermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/utils/theme.ts",
        "src/utils/unaryLogging.ts",
        "src/utils/env.ts",
        "src/permissions.ts",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 文件写入权限请求组件 - 文件创建和写入操作的专用权限确认界面核心功能：\n1. 📝 文件预览：显示即将写入的文件内容\n2. 🔍 路径检查：验证文件路径和目录权限\n3. 🚨 覆盖警告：对现有文件的覆盖操作进行特别提醒\n4. 📊 语言识别：基于文件扩展名进行编程语言检测\n5. 💾 权限记忆：支持目录级别的写入权限持久化"
      },
      "functions": [
        {
          "name": "FileWritePermissionRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  toolUseConfirm,\n  onDone,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 43
        },
        {
          "name": "extractLanguageName",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "file_path: string"
          ],
          "returnType": "Promise<string>",
          "lineNumber": 166
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "fileExists",
        "unaryEvent",
        "ext",
        "Highlight"
      ],
      "lineCount": 176,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FileWritePermissionRequest\\FileWriteToolDiff.tsx",
      "relativePath": "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
      "name": "FileWriteToolDiff.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FileWritePermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "extname",
            "relative"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/file",
          "imports": [
            "detectFileEncoding"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileWriteToolDiff",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/StructuredDiff.tsx",
        "src/utils/theme.ts",
        "src/utils/array.ts",
        "src/utils/state.ts",
        "src/utils/file.ts",
        "src/components/HighlightedCode.tsx",
        "src/utils/diff.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "FileWriteToolDiff",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  file_path,\n  content,\n  verbose,\n  width,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 21
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "fileExists",
        "oldContent",
        "enc",
        "hunks"
      ],
      "lineCount": 84,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\hooks.ts",
      "relativePath": "src/components/permissions/hooks.ts",
      "name": "hooks.ts",
      "extension": ".ts",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent",
            "CompletionType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/permissions/PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "usePermissionRequestLogging",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/unaryLogging.ts",
        "src/components/permissions/PermissionRequest.tsx",
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 权限请求钩子函数 - 权限系统的React钩子和事件处理逻辑核心功能：\n1. 📊 自动化日志记录：使用React hooks自动追踪权限请求生命周期\n2. 🔄 异步语言处理：支持同步和异步的语言名称解析\n3. 📈 统计事件集成：与统计分析系统无缝集成\n4. 🎭 声明式设计：通过hooks提供简洁的权限日志记录接口"
      },
      "functions": [
        {
          "name": "usePermissionRequestLogging",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "toolUseConfirm: ToolUseConfirm",
            "unaryEvent: UnaryEventType"
          ],
          "returnType": "void",
          "description": "📊 权限请求日志记录钩子 - 自动化权限事件的统计和追踪功能特性：",
          "lineNumber": 47
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "UnaryEventType"
      ],
      "constants": [
        "languagePromise"
      ],
      "lineCount": 69,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\PermissionRequest.tsx",
      "relativePath": "src/components/permissions/PermissionRequest.tsx",
      "name": "PermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FileEditPermissionRequest/FileEditPermissionRequest",
          "imports": [
            "FileEditPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./BashPermissionRequest/BashPermissionRequest",
          "imports": [
            "BashPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FallbackPermissionRequest",
          "imports": [
            "FallbackPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/useNotifyAfterTimeout",
          "imports": [
            "useNotifyAfterTimeout"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FileWritePermissionRequest/FileWritePermissionRequest",
          "imports": [
            "FileWritePermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/commands",
          "imports": [
            "CommandSubcommandPrefixResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FilesystemPermissionRequest/FilesystemPermissionRequest",
          "imports": [
            "FilesystemPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/NotebookReadTool/NotebookReadTool",
          "imports": [
            "NotebookReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "toolUseConfirmGetPrefix",
          "type": "named"
        },
        {
          "name": "PermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/query.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/hooks/useNotifyAfterTimeout.ts",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/utils/commands.ts",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/permissions/hooks.ts",
        "src/components/permissions/utils.ts",
        "src/hooks/useCancelRequest.ts",
        "src/hooks/useCanUseTool.ts",
        "src/hooks/usePermissionRequestLogging.ts"
      ],
      "comments": {
        "fileHeader": "🛡️ 权限请求管理系统 - 工具使用权限的统一管理和用户交互界面架构图：\n┌─────────────────────────────────────────────────────────────────┐\n│                    权限请求管理系统架构                              │\n├─────────────────────────────────────────────────────────────────┤\n│ 工具识别 → 组件选择 → 权限界面 → 用户决策 → 权限执行              │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 🎯 工具类型识别：根据工具类型自动选择对应的权限请求组件\n2. 🔒 权限验证：统一的权限检查和用户确认流程\n3. 🎨 界面分发：为不同工具提供定制化的权限请求界面\n4. ⚠️ 风险评估：集成风险评分系统，提供安全警告\n5. 💾 权限记忆：支持临时和永久权限授权机制"
      },
      "functions": [
        {
          "name": "permissionComponentForTool",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "tool: Tool"
          ],
          "description": "🎯 工具权限组件映射器 - 根据工具类型选择对应的权限请求组件映射策略：",
          "lineNumber": 53
        },
        {
          "name": "toolUseConfirmGetPrefix",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "toolUseConfirm: ToolUseConfirm"
          ],
          "returnType": "string | null",
          "description": "🔍 命令前缀提取器 - 从工具使用确认信息中提取安全的命令前缀安全检查：",
          "lineNumber": 96
        },
        {
          "name": "PermissionRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  toolUseConfirm,\n  onDone,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "🛡️ 权限请求主组件 - 统一的工具权限请求入口点工作流程：",
          "lineNumber": 152
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "PermissionRequestProps",
        "ToolUseConfirm"
      ],
      "constants": [
        "toolName",
        "PermissionComponent"
      ],
      "lineCount": 182,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\PermissionRequestTitle.tsx",
      "relativePath": "src/components/permissions/PermissionRequestTitle.tsx",
      "name": "PermissionRequestTitle.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "categoryForRiskScore",
          "type": "named"
        },
        {
          "name": "textColorForRiskScore",
          "type": "named"
        },
        {
          "name": "PermissionRiskScore",
          "type": "named"
        },
        {
          "name": "PermissionRequestTitle",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 权限请求标题组件 - 权限界面的标题和风险评估可视化系统风险评估体系：\n┌─────────────────────────────────────────────────────────────────┐\n│                     风险等级评估体系                              │\n├─────────────────────────────────────────────────────────────────┤\n│ 🟢 低风险 (0-29)    │ 🟡 中等风险 (30-69) │ 🔴 高风险 (70-100) │\n│ 绿色主题色彩        │ 黄色警告色彩         │ 红色错误色彩       │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 🎨 风险可视化：根据风险分数显示对应的颜色主题\n2. 📊 等级分类：将数值风险转换为人类可读的风险等级\n3. 🎭 视觉一致性：提供统一的标题样式和风险指示器\n4. 🔍 智能显示：只在有风险评分时显示风险信息"
      },
      "functions": [
        {
          "name": "categoryForRiskScore",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "riskScore: number"
          ],
          "returnType": "RiskScoreCategory",
          "description": "📊 风险分数分类器 - 将数值风险评分转换为语义化的等级分级标准：",
          "lineNumber": 37
        },
        {
          "name": "colorSchemeForRiskScoreCategory",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "category: RiskScoreCategory"
          ],
          "returnType": "{\n  highlightColor: string\n  textColor: string\n}",
          "description": "🎨 风险等级配色方案 - 为不同风险等级提供视觉主题配色@param category - 风险等级类别",
          "lineNumber": 47
        },
        {
          "name": "textColorForRiskScore",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "riskScore: number | null"
          ],
          "returnType": "string",
          "description": "🌈 风险分数文本颜色提取器 - 根据风险评分获取对应的文本颜色@param riskScore - 风险评分，可为null表示无风险评估",
          "lineNumber": 77
        },
        {
          "name": "PermissionRiskScore",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  riskScore,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "⚠️ 权限风险评分显示组件 - 可视化显示操作的风险等级@param props - 包含风险评分的属性对象",
          "lineNumber": 91
        },
        {
          "name": "PermissionRequestTitle",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  title,\n  riskScore,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "🎯 权限请求标题组件 - 权限界面的标准化标题区域显示逻辑：",
          "lineNumber": 121
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "RiskScoreCategory",
        "Props"
      ],
      "constants": [
        "theme",
        "category",
        "category"
      ],
      "lineCount": 134,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\toolUseOptions.ts",
      "relativePath": "src/components/permissions/toolUseOptions.ts",
      "name": "toolUseOptions.ts",
      "extension": ".ts",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/commands",
          "imports": [
            "isUnsafeCompoundCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../CustomSelect/select",
          "imports": [
            "OptionSubtree"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "toolUseOptions",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/commands.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 工具使用选项生成器 - 权限确认对话框的动态选项生成系统选项生成策略：\n┌─────────────────────────────────────────────────────────────────┐\n│                    权限选项生成逻辑                              │\n├─────────────────────────────────────────────────────────────────┤\n│ 安全检查 → 前缀优先 → 完整命令 → 基础选项 → 用户界面生成       │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 🔒 安全性验证：检查命令是否安全，防止注入攻击\n2. 🎯 智能选项：根据命令类型动态生成\"不再询问\"选项\n3. 📂 目录绑定：权限记忆与当前工作目录关联\n4. 🎨 视觉优化：使用颜色和样式增强用户体验\n5. ⚡ 优先级处理：前缀权限优先于完整命令权限"
      },
      "functions": [
        {
          "name": "toolUseOptions",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  toolUseConfirm,\n  command,\n}"
          ],
          "returnType": "(Option | OptionSubtree)[]",
          "description": "🛡️ 工具使用选项生成器 - 为权限确认对话框动态生成用户选择选项选项生成逻辑：",
          "lineNumber": 48
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "showDontAskAgainOption",
        "prefix",
        "showDontAskAgainPrefixOption"
      ],
      "lineCount": 101,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\utils.ts",
      "relativePath": "src/components/permissions/utils.ts",
      "name": "utils.ts",
      "extension": ".ts",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/unaryLogging",
          "imports": [
            "CompletionType",
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "logUnaryPermissionEvent",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts",
        "src/utils/unaryLogging.ts",
        "src/components/permissions/PermissionRequest.tsx"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 权限工具函数集 - 权限系统的通用工具和日志记录功能核心功能：\n1. 📊 统一日志记录：标准化权限事件的日志格式和元数据\n2. 🔍 事件追踪：记录用户的权限决策行为用于分析\n3. 📈 使用统计：支持产品改进和用户行为分析\n4. 🏷️ 元数据标准化：确保日志数据的一致性和完整性"
      },
      "functions": [
        {
          "name": "logUnaryPermissionEvent",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "completion_type: CompletionType",
            "{\n    assistantMessage: {\n      message: { id: message_id },\n    },\n  }",
            "event: 'accept' | 'reject'"
          ],
          "returnType": "void",
          "description": "📊 权限事件日志记录器 - 统一记录用户的权限决策事件记录内容：",
          "lineNumber": 33
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 52,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\PressEnterToContinue.tsx",
      "relativePath": "src/components/PressEnterToContinue.tsx",
      "name": "PressEnterToContinue.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "PressEnterToContinue",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/Help.tsx",
        "src/components/Onboarding.tsx",
        "src/screens/Doctor.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "PressEnterToContinue",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.ReactNode",
          "lineNumber": 5
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 12,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\PromptInput.tsx",
      "relativePath": "src/components/PromptInput.tsx",
      "name": "PromptInput.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "sample"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/exampleCommands",
          "imports": [
            "getExampleCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "processUserInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useArrowKeyHistory",
          "imports": [
            "useArrowKeyHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useUnifiedCompletion",
          "imports": [
            "useUnifiedCompletion"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../history",
          "imports": [
            "addToHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TextInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "memo",
            "useCallback",
            "useEffect",
            "useMemo",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/tokens",
          "imports": [
            "countTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./SentryErrorBoundary",
          "imports": [
            "SentryErrorBoundary"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "SetToolJSXFn",
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./TokenWarning",
          "imports": [
            "TokenWarning",
            "WARNING_THRESHOLD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager",
            "reloadModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "setTerminalTitle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands/terminalSetup",
          "imports": [
            "default",
            "isShiftEnterKeyBindingInstalled",
            "handleHashCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context/PermissionContext",
          "imports": [
            "usePermissionContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/utils/exampleCommands.ts",
        "src/query.ts",
        "src/utils/messages.tsx",
        "src/hooks/useArrowKeyHistory.ts",
        "src/hooks/useUnifiedCompletion.ts",
        "src/history.ts",
        "src/components/TextInput.tsx",
        "src/utils/tokens.ts",
        "src/components/SentryErrorBoundary.ts",
        "src/commands.ts",
        "src/Tool.ts",
        "src/components/TokenWarning.tsx",
        "src/hooks/useTerminalSize.ts",
        "src/utils/theme.ts",
        "src/utils/model.ts",
        "src/utils/config.ts",
        "src/utils/terminal.ts",
        "src/commands/terminalSetup.ts",
        "src/context/PermissionContext.tsx",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "interpretHashCommand",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "input: string"
          ],
          "returnType": "Promise<string>",
          "description": "Async function to interpret the '#' command input using AI",
          "lineNumber": 29
        },
        {
          "name": "getPastedTextPrompt",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "text: string"
          ],
          "returnType": "string",
          "lineNumber": 98
        },
        {
          "name": "PromptInput",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{\n  commands,\n  forkNumber,\n  messageLogName,\n  isDisabled,\n  isLoading,\n  onQuery,\n  debug,\n  verbose,\n  messages,\n  setToolJSX,\n  tools,\n  input,\n  onInputChange,\n  mode,\n  onModeChange,\n  submitCount,\n  onSubmitCountChange,\n  setIsLoading,\n  abortController,\n  setAbortController,\n  onShowMessageSelector,\n  setForkConvoWithMessagesOnTheNextRender,\n  readFileTimestamps,\n  onModelChange,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 102
        },
        {
          "name": "onSubmit",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "input: string",
            "isSubmittingSlashCommand"
          ],
          "lineNumber": 295
        },
        {
          "name": "onImagePaste",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "image: string"
          ],
          "lineNumber": 471
        },
        {
          "name": "onTextPaste",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "rawText: string"
          ],
          "lineNumber": 476
        },
        {
          "name": "exit",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "never",
          "lineNumber": 734
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "systemPrompt",
        "result",
        "newlineCount",
        "commandWidth",
        "theme",
        "renderedSuggestions",
        "isSelected",
        "isAgent",
        "displayColor",
        "onChange",
        "handleQuickModelSwitch",
        "modelManager",
        "currentTokens",
        "debugInfo",
        "switchResult",
        "allModelNames",
        "handleHistoryUp",
        "handleHistoryDown",
        "originalInput",
        "cleanInput",
        "kodingContext",
        "messages",
        "contentToInterpret",
        "interpreted",
        "pastedPrompt",
        "newAbortController",
        "messages",
        "inputToAdd",
        "text",
        "pastedPrompt",
        "newInput",
        "handleSpecialKey",
        "textInputColumns",
        "tokenUsage",
        "modelManager",
        "currentModelId",
        "modelInfo",
        "freshModelManager",
        "currentModel",
        "selected"
      ],
      "lineCount": 738,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\SentryErrorBoundary.ts",
      "relativePath": "src/components/SentryErrorBoundary.ts",
      "name": "SentryErrorBoundary.ts",
      "extension": ".ts",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/sentry",
          "imports": [
            "captureException"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SentryErrorBoundary",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/sentry.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [
        {
          "name": "SentryErrorBoundary",
          "isExported": true,
          "extends": "React.Component<Props, State>",
          "methods": [
            "getDerivedStateFromError",
            "componentDidCatch",
            "render"
          ],
          "lineNumber": 12
        }
      ],
      "interfaces": [
        "Props",
        "State"
      ],
      "types": [],
      "constants": [],
      "lineCount": 40,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Spinner.tsx",
      "relativePath": "src/components/Spinner.tsx",
      "name": "Spinner.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useEffect",
            "useRef",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "sample"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/sessionState",
          "imports": [
            "getSessionState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Spinner",
          "type": "named"
        },
        {
          "name": "SimpleSpinner",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/sessionState.ts"
      ],
      "dependents": [
        "src/components/ConsoleOAuthFlow.tsx",
        "src/screens/REPL.tsx",
        "src/utils/messages.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Spinner",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.ReactNode",
          "lineNumber": 73
        },
        {
          "name": "SimpleSpinner",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.ReactNode",
          "lineNumber": 112
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "CHARACTERS",
        "MESSAGES",
        "frames",
        "message",
        "startTime",
        "timer",
        "timer",
        "frames",
        "timer"
      ],
      "lineCount": 130,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\StickerRequestForm.tsx",
      "relativePath": "src/components/StickerRequestForm.tsx",
      "name": "StickerRequestForm.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FormData",
          "type": "named"
        },
        {
          "name": "StickerRequestFormProps",
          "type": "named"
        },
        {
          "name": "StickerRequestForm",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/StickerRequestTool/StickerRequestTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [
        "FormData",
        "StickerRequestFormProps"
      ],
      "types": [],
      "constants": [
        "StickerRequestForm"
      ],
      "lineCount": 16,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\StructuredDiff.tsx",
      "relativePath": "src/components/StructuredDiff.tsx",
      "name": "StructuredDiff.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme",
            "ThemeNames"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/format",
          "imports": [
            "wrapText"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "StructuredDiff",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/format.tsx"
      ],
      "dependents": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/Onboarding.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "StructuredDiff",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  patch,\n  dim,\n  width,\n  overrideTheme,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 16
        },
        {
          "name": "formatDiff",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "lines: string[]",
            "startingLineNumber: number",
            "width: number",
            "dim: boolean",
            "overrideTheme: ThemeNames"
          ],
          "returnType": "React.ReactNode[]",
          "lineNumber": 30
        },
        {
          "name": "LineNumber",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{\n  i,\n  width,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 130
        },
        {
          "name": "numberDiffLines",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "diff: { code: string; type: string }[]",
            "startLine: number"
          ],
          "returnType": "{ code: string; type: string; i: number }[]",
          "lineNumber": 144
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "diff",
        "theme",
        "ls",
        "maxLineNumber",
        "maxWidth",
        "wrappedLines",
        "key",
        "result",
        "queue",
        "line",
        "line"
      ],
      "lineCount": 192,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\TextInput.tsx",
      "relativePath": "src/components/TextInput.tsx",
      "name": "TextInput.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTextInput",
          "imports": [
            "useTextInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Key"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TextInput",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useTextInput.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/Bug.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/PromptInput.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "TextInput",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  value: originalValue,\n  placeholder = '',\n  focus = true,\n  mask,\n  multiline = false,\n  highlightPastedText = false,\n  showCursor = true,\n  onChange,\n  onSubmit,\n  onExit,\n  onHistoryUp,\n  onHistoryDown,\n  onExitMessage,\n  onMessage,\n  onHistoryReset,\n  columns,\n  onImagePaste,\n  onPaste,\n  isDimmed = false,\n  disableCursorMovementForUpDownKeys = false,\n  onSpecialKey,\n  cursorOffset,\n  onChangeCursorOffset,\n}"
          ],
          "lineNumber": 124
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "resetPasteTimeout",
        "pastedText",
        "wrappedOnInput",
        "showPlaceholder"
      ],
      "lineCount": 260,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\TodoItem.tsx",
      "relativePath": "src/components/TodoItem.tsx",
      "name": "TodoItem.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/todoStorage",
          "imports": [
            "TodoItemType"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "TodoItemProps",
          "type": "named"
        },
        {
          "name": "TodoItem",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/todoStorage.ts"
      ],
      "dependents": [
        "src/tools/TodoWriteTool/TodoWriteTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [
        "TodoItemProps"
      ],
      "types": [],
      "constants": [
        "TodoItem",
        "statusIconMap",
        "statusColorMap",
        "priorityIconMap",
        "icon",
        "color",
        "priorityIcon"
      ],
      "lineCount": 47,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\TokenWarning.tsx",
      "relativePath": "src/components/TokenWarning.tsx",
      "name": "TokenWarning.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "WARNING_THRESHOLD",
          "type": "named"
        },
        {
          "name": "TokenWarning",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "TokenWarning",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ tokenUsage }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 13
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "MAX_TOKENS",
        "WARNING_THRESHOLD",
        "ERROR_THRESHOLD",
        "theme",
        "isError"
      ],
      "lineCount": 32,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ToolUseLoader.tsx",
      "relativePath": "src/components/ToolUseLoader.tsx",
      "name": "ToolUseLoader.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useInterval",
          "imports": [
            "useInterval"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/figures",
          "imports": [
            "BLACK_CIRCLE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ToolUseLoader",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useInterval.ts",
        "src/utils/theme.ts",
        "src/constants/figures.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantToolUseMessage.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ToolUseLoader",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  isError,\n  isUnresolved,\n  shouldAnimate,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 13
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "color"
      ],
      "lineCount": 41,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\TrustDialog.tsx",
      "relativePath": "src/components/TrustDialog.tsx",
      "name": "TrustDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "saveCurrentProjectConfig",
            "getCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TrustDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/constants/product.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/utils/state.ts",
        "src/components/Link.tsx"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "TrustDialog",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onDone }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 19
        },
        {
          "name": "onChange",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "value: 'yes' | 'no'"
          ],
          "lineNumber": 23
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "theme",
        "config",
        "isHomeDir",
        "exitState"
      ],
      "lineCount": 99,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\claude-asterisk-ascii-art.tsx",
      "relativePath": "src/constants/claude-asterisk-ascii-art.tsx",
      "name": "claude-asterisk-ascii-art.tsx",
      "extension": ".tsx",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "largeAnimatedAray",
          "type": "named"
        },
        {
          "name": "smallAnimatedArray",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [],
      "comments": {
        "fileHeader": "🎯 Claude 星号 ASCII 艺术动画 - 终端动画效果常量🏗️ 核心功能：\n- 提供 Claude 主题的 ASCII 艺术动画帧\n- 支持大小两种动画效果\n- 创建终端界面的视觉增强效果\n- 提供品牌识别的动画元素🔄 依赖关系：\n- 上游：被加载动画和启动界面使用\n- 下游：无外部依赖，提供静态艺术资源📊 使用场景：\n- 应用启动时的加载动画\n- 长时间操作的等待指示\n- 品牌展示和用户体验增强\n- 终端界面的视觉美化🔧 技术实现：\n- 多帧 ASCII 艺术序列\n- 渐变动画效果支持\n- 大小两种尺寸适配\n- 终端兼容的字符组合"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "largeAnimatedAray",
        "smallAnimatedArray"
      ],
      "lineCount": 277,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\figures.ts",
      "relativePath": "src/constants/figures.ts",
      "name": "figures.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "BLACK_CIRCLE",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/ToolUseLoader.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 图形符号常量定义 - 跨平台 Unicode 符号适配🏗️ 核心功能：\n- 提供跨平台兼容的 Unicode 图形符号\n- 根据操作系统自动选择最佳显示符号\n- 确保在不同终端环境下的显示一致性\n- 支持特殊字符的平台适配🔄 依赖关系：\n- 上游：被 UI 组件和终端显示使用\n- 下游：依赖 env 工具获取平台信息📊 使用场景：\n- 终端界面的状态指示符\n- 列表项目的视觉标记\n- 进度显示和状态标识\n- 跨平台 UI 的符号统一🔧 技术实现：\n- 基于平台检测动态选择符号\n- 优先选择视觉效果更好的符号\n- 回退到通用支持的替代符号\n- 确保在所有平台的可显示性"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "BLACK_CIRCLE"
      ],
      "lineCount": 44,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\macros.ts",
      "relativePath": "src/constants/macros.ts",
      "name": "macros.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [
        {
          "source": "module",
          "imports": [
            "createRequire"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MACRO",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/Bug.tsx",
        "src/components/Help.tsx",
        "src/components/Logo.tsx",
        "src/constants/prompts.ts",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/ProjectOnboarding.tsx",
        "src/screens/REPL.tsx",
        "src/utils/autoUpdater.ts",
        "src/utils/http.ts",
        "src/utils/log.ts",
        "src/utils/user.ts"
      ],
      "comments": {
        "fileHeader": "🎯 宏定义常量 - 动态版本和 URL 配置🏗️ 核心功能：\n- 从 package.json 动态获取版本信息\n- 提供文档和包管理的 URL 链接\n- 统一的错误报告和帮助信息\n- 支持构建时的动态配置注入🔄 依赖关系：\n- 上游：被版本显示和帮助系统使用\n- 下游：依赖 package.json 和 ES 模块系统📊 使用场景：\n- 版本信息显示和检查\n- 帮助文档链接生成\n- 错误报告引导\n- 包管理器链接构建🔧 技术实现：\n- 使用 ES 模块的 createRequire 加载 JSON\n- 动态读取 package.json 版本信息\n- 提供统一的 URL 和消息模板\n- 支持构建时的配置替换"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "require",
        "pkg",
        "MACRO"
      ],
      "lineCount": 50,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\modelCapabilities.ts",
      "relativePath": "src/constants/modelCapabilities.ts",
      "name": "modelCapabilities.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [
        {
          "source": "../types/modelCapabilities",
          "imports": [
            "ModelCapabilities"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MODEL_CAPABILITIES_REGISTRY",
          "type": "named"
        },
        {
          "name": "inferModelCapabilities",
          "type": "named"
        },
        {
          "name": "getModelCapabilities",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/types/modelCapabilities.ts"
      ],
      "dependents": [
        "src/services/modelAdapterFactory.ts",
        "src/test/testAdapters.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "inferModelCapabilities",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "modelName: string"
          ],
          "returnType": "ModelCapabilities | null",
          "description": "Intelligently infer capabilities for unregistered models",
          "lineNumber": 107
        },
        {
          "name": "getModelCapabilities",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "modelName: string"
          ],
          "returnType": "ModelCapabilities",
          "lineNumber": 155
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "GPT5_CAPABILITIES",
        "CHAT_COMPLETIONS_CAPABILITIES",
        "MODEL_CAPABILITIES_REGISTRY",
        "lowerName",
        "capabilityCache",
        "capabilities",
        "inferred",
        "defaultCapabilities"
      ],
      "lineCount": 179,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\models.ts",
      "relativePath": "src/constants/models.ts",
      "name": "models.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "default",
          "type": "default",
          "description": "模型配置数据库 - 包含所有支持的 AI 模型按提供商组织，每个模型包含完整的规格信息："
        },
        {
          "name": "providers",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/ModelSelector.tsx",
        "src/services/claude.ts"
      ],
      "comments": {
        "fileHeader": "🎯 AI 模型配置数据库 - 多提供商模型定义🏗️ 核心功能：\n- 提供完整的 AI 模型配置数据库\n- 支持多家 AI 提供商的模型规格\n- 定义模型能力、成本和限制信息\n- 统一的模型参数和特性管理🔄 依赖关系：\n- 上游：被模型选择器和成本计算器使用\n- 下游：无外部依赖，提供静态配置数据📊 使用场景：\n- 模型选择和配置界面\n- 成本估算和计费计算\n- API 调用参数设置\n- 模型能力检测和适配🔧 技术实现：\n- 按提供商分组的模型配置\n- 详细的令牌限制和成本信息\n- 完整的模型能力标识\n- 支持缓存和批处理定价"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "providers"
      ],
      "lineCount": 1079,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\oauth.ts",
      "relativePath": "src/constants/oauth.ts",
      "name": "oauth.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "OAUTH_CONFIG",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/services/oauth.ts"
      ],
      "comments": {
        "fileHeader": "🎯 OAuth 认证配置常量 - 用户身份验证设置🏗️ 核心功能：\n- 提供 OAuth 2.0 认证流程的配置参数\n- 定义重定向端口和回调 URL\n- 管理 API 权限作用域设置\n- 支持生产和测试环境配置切换🔄 依赖关系：\n- 上游：被认证服务和 OAuth 客户端使用\n- 下游：无外部依赖，提供认证配置📊 使用场景：\n- 用户登录和身份验证\n- API 密钥获取和管理\n- OAuth 回调处理\n- 权限作用域验证🔧 技术实现：\n- 基于环境的配置覆盖机制\n- 类型安全的配置对象定义\n- 支持多环境部署配置\n- 统一的 OAuth 参数管理"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "BASE_CONFIG",
        "PROD_OAUTH_CONFIG",
        "OAUTH_CONFIG"
      ],
      "lineCount": 65,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\product.ts",
      "relativePath": "src/constants/product.ts",
      "name": "product.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "PRODUCT_NAME",
          "type": "named"
        },
        {
          "name": "PRODUCT_URL",
          "type": "named"
        },
        {
          "name": "PROJECT_FILE",
          "type": "named"
        },
        {
          "name": "PRODUCT_COMMAND",
          "type": "named"
        },
        {
          "name": "CONFIG_BASE_DIR",
          "type": "named"
        },
        {
          "name": "CONFIG_FILE",
          "type": "named"
        },
        {
          "name": "GITHUB_ISSUES_REPO_URL",
          "type": "named"
        },
        {
          "name": "ASCII_LOGO",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/commands/bug.tsx",
        "src/commands/ctx_viz.ts",
        "src/commands/doctor.ts",
        "src/commands/init.ts",
        "src/commands/mcp.ts",
        "src/components/AsciiLogo.tsx",
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Bug.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/Help.tsx",
        "src/components/Logo.tsx",
        "src/components/MCPServerDialogCopy.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/Onboarding.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/components/TrustDialog.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/entrypoints/cli.tsx",
        "src/permissions.ts",
        "src/ProjectOnboarding.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/BashTool/prompt.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/utils/autoUpdater.ts",
        "src/utils/commands.ts",
        "src/utils/debugLogger.ts",
        "src/utils/env.ts",
        "src/utils/http.ts",
        "src/utils/log.ts",
        "src/utils/PersistentShell.ts",
        "src/utils/style.ts"
      ],
      "comments": {
        "fileHeader": "🎯 产品信息常量定义 - Kode 项目核心配置🏗️ 核心功能：\n- 定义产品的基本信息和标识\n- 配置项目的 URL 和文件路径\n- 提供统一的产品命名和配置\n- 包含品牌标识和 ASCII 艺术字🔄 依赖关系：\n- 上游：被整个应用的配置系统使用\n- 下游：无外部依赖，提供基础配置📊 使用场景：\n- 应用启动时的品牌显示\n- 配置文件的路径定义\n- 帮助信息和错误报告\n- GitHub 集成和问题跟踪🔧 技术实现：\n- 提供不可变的产品常量\n- 集中管理所有产品相关信息\n- 支持命令行工具的品牌识别\n- ASCII 艺术字增强终端体验"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "PRODUCT_NAME",
        "PRODUCT_URL",
        "PROJECT_FILE",
        "PRODUCT_COMMAND",
        "CONFIG_BASE_DIR",
        "CONFIG_FILE",
        "GITHUB_ISSUES_REPO_URL",
        "ASCII_LOGO"
      ],
      "lineCount": 63,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\prompts.ts",
      "relativePath": "src/constants/prompts.ts",
      "name": "prompts.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/git",
          "imports": [
            "getIsGit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages.js",
          "imports": [
            "INTERRUPT_MESSAGE",
            "INTERRUPT_MESSAGE_FOR_TOOL_USE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./product",
          "imports": [
            "PRODUCT_NAME",
            "PROJECT_FILE",
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getCLISyspromptPrefix",
          "type": "named"
        },
        {
          "name": "getSystemPrompt",
          "type": "named"
        },
        {
          "name": "getEnvInfo",
          "type": "named"
        },
        {
          "name": "getAgentPrompt",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts",
        "src/utils/git.ts",
        "src/utils/state.ts",
        "src/constants/product.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/commands/ctx_viz.ts",
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/ask.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getCLISyspromptPrefix",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "'IMPORTANT: Assist with defensive security tasks only. Refuse to create, modify, or improve code that may be used maliciously. Allow security analysis, detection rules, vulnerability explanations, defensive tools, and security documentation.'",
          "lineNumber": 16
        },
        {
          "name": "getSystemPrompt",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<string[]>",
          "lineNumber": 20
        },
        {
          "name": "getEnvInfo",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<string>",
          "lineNumber": 146
        },
        {
          "name": "getAgentPrompt",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<string[]>",
          "lineNumber": 157
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "isGit"
      ],
      "lineCount": 169,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\releaseNotes.ts",
      "relativePath": "src/constants/releaseNotes.ts",
      "name": "releaseNotes.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "RELEASE_NOTES",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/commands/release-notes.ts",
        "src/ProjectOnboarding.tsx"
      ],
      "comments": {
        "fileHeader": "Release notes for each version"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "RELEASE_NOTES"
      ],
      "lineCount": 8,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\context\\PermissionContext.tsx",
      "relativePath": "src/context/PermissionContext.tsx",
      "name": "PermissionContext.tsx",
      "extension": ".tsx",
      "directory": "src/context",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "createContext",
            "useContext",
            "useState",
            "useCallback",
            "ReactNode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/PermissionMode",
          "imports": [
            "PermissionMode",
            "IPermissionContext",
            "getNextPermissionMode",
            "MODE_CONFIGS"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "PermissionProvider",
          "type": "named"
        },
        {
          "name": "usePermissionContext",
          "type": "named"
        },
        {
          "name": "usePermissionMode",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/types/PermissionMode.ts"
      ],
      "dependents": [
        "src/components/ModeIndicator.tsx",
        "src/components/PromptInput.tsx",
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "PermissionProvider",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  children,\n  isBypassPermissionsModeAvailable = false,\n}"
          ],
          "lineNumber": 33
        },
        {
          "name": "usePermissionContext",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "PermissionContextValue",
          "lineNumber": 131
        },
        {
          "name": "usePermissionMode",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "[\n  PermissionMode,\n  (mode: PermissionMode) => void,\n  () => void,\n]",
          "description": "Hook for components that need to respond to permission mode changes",
          "lineNumber": 142
        }
      ],
      "classes": [],
      "interfaces": [
        "PermissionContextValue",
        "PermissionProviderProps"
      ],
      "types": [],
      "constants": [
        "PermissionContext",
        "cycleMode",
        "nextMode",
        "modeConfig",
        "setMode",
        "modeConfig",
        "isToolAllowed",
        "getModeConfig",
        "value",
        "context"
      ],
      "lineCount": 150,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\context.ts",
      "relativePath": "src/context.ts",
      "name": "context.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/style",
          "imports": [
            "getCodeStyle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize",
            "omit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/git",
          "imports": [
            "getIsGit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/ripgrep",
          "imports": [
            "ripGrep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs/promises",
          "imports": [
            "readFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/generators",
          "imports": [
            "lastX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/user",
          "imports": [
            "getGitEmail"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getClaudeFiles",
          "type": "named"
        },
        {
          "name": "setContext",
          "type": "named"
        },
        {
          "name": "removeContext",
          "type": "named"
        },
        {
          "name": "getReadme",
          "type": "named"
        },
        {
          "name": "getProjectDocs",
          "type": "named"
        },
        {
          "name": "getGitStatus",
          "type": "named"
        },
        {
          "name": "getContext",
          "type": "named"
        },
        {
          "name": "getDirectoryStructure",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/utils/style.ts",
        "src/utils/state.ts",
        "src/tools/lsTool/lsTool.tsx",
        "src/utils/git.ts",
        "src/utils/ripgrep.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/model.ts",
        "src/utils/generators.ts",
        "src/utils/user.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/ctx_viz.ts",
        "src/entrypoints/cli.tsx",
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/ask.tsx",
        "src/utils/autoCompactCore.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getClaudeFiles",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<string | null>",
          "description": "Find all AGENTS.md and CLAUDE.md files in the current working directory",
          "lineNumber": 24
        },
        {
          "name": "setContext",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "key: string",
            "value: string"
          ],
          "returnType": "void",
          "lineNumber": 64
        },
        {
          "name": "removeContext",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "key: string"
          ],
          "returnType": "void",
          "lineNumber": 74
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "abortController",
        "timeout",
        "allFiles",
        "fileTypes",
        "projectConfig",
        "context",
        "projectConfig",
        "context",
        "getReadme",
        "readmePath",
        "content",
        "getProjectDocs",
        "cwd",
        "codeContextPath",
        "claudePath",
        "docs",
        "content",
        "content",
        "getGitStatus",
        "statusLines",
        "truncatedStatus",
        "getContext",
        "codeStyle",
        "projectConfig",
        "dontCrawl",
        "getDirectoryStructure",
        "abortController",
        "model",
        "resultsGen",
        "result"
      ],
      "lineCount": 279,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\cost-tracker.ts",
      "relativePath": "src/cost-tracker.ts",
      "name": "cost-tracker.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/format",
          "imports": [
            "formatDuration"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/log",
          "imports": [
            "SESSION_ID"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "addToTotalCost",
          "type": "named"
        },
        {
          "name": "getTotalCost",
          "type": "named"
        },
        {
          "name": "getTotalDuration",
          "type": "named"
        },
        {
          "name": "getTotalAPIDuration",
          "type": "named"
        },
        {
          "name": "formatTotalCost",
          "type": "named"
        },
        {
          "name": "useCostSummary",
          "type": "named"
        },
        {
          "name": "resetStateForTests",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/format.tsx",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands/cost.ts",
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/utils/ask.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "addToTotalCost",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "cost: number",
            "duration: number"
          ],
          "returnType": "void",
          "lineNumber": 21
        },
        {
          "name": "getTotalCost",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "number",
          "lineNumber": 26
        },
        {
          "name": "getTotalDuration",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "number",
          "lineNumber": 30
        },
        {
          "name": "getTotalAPIDuration",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "number",
          "lineNumber": 34
        },
        {
          "name": "formatCost",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "cost: number"
          ],
          "returnType": "string",
          "lineNumber": 38
        },
        {
          "name": "formatTotalCost",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "lineNumber": 42
        },
        {
          "name": "useCostSummary",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 50
        },
        {
          "name": "round",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "number: number",
            "precision: number"
          ],
          "returnType": "number",
          "lineNumber": 72
        },
        {
          "name": "resetStateForTests",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "Only used in tests",
          "lineNumber": 77
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "STATE",
        "f",
        "projectConfig"
      ],
      "lineCount": 85,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\entrypoints\\cli.tsx",
      "relativePath": "src/entrypoints/cli.tsx",
      "name": "cli.tsx",
      "extension": ".tsx",
      "directory": "src/entrypoints",
      "level": 1,
      "imports": [
        {
          "source": "node:url",
          "imports": [
            "fileURLToPath"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:path",
          "imports": [
            "dirname",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/sentry",
          "imports": [
            "initSentry"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND",
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/shims/node",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "tty",
          "imports": [
            "ReadStream"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "openSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "RenderOptions"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../history",
          "imports": [
            "addToHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext",
            "setContext",
            "removeContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@commander-js/extra-typings",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/ask",
          "imports": [
            "ask"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions",
          "imports": [
            "hasPermissionsToUseTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools",
          "imports": [
            "getTools"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "getCurrentProjectConfig",
            "saveGlobalConfig",
            "saveCurrentProjectConfig",
            "getCustomApiKeyStatus",
            "normalizeApiKeyForConfig",
            "setConfigForCLI",
            "deleteConfigForCLI",
            "getConfigForCLI",
            "listConfigForCLI",
            "enableConfigs",
            "validateAndRepairAllGPT5Profiles"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "process",
          "imports": [
            "cwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "dateToFilename",
            "logError",
            "parseLogFilename"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/debugLogger",
          "imports": [
            "initDebugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Onboarding",
          "imports": [
            "Onboarding"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../screens/Doctor",
          "imports": [
            "Doctor"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/ApproveApiKey",
          "imports": [
            "ApproveApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/TrustDialog",
          "imports": [
            "TrustDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../screens/LogList",
          "imports": [
            "LogList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../screens/ResumeConversation",
          "imports": [
            "ResumeConversation"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "checkHasTrustDialogAccepted",
            "McpServerConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "isDefaultSlowAndCapableModel"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./mcp",
          "imports": [
            "startMCPServer"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd",
            "setCwd",
            "setOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "omit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "getCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "getNextAvailableLogForkNumber",
            "loadLogList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/conversationRecovery",
          "imports": [
            "loadMessagesFromLog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/cleanup",
          "imports": [
            "cleanupOldMessageFilesInBackground"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands/approvedTools",
          "imports": [
            "handleListApprovedTools",
            "handleRemoveApprovedTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "addMcpServer",
            "getMcpServer",
            "listMCPServers",
            "parseEnvVars",
            "removeMcpServer",
            "getClients",
            "ensureConfigScope"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpServerApproval",
          "imports": [
            "handleMcprcServerApprovals"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/exampleCommands",
          "imports": [
            "getExampleCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ansi-escapes",
          "imports": [
            "cursorShow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/autoUpdater",
          "imports": [
            "getLatestVersion",
            "assertMinVersion",
            "getUpdateCommandSuggestions"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "semver",
          "imports": [
            "gt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "CACHE_PATHS"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/PersistentShell",
          "imports": [
            "PersistentShell"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/InvalidConfigDialog",
          "imports": [
            "showInvalidConfigDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/errors",
          "imports": [
            "ConfigParseError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/permissions/filesystem",
          "imports": [
            "grantReadPermissionForOriginalDir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader.js",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../screens/REPL",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "readline",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../utils/autoUpdater",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../screens/REPL",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "completeOnboarding",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/sentry.ts",
        "src/constants/product.ts",
        "src/history.ts",
        "src/context.ts",
        "src/utils/ask.tsx",
        "src/permissions.ts",
        "src/tools.ts",
        "src/utils/config.ts",
        "src/utils/log.ts",
        "src/utils/debugLogger.ts",
        "src/components/Onboarding.tsx",
        "src/screens/Doctor.tsx",
        "src/components/ApproveApiKey.tsx",
        "src/components/TrustDialog.tsx",
        "src/screens/LogList.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/utils/model.ts",
        "src/entrypoints/mcp.ts",
        "src/utils/env.ts",
        "src/utils/state.ts",
        "src/commands.ts",
        "src/utils/conversationRecovery.ts",
        "src/utils/cleanup.ts",
        "src/commands/approvedTools.ts",
        "src/services/mcpClient.ts",
        "src/services/mcpServerApproval.tsx",
        "src/utils/exampleCommands.ts",
        "src/utils/autoUpdater.ts",
        "src/utils/PersistentShell.ts",
        "src/utils/terminal.ts",
        "src/components/InvalidConfigDialog.tsx",
        "src/utils/errors.ts",
        "src/utils/permissions/filesystem.ts",
        "src/constants/macros.ts",
        "src/utils/agentLoader.ts",
        "src/screens/REPL.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [],
      "comments": {
        "fileHeader": "🚀 Kode CLI入口点 - 交互式AI编程环境的核心启动器CLI启动架构：\n┌─────────────────────────────────────────────────────────────────┐\n│                    Kode CLI 启动流程                            │\n├─────────────────────────────────────────────────────────────────┤\n│ 系统初始化 → 配置加载 → 参数解析 → 模式选择 → 界面启动         │\n│     ↓          ↓         ↓        ↓         ↓                   │\n│ Sentry监控 → 权限检查 → 命令定义 → REPL/Print → 工具加载        │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 🔧 系统初始化：错误监控、UI引擎、环境配置\n2. 📋 命令行解析：参数处理、选项验证、模式选择\n3. 🎮 交互模式：启动REPL界面进行持续对话\n4. 📝 打印模式：单次查询和结果输出\n5. ⚙️ 配置管理：全局/项目配置的增删改查\n6. 🔌 MCP集成：模型上下文协议服务器管理\n7. 🛡️ 权限控制：工具使用权限和安全策略\n8. 📚 对话管理：历史记录、恢复、日志查看"
      },
      "functions": [
        {
          "name": "completeOnboarding",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "🎓 完成用户首次使用引导流程引导完成标记：",
          "lineNumber": 170
        },
        {
          "name": "showSetupScreens",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "safeMode: boolean",
            "print: boolean"
          ],
          "returnType": "Promise<void>",
          "description": "🎨 显示设置界面流程 - 首次使用引导和安全确认设置界面流程：",
          "lineNumber": 191
        },
        {
          "name": "logStartup",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "📊 记录启动统计 - 增加启动次数计数器",
          "lineNumber": 274
        },
        {
          "name": "setup",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "cwd: string",
            "safeMode: boolean"
          ],
          "returnType": "Promise<void>",
          "description": "🔧 系统设置和初始化 - 核心的系统准备流程设置流程：",
          "lineNumber": 295
        },
        {
          "name": "main",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "description": "🚀 主函数 - 应用程序的核心启动逻辑启动流程：",
          "lineNumber": 395
        },
        {
          "name": "parseArgs",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "stdinContent: string",
            "renderContext: RenderOptions | undefined"
          ],
          "returnType": "Promise<Command>",
          "description": "📋 解析命令行参数并设置所有可用的命令这个函数是命令行界面的核心，定义了所有用户可以使用的命令和选项：主要命令类别：",
          "lineNumber": 476
        },
        {
          "name": "ClaudeDesktopImport",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "description": "Create a component for the server selection",
          "lineNumber": 1154
        },
        {
          "name": "stdin",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "description": "📥 标准输入读取器 - 处理管道输入和重定向数据用途：",
          "lineNumber": 1637
        },
        {
          "name": "gracefulExit",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "code"
          ],
          "description": "🛡️ 优雅退出处理器 - 确保资源正确清理清理任务：",
          "lineNumber": 1663
        },
        {
          "name": "resetCursor",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "description": "🖱️ 重置终端光标 - 恢复光标显示状态确保终端光标在程序退出后可见，",
          "lineNumber": 1690
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "__filename",
        "__dirname",
        "devCandidate",
        "distCandidate",
        "resolved",
        "config",
        "config",
        "onDone",
        "config",
        "globalConfig",
        "updatedConfig",
        "projectConfig",
        "repairResult",
        "ttyFd",
        "program",
        "renderContextWithExitOnCtrlC",
        "commands",
        "commandList",
        "inputPrompt",
        "isDefaultModel",
        "updateInfo",
        "latest",
        "cmds",
        "config",
        "allowedTools",
        "result",
        "result",
        "mcp",
        "providedCwd",
        "scope",
        "rl",
        "question",
        "serverName",
        "serverType",
        "type",
        "prompt",
        "commandOrUrlValue",
        "argsStr",
        "envStr",
        "envPairs",
        "scopeStr",
        "serverScope",
        "scope",
        "env",
        "scope",
        "servers",
        "scope",
        "server",
        "scope",
        "platform",
        "isWSL",
        "whoamiCommand",
        "configContent",
        "mcpServers",
        "serverNames",
        "numServers",
        "serversInfo",
        "server",
        "ink",
        "reactModule",
        "inkjsui",
        "utilsTheme",
        "React",
        "theme",
        "importServers",
        "results",
        "server",
        "existingServer",
        "handleConfirm",
        "existingServers",
        "results",
        "newServers",
        "server",
        "server",
        "resetMcpChoices",
        "config",
        "latestVersion",
        "cmds",
        "context",
        "number",
        "isNumber",
        "log",
        "pathSegments",
        "filename",
        "fork",
        "isDefaultModel",
        "context",
        "context",
        "context",
        "context",
        "context",
        "terminal"
      ],
      "lineCount": 1701,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\entrypoints\\mcp.ts",
      "relativePath": "src/entrypoints/mcp.ts",
      "name": "mcp.ts",
      "extension": ".ts",
      "directory": "src/entrypoints",
      "level": 1,
      "imports": [
        {
          "source": "@modelcontextprotocol/sdk/server/index.js",
          "imports": [
            "Server"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/server/stdio.js",
          "imports": [
            "StdioServerTransport"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/types.js",
          "imports": [
            "CallToolRequestSchema",
            "CallToolResultSchema",
            "ListToolsRequestSchema",
            "ListToolsResultSchema",
            "ToolSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/TaskTool/TaskTool",
          "imports": [
            "TaskTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions",
          "imports": [
            "hasPermissionsToUseTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "setCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands/review",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/generators",
          "imports": [
            "lastX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "startMCPServer",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/TaskTool/TaskTool.tsx",
        "src/permissions.ts",
        "src/utils/state.ts",
        "src/utils/model.ts",
        "src/utils/log.ts",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/Tool.ts",
        "src/commands.ts",
        "src/commands/review.ts",
        "src/utils/generators.ts",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "startMCPServer",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "cwd: string"
          ],
          "returnType": "Promise<void>",
          "lineNumber": 50
        },
        {
          "name": "runServer",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 169
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "ToolInput"
      ],
      "constants": [
        "state",
        "MCP_COMMANDS",
        "MCP_TOOLS",
        "server",
        "tools",
        "tool",
        "model",
        "validationResult",
        "result",
        "finalResult",
        "transport"
      ],
      "lineCount": 176,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\history.ts",
      "relativePath": "src/history.ts",
      "name": "history.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getHistory",
          "type": "named"
        },
        {
          "name": "addToHistory",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx",
        "src/hooks/useArrowKeyHistory.ts",
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getHistory",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string[]",
          "lineNumber": 8
        },
        {
          "name": "addToHistory",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "command: string"
          ],
          "returnType": "void",
          "lineNumber": 12
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "MAX_HISTORY_ITEMS",
        "projectConfig",
        "history"
      ],
      "lineCount": 26,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useApiKeyVerification.ts",
      "relativePath": "src/hooks/useApiKeyVerification.ts",
      "name": "useApiKeyVerification.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useCallback",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "verifyApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getAnthropicApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useApiKeyVerification",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/claude.ts",
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "useApiKeyVerification",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "ApiKeyVerificationResult",
          "lineNumber": 18
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "VerificationStatus",
        "ApiKeyVerificationResult"
      ],
      "constants": [],
      "lineCount": 60,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useArrowKeyHistory.ts",
      "relativePath": "src/hooks/useArrowKeyHistory.ts",
      "name": "useArrowKeyHistory.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../history",
          "imports": [
            "getHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useArrowKeyHistory",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/history.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "useArrowKeyHistory",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "onSetInput: (value: string, mode: 'bash' | 'prompt') => void",
            "currentInput: string"
          ],
          "lineNumber": 4
        },
        {
          "name": "onHistoryUp",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 19
        },
        {
          "name": "onHistoryDown",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 31
        },
        {
          "name": "resetHistory",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 43
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "updateInput",
        "mode",
        "value",
        "latestHistory",
        "newIndex",
        "latestHistory",
        "newIndex"
      ],
      "lineCount": 56,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useCancelRequest.ts",
      "relativePath": "src/hooks/useCancelRequest.ts",
      "name": "useCancelRequest.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/permissions/PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../screens/REPL",
          "imports": [
            "BinaryFeedbackContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "SetToolJSXFn"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "useCancelRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/permissions/PermissionRequest.tsx",
        "src/screens/REPL.tsx",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "useCancelRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "setToolJSX: SetToolJSXFn",
            "setToolUseConfirm: (toolUseConfirm: ToolUseConfirm | null) => void",
            "setBinaryFeedbackContext: (bfContext: BinaryFeedbackContext | null) => void",
            "onCancel: () => void",
            "isLoading: boolean",
            "isMessageSelectorVisible: boolean",
            "abortSignal: AbortSignal"
          ],
          "lineNumber": 6
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 39,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useCanUseTool.ts",
      "relativePath": "src/hooks/useCanUseTool.ts",
      "name": "useCanUseTool.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions",
          "imports": [
            "hasPermissionsToUseTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool",
            "inputSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/commands",
          "imports": [
            "getCommandSubcommandPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "REJECT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "ToolType",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/permissions/PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/errors",
          "imports": [
            "AbortError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/permissions.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/commands.ts",
        "src/utils/messages.tsx",
        "src/Tool.ts",
        "src/query.ts",
        "src/components/permissions/PermissionRequest.tsx",
        "src/utils/errors.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/permissions.ts",
        "src/query.ts",
        "src/screens/REPL.tsx",
        "src/utils/ask.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "useCanUseTool",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "setToolUseConfirm: SetState<ToolUseConfirm | null>"
          ],
          "returnType": "CanUseToolFn",
          "lineNumber": 21
        },
        {
          "name": "logCancelledEvent",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 27
        },
        {
          "name": "resolveWithCancelledAndAbortAllToolCalls",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 29
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "SetState",
        "CanUseToolFn"
      ],
      "constants": [],
      "lineCount": 114,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useDoublePress.ts",
      "relativePath": "src/hooks/useDoublePress.ts",
      "name": "useDoublePress.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "DOUBLE_PRESS_TIMEOUT_MS",
          "type": "named"
        },
        {
          "name": "useDoublePress",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/hooks/useExitOnCtrlCD.ts",
        "src/hooks/useTextInput.ts"
      ],
      "comments": {
        "fileHeader": "Creates a function that calls one function on the first call and another"
      },
      "functions": [
        {
          "name": "useDoublePress",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "setPending: (pending: boolean) => void",
            "onDoublePress: () => void",
            "onFirstPress: () => void"
          ],
          "returnType": "() => void",
          "lineNumber": 8
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DOUBLE_PRESS_TIMEOUT_MS",
        "lastPressRef",
        "timeoutRef",
        "now",
        "timeSinceLastPress"
      ],
      "lineCount": 42,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useExitOnCtrlCD.ts",
      "relativePath": "src/hooks/useExitOnCtrlCD.ts",
      "name": "useExitOnCtrlCD.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./useDoublePress",
          "imports": [
            "useDoublePress"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useExitOnCtrlCD",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useDoublePress.ts"
      ],
      "dependents": [
        "src/commands/login.tsx",
        "src/components/ApproveApiKey.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Bug.tsx",
        "src/components/Config.tsx",
        "src/components/InvalidConfigDialog.tsx",
        "src/components/MCPServerApprovalDialog.tsx",
        "src/components/MCPServerMultiselectDialog.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/ModelConfig.tsx",
        "src/components/ModelListManager.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/ModelStatusDisplay.tsx",
        "src/components/Onboarding.tsx",
        "src/components/TrustDialog.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "useExitOnCtrlCD",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "onExit: () => void"
          ],
          "returnType": "ExitState",
          "lineNumber": 10
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "ExitState"
      ],
      "constants": [
        "handleCtrlC",
        "handleCtrlD"
      ],
      "lineCount": 32,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useInterval.ts",
      "relativePath": "src/hooks/useInterval.ts",
      "name": "useInterval.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect",
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useInterval",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/ToolUseLoader.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "useInterval",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "callback: () => void",
            "delay: number"
          ],
          "returnType": "void",
          "description": "A custom hook that runs a callback at a specified interval.",
          "lineNumber": 8
        },
        {
          "name": "tick",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 18
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "savedCallback",
        "id"
      ],
      "lineCount": 26,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useLogMessages.ts",
      "relativePath": "src/hooks/useLogMessages.ts",
      "name": "useLogMessages.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "overwriteLog",
            "getMessagesPath"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useLogMessages",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "useLogMessages",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "messages: Message[]",
            "messageLogName: string",
            "forkNumber: number"
          ],
          "returnType": "void",
          "lineNumber": 5
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 17,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useLogStartupTime.ts",
      "relativePath": "src/hooks/useLogStartupTime.ts",
      "name": "useLogStartupTime.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useLogStartupTime",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/screens/REPL.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "useLogStartupTime",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 4
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "startupTimeMs"
      ],
      "lineCount": 9,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useNotifyAfterTimeout.ts",
      "relativePath": "src/hooks/useNotifyAfterTimeout.ts",
      "name": "useNotifyAfterTimeout.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/notifier",
          "imports": [
            "sendNotification"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useNotifyAfterTimeout",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/notifier.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/permissions/PermissionRequest.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "updateLastInteractionTime",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 12
        },
        {
          "name": "getTimeSinceLastInteraction",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "number",
          "lineNumber": 16
        },
        {
          "name": "hasRecentInteraction",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "threshold: number"
          ],
          "returnType": "boolean",
          "lineNumber": 20
        },
        {
          "name": "shouldNotify",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "threshold: number"
          ],
          "returnType": "boolean",
          "lineNumber": 24
        },
        {
          "name": "useNotifyAfterTimeout",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "message: string",
            "timeout: number"
          ],
          "returnType": "void",
          "description": "Hook that manages desktop notifications after a timeout period.Shows a notification in two cases:",
          "lineNumber": 41
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DEFAULT_INTERACTION_THRESHOLD_MS",
        "STATE",
        "init",
        "timer"
      ],
      "lineCount": 66,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\usePermissionRequestLogging.ts",
      "relativePath": "src/hooks/usePermissionRequestLogging.ts",
      "name": "usePermissionRequestLogging.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/unaryLogging",
          "imports": [
            "logUnaryEvent",
            "CompletionType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/permissions/PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "usePermissionRequestLogging",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/unaryLogging.ts",
        "src/components/permissions/PermissionRequest.tsx",
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "usePermissionRequestLogging",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "toolUseConfirm: ToolUseConfirm",
            "unaryEvent: UnaryEvent"
          ],
          "returnType": "void",
          "description": "Logs permission request events using Statsig and unary logging.",
          "lineNumber": 17
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "UnaryEvent"
      ],
      "constants": [
        "languagePromise"
      ],
      "lineCount": 41,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useTerminalSize.ts",
      "relativePath": "src/hooks/useTerminalSize.ts",
      "name": "useTerminalSize.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useTerminalSize",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/Bug.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/LogSelector.tsx",
        "src/components/Message.tsx",
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/UserPromptMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/PromptInput.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "updateAllListeners",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 12
        },
        {
          "name": "useTerminalSize",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 20
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "listeners",
        "updateSize"
      ],
      "lineCount": 50,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useTextInput.ts",
      "relativePath": "src/hooks/useTextInput.ts",
      "name": "useTextInput.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Key"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./useDoublePress",
          "imports": [
            "useDoublePress"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/Cursor",
          "imports": [
            "Cursor"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/imagePaste.js",
          "imports": [
            "getImageFromClipboard",
            "CLIPBOARD_ERROR_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useTextInput",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useDoublePress.ts",
        "src/utils/Cursor.ts"
      ],
      "dependents": [
        "src/components/TextInput.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "mapInput",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "input_map: Array<[string, InputHandler]>"
          ],
          "returnType": "InputMapper",
          "lineNumber": 15
        },
        {
          "name": "useTextInput",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  value: originalValue,\n  onChange,\n  onSubmit,\n  onExit,\n  onExitMessage,\n  onMessage,\n  onHistoryUp,\n  onHistoryDown,\n  onHistoryReset,\n  mask = '',\n  multiline = false,\n  cursorChar,\n  invert,\n  columns,\n  onImagePaste,\n  disableCursorMovementForUpDownKeys = false,\n  externalOffset,\n  onOffsetChange,\n}"
          ],
          "returnType": "UseTextInputResult",
          "lineNumber": 53
        },
        {
          "name": "maybeClearImagePasteErrorTimeout",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 79
        },
        {
          "name": "clear",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 114
        },
        {
          "name": "handleCtrlD",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "MaybeCursor",
          "lineNumber": 123
        },
        {
          "name": "tryImagePaste",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 134
        },
        {
          "name": "handleEnter",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "key: Key"
          ],
          "lineNumber": 183
        },
        {
          "name": "upOrHistoryUp",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 197
        },
        {
          "name": "downOrHistoryDown",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 209
        },
        {
          "name": "onInput",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "input: string",
            "key: Key"
          ],
          "returnType": "void",
          "lineNumber": 221
        },
        {
          "name": "mapKey",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "key: Key"
          ],
          "returnType": "InputMapper",
          "lineNumber": 255
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "MaybeCursor",
        "InputHandler",
        "InputMapper",
        "UseTextInputProps",
        "UseTextInputResult"
      ],
      "constants": [
        "IMAGE_PLACEHOLDER",
        "handler",
        "offset",
        "setOffset",
        "cursor",
        "handleCtrlC",
        "handleEscape",
        "handleEmptyCtrlD",
        "base64Image",
        "handleCtrl",
        "handleMeta",
        "cursorUp",
        "cursorDown",
        "nextCursor",
        "nextCursor"
      ],
      "lineCount": 318,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useUnifiedCompletion.ts",
      "relativePath": "src/hooks/useUnifiedCompletion.ts",
      "name": "useUnifiedCompletion.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useState",
            "useCallback",
            "useEffect",
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "statSync",
            "readdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join",
            "dirname",
            "basename",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "getCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "getActiveAgents"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "glob",
          "imports": [
            "glob"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/fuzzyMatcher",
          "imports": [
            "matchCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/commonUnixCommands",
          "imports": [
            "getCommonSystemCommands",
            "getCommandPriority",
            "getEssentialCommands",
            "getMinimalFallbackCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "fs",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UnifiedSuggestion",
          "type": "named"
        },
        {
          "name": "useUnifiedCompletion",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/commands.ts",
        "src/utils/agentLoader.ts",
        "src/utils/model.ts",
        "src/utils/fuzzyMatcher.ts",
        "src/utils/commonUnixCommands.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "useUnifiedCompletion",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  input,\n  cursorOffset,\n  onInputChange,\n  setCursorOffset,\n  commands,\n  onSubmit,\n}"
          ],
          "lineNumber": 84
        }
      ],
      "classes": [],
      "interfaces": [
        "UnifiedSuggestion",
        "CompletionContext",
        "TerminalState",
        "Props",
        "CompletionState"
      ],
      "types": [],
      "constants": [
        "INITIAL_STATE",
        "updateState",
        "resetCompletion",
        "activateCompletion",
        "findCommonPrefix",
        "str",
        "getWordAtCursor",
        "char",
        "collectedSoFar",
        "prevChar",
        "nextChar",
        "word",
        "beforeWord",
        "isCommand",
        "content",
        "classifyCommand",
        "lowerCmd",
        "commonWords",
        "devPrefixes",
        "systemIndicators",
        "buildToolPatterns",
        "vowelRatio",
        "loadSystemCommands",
        "pathDirs",
        "commandSet",
        "essentialCommands",
        "entries",
        "fullPath",
        "stats",
        "commands",
        "generateCommandSuggestions",
        "filteredCommands",
        "names",
        "calculateUnixCommandScore",
        "result",
        "generateUnixCommandSuggestions",
        "commonCommands",
        "uniqueCommands",
        "matches",
        "boostedMatches",
        "priority",
        "perfectMatches",
        "goodMatches",
        "modelManager",
        "allModels",
        "suggestions",
        "suggestions",
        "prefixPatterns",
        "findSmartBreak",
        "sentenceEndings",
        "firstSentenceMatch",
        "firstSentence",
        "commaEndings",
        "commas",
        "regex",
        "commaPos",
        "clause",
        "generateMentionSuggestions",
        "allSuggestions",
        "candidates",
        "matches",
        "fuzzyResults",
        "suggestion",
        "generateFileSuggestions",
        "cwd",
        "userPath",
        "isAbsolutePath",
        "isHomePath",
        "endsWithSlash",
        "searchStat",
        "showHidden",
        "entries",
        "aPath",
        "bPath",
        "aIsDir",
        "bIsDir",
        "entryPath",
        "isDir",
        "icon",
        "userDir",
        "calculateMatchScore",
        "lowerPrefix",
        "value",
        "displayValue",
        "words",
        "acronym",
        "generateSmartMentionSuggestions",
        "allSuggestions",
        "matchScore",
        "generateSuggestions",
        "mentionSuggestions",
        "fileSuggestions",
        "weightedSuggestions",
        "fileSuggestions",
        "unixSuggestions",
        "mentionMatches",
        "weightedSuggestions",
        "seen",
        "deduplicatedResults",
        "completeWith",
        "isDirectory",
        "isDirectory",
        "currentWord",
        "nextSpaceIndex",
        "newInput",
        "partialComplete",
        "completion",
        "newInput",
        "context",
        "nextIndex",
        "nextSuggestion",
        "currentWord",
        "wordEnd",
        "actualEndPos",
        "newInput",
        "currentSuggestions",
        "firstSuggestion",
        "currentWord",
        "wordEnd",
        "actualEndPos",
        "newInput",
        "selectedSuggestion",
        "currentWord",
        "nextSpaceIndex",
        "actualEndPos",
        "newInput",
        "handleNavigation",
        "preview",
        "newInput",
        "nextIndex",
        "nextIndex",
        "selectedSuggestion",
        "isDirectory",
        "currentWordAtContext",
        "newContext",
        "newSuggestions",
        "selectedSuggestion",
        "isDirectory",
        "currentWordAtContext",
        "newContext",
        "newSuggestions",
        "suppressionTime",
        "lastInputRef",
        "inputLengthChange",
        "isHistoryNavigation",
        "context",
        "newSuggestions",
        "contextChanged",
        "shouldAutoTrigger",
        "prefix",
        "shouldAutoHideSingleMatch",
        "currentInput",
        "fullCommand",
        "matches",
        "fullAgent",
        "matches"
      ],
      "lineCount": 1405,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\index.ts",
      "relativePath": "src/index.ts",
      "name": "index.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "module",
          "imports": [
            "createRequire"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./entrypoints/cli.js",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [],
      "dependencies": [],
      "dependents": [],
      "comments": {
        "fileHeader": "Unified CLI entry (lightweight)"
      },
      "functions": [
        {
          "name": "hasFlag",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "flags: string[]"
          ],
          "returnType": "boolean",
          "lineNumber": 8
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "require",
        "pkg"
      ],
      "lineCount": 35,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\messages.ts",
      "relativePath": "src/messages.ts",
      "name": "messages.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "setMessagesGetter",
          "type": "named"
        },
        {
          "name": "getMessagesGetter",
          "type": "named"
        },
        {
          "name": "setMessagesSetter",
          "type": "named"
        },
        {
          "name": "getMessagesSetter",
          "type": "named"
        },
        {
          "name": "setModelConfigChangeHandler",
          "type": "named"
        },
        {
          "name": "triggerModelConfigChange",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/ctx_viz.ts",
        "src/commands/model.tsx",
        "src/components/Bug.tsx",
        "src/screens/REPL.tsx",
        "src/utils/autoCompactCore.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "setMessagesGetter",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "getter: () => Message[]"
          ],
          "lineNumber": 7
        },
        {
          "name": "getMessagesGetter",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "() => Message[]",
          "lineNumber": 11
        },
        {
          "name": "setMessagesSetter",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "setter: React.Dispatch<React.SetStateAction<Message[]>>"
          ],
          "lineNumber": 15
        },
        {
          "name": "getMessagesSetter",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "React.Dispatch<\n  React.SetStateAction<Message[]>\n>",
          "lineNumber": 21
        },
        {
          "name": "setModelConfigChangeHandler",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "handler: () => void"
          ],
          "lineNumber": 30
        },
        {
          "name": "triggerModelConfigChange",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 34
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 39,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\permissions.ts",
      "relativePath": "src/permissions.ts",
      "name": "permissions.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "./hooks/useCanUseTool",
          "imports": [
            "CanUseToolFn"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/BashTool/BashTool",
          "imports": [
            "BashTool",
            "inputSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/commands",
          "imports": [
            "getCommandSubcommandPrefix",
            "splitCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/errors",
          "imports": [
            "AbortError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/permissions/filesystem",
          "imports": [
            "grantWritePermissionForOriginalDir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "bashToolCommandHasExactMatchPermission",
          "type": "named"
        },
        {
          "name": "bashToolCommandHasPermission",
          "type": "named"
        },
        {
          "name": "bashToolHasPermission",
          "type": "named"
        },
        {
          "name": "hasPermissionsToUseTool",
          "type": "named"
        },
        {
          "name": "savePermission",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useCanUseTool.ts",
        "src/Tool.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/utils/commands.ts",
        "src/utils/errors.ts",
        "src/utils/log.ts",
        "src/utils/permissions/filesystem.ts",
        "src/utils/state.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useCanUseTool.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 权限管理系统 - Kode 安全架构的核心组件🏗️ 核心功能：\n- 实现细粒度的工具权限控制机制\n- 提供命令注入检测和安全验证\n- 管理持久化和会话级权限存储\n- 支持安全模式和权限升级流程🔄 依赖关系：\n- 上游：被工具系统和用户交互钩子使用\n- 下游：依赖工具接口、配置管理和文件系统权限📊 使用场景：\n- 工具执行前的权限验证\n- 用户权限授权的安全检查\n- 命令行工具的安全执行控制\n- 文件编辑权限的动态管理🔧 技术实现：\n- 基于白名单的权限控制策略\n- 命令前缀匹配和精确匹配机制\n- 分层权限存储（磁盘持久化 + 内存会话）\n- 命令注入检测和防护机制"
      },
      "functions": [
        {
          "name": "savePermission",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "tool: Tool",
            "input: { [k: string]: unknown }",
            "prefix: string | null"
          ],
          "returnType": "Promise<void>",
          "description": "保存工具权限 - 分层权限存储策略根据工具类型采用不同的权限存储策略：",
          "lineNumber": 337
        },
        {
          "name": "getPermissionKey",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "tool: Tool",
            "input: { [k: string]: unknown }",
            "prefix: string | null"
          ],
          "returnType": "string",
          "description": "生成权限密钥 - 工具权限的唯一标识符生成为不同类型的工具生成标准化的权限密钥，用于权限存储和查找。密钥格式：",
          "lineNumber": 381
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "PermissionResult"
      ],
      "constants": [
        "SAFE_COMMANDS",
        "bashToolCommandHasExactMatchPermission",
        "bashToolCommandHasPermission",
        "bashToolHasPermission",
        "subCommands",
        "commandSubcommandPrefix",
        "prefixResult",
        "hasPermission",
        "hasPermissionsToUseTool",
        "projectConfig",
        "allowedTools",
        "permissionKey",
        "key",
        "projectConfig"
      ],
      "lineCount": 396,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\ProjectOnboarding.tsx",
      "relativePath": "src/ProjectOnboarding.tsx",
      "name": "ProjectOnboarding.tsx",
      "extension": ".tsx",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "OrderedList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "getGlobalConfig",
            "saveCurrentProjectConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/terminalSetup",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/releaseNotes",
          "imports": [
            "RELEASE_NOTES"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "semver",
          "imports": [
            "gt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/file",
          "imports": [
            "isDirEmpty"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/product",
          "imports": [
            "PROJECT_FILE",
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "markProjectOnboardingComplete",
          "type": "named"
        },
        {
          "name": "ProjectOnboarding",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands/terminalSetup.ts",
        "src/utils/theme.ts",
        "src/constants/releaseNotes.ts",
        "src/utils/file.ts",
        "src/constants/macros.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/init.ts",
        "src/commands/terminalSetup.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "markProjectOnboardingComplete",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "Function to mark onboarding as complete",
          "lineNumber": 22
        },
        {
          "name": "markReleaseNotesSeen",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 32
        },
        {
          "name": "ProjectOnboarding",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  workspaceDir,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 44
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "projectConfig",
        "config",
        "projectConfig",
        "showOnboarding",
        "config",
        "previousVersion",
        "hasReleaseNotes",
        "hasClaudeMd",
        "isWorkspaceDirEmpty",
        "needsClaudeMd",
        "showTerminalTip",
        "theme",
        "items"
      ],
      "lineCount": 199,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\query.ts",
      "relativePath": "src/query.ts",
      "name": "query.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "APIAssistantMessage",
            "MessageParam",
            "ToolUseBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./types/common",
          "imports": [
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./components/binary-feedback/utils.js",
          "imports": [
            "messagePairValidForBinaryFeedback",
            "shouldUseBinaryFeedback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./hooks/useCanUseTool",
          "imports": [
            "CanUseToolFn"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/claude.js",
          "imports": [
            "formatSystemPromptWithContext",
            "queryLLM",
            "queryModel"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/generators",
          "imports": [
            "all"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/debugLogger",
          "imports": [
            "debugLogger",
            "markPhase",
            "getCurrentRequest",
            "logUserFriendly"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/model.js",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/messages.js",
          "imports": [
            "createAssistantMessage",
            "createProgressMessage",
            "createToolResultStopMessage",
            "createUserMessage",
            "FullToolUseResult",
            "INTERRUPT_MESSAGE",
            "INTERRUPT_MESSAGE_FOR_TOOL_USE",
            "NormalizedMessage",
            "normalizeMessagesForAPI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/toolExecutionController",
          "imports": [
            "createToolExecutionController"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/autoCompactCore",
          "imports": [
            "checkAutoCompact"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "query",
          "type": "named"
        },
        {
          "name": "runToolUse",
          "type": "named"
        },
        {
          "name": "normalizeToolInput",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/hooks/useCanUseTool.ts",
        "src/services/systemReminder.ts",
        "src/utils/generators.ts",
        "src/utils/log.ts",
        "src/utils/debugLogger.ts",
        "src/utils/toolExecutionController.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/state.ts",
        "src/utils/autoCompactCore.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands.ts",
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/binary-feedback/utils.ts",
        "src/components/Bug.tsx",
        "src/components/Message.tsx",
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx",
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/components/PromptInput.tsx",
        "src/hooks/useCanUseTool.ts",
        "src/hooks/useLogMessages.ts",
        "src/messages.ts",
        "src/services/claude.ts",
        "src/services/vcr.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/ask.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/messageContextManager.ts",
        "src/utils/thinking.ts",
        "src/utils/tokens.ts"
      ],
      "comments": {
        "fileHeader": "从Anthropic SDK导入消息相关类型"
      },
      "functions": [
        {
          "name": "queryWithBinaryFeedback",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "toolUseContext: ExtendedToolUseContext",
            "getAssistantResponse: () => Promise<AssistantMessage>",
            "getBinaryFeedbackResponse: (\n    m1: AssistantMessage,\n    m2: AssistantMessage,\n  ) => Promise<BinaryFeedbackResult>"
          ],
          "returnType": "Promise<BinaryFeedbackResult>",
          "description": "Returns a message if we got one, or `null` if the user cancelled",
          "lineNumber": 131
        },
        {
          "name": "query",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "messages: Message[]",
            "systemPrompt: string[]",
            "context: { [k: string]: string }",
            "canUseTool: CanUseToolFn",
            "toolUseContext: ExtendedToolUseContext",
            "getBinaryFeedbackResponse: (\n    m1: AssistantMessage,\n    m2: AssistantMessage,\n  ) => Promise<BinaryFeedbackResult>"
          ],
          "returnType": "AsyncGenerator<Message, void>",
          "description": "The rules of thinking are lengthy and fortuitous. They require plenty of thinking",
          "lineNumber": 184
        },
        {
          "name": "getAssistantResponse",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 249
        },
        {
          "name": "runToolsConcurrently",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "toolUseMessages: ToolUseBlock[]",
            "assistantMessage: AssistantMessage",
            "canUseTool: CanUseToolFn",
            "toolUseContext: ExtendedToolUseContext",
            "shouldSkipPermissionCheck: boolean"
          ],
          "returnType": "AsyncGenerator<Message, void>",
          "lineNumber": 368
        },
        {
          "name": "runToolsSerially",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "toolUseMessages: ToolUseBlock[]",
            "assistantMessage: AssistantMessage",
            "canUseTool: CanUseToolFn",
            "toolUseContext: ExtendedToolUseContext",
            "shouldSkipPermissionCheck: boolean"
          ],
          "returnType": "AsyncGenerator<Message, void>",
          "lineNumber": 390
        },
        {
          "name": "runToolUse",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "toolUse: ToolUseBlock",
            "siblingToolUseIDs: Set<string>",
            "assistantMessage: AssistantMessage",
            "canUseTool: CanUseToolFn",
            "toolUseContext: ExtendedToolUseContext",
            "shouldSkipPermissionCheck: boolean"
          ],
          "returnType": "AsyncGenerator<Message, void>",
          "lineNumber": 409
        },
        {
          "name": "normalizeToolInput",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "tool: Tool",
            "input: { [key: string]: boolean | string | number }"
          ],
          "returnType": "{ [key: string]: boolean | string | number }",
          "description": "TODO: Generalize this to all tools",
          "lineNumber": 554
        },
        {
          "name": "checkPermissionsAndCallTool",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "tool: Tool",
            "toolUseID: string",
            "siblingToolUseIDs: Set<string>",
            "input: { [key: string]: boolean | string | number }",
            "context: ToolUseContext",
            "canUseTool: CanUseToolFn",
            "assistantMessage: AssistantMessage",
            "shouldSkipPermissionCheck: boolean"
          ],
          "returnType": "AsyncGenerator<UserMessage | ProgressMessage, void>",
          "lineNumber": 571
        },
        {
          "name": "formatError",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "error: unknown"
          ],
          "returnType": "string",
          "lineNumber": 689
        }
      ],
      "classes": [],
      "interfaces": [
        "ExtendedToolUseContext"
      ],
      "types": [
        "Response",
        "UserMessage",
        "AssistantMessage",
        "BinaryFeedbackResult",
        "ProgressMessage",
        "Message"
      ],
      "constants": [
        "MAX_TOOL_USE_CONCURRENCY",
        "assistantMessage",
        "currentRequest",
        "msg",
        "lastUserMessage",
        "result",
        "assistantMessage",
        "shouldSkipPermissionCheck",
        "toolUseMessages",
        "toolResults",
        "canRunConcurrently",
        "orderedToolResults",
        "aIndex",
        "bIndex",
        "currentRequest",
        "toolName",
        "tool",
        "toolInput",
        "message",
        "cancelMessage",
        "errorMessage",
        "isValidInput",
        "normalizedInput",
        "isValidCall",
        "permissionResult",
        "generator",
        "content",
        "parts",
        "fullMessage",
        "halfLength",
        "start",
        "end"
      ],
      "lineCount": 709,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\screens\\Doctor.tsx",
      "relativePath": "src/screens/Doctor.tsx",
      "name": "Doctor.tsx",
      "extension": ".tsx",
      "directory": "src/screens",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useEffect",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/PressEnterToContinue",
          "imports": [
            "PressEnterToContinue"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Doctor",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/PressEnterToContinue.tsx"
      ],
      "dependents": [
        "src/commands/doctor.ts",
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "Doctor",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ onDone, doctorMode = false }"
          ],
          "returnType": "React.ReactNode",
          "description": "Interactive options removed; simplified status-only doctor",
          "lineNumber": 14
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "theme"
      ],
      "lineCount": 43,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\screens\\LogList.tsx",
      "relativePath": "src/screens/LogList.tsx",
      "name": "LogList.tsx",
      "extension": ".tsx",
      "directory": "src/screens",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useEffect",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "CACHE_PATHS"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/LogSelector",
          "imports": [
            "LogSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/logs",
          "imports": [
            "LogOption",
            "LogListProps"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/log",
          "imports": [
            "loadLogList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "LogList",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/components/LogSelector.tsx",
        "src/types/logs.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "LogList",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{ context, type, logNumber }"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 13
        },
        {
          "name": "onSelect",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "index: number"
          ],
          "returnType": "void",
          "lineNumber": 46
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "log",
        "log"
      ],
      "lineCount": 69,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\screens\\REPL.tsx",
      "relativePath": "src/screens/REPL.tsx",
      "name": "REPL.tsx",
      "extension": ".tsx",
      "directory": "src/screens",
      "level": 1,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Newline",
            "Static",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../ProjectOnboarding.js",
          "imports": [
            "default",
            "markProjectOnboardingComplete"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/CostThresholdDialog",
          "imports": [
            "CostThresholdDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useEffect",
            "useMemo",
            "useRef",
            "useState",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Logo",
          "imports": [
            "Logo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Message",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/MessageResponse",
          "imports": [
            "MessageResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/MessageSelector",
          "imports": [
            "MessageSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/permissions/PermissionRequest.js",
          "imports": [
            "PermissionRequest",
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/PromptInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Spinner",
          "imports": [
            "Spinner"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/prompts",
          "imports": [
            "getSystemPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../cost-tracker",
          "imports": [
            "getTotalCost",
            "useCostSummary"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useLogStartupTime",
          "imports": [
            "useLogStartupTime"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../history",
          "imports": [
            "addToHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useApiKeyVerification",
          "imports": [
            "useApiKeyVerification"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useCancelRequest",
          "imports": [
            "useCancelRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useCanUseTool",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useLogMessages",
          "imports": [
            "useLogMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context/PermissionContext",
          "imports": [
            "PermissionProvider"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/ModeIndicator",
          "imports": [
            "ModeIndicator"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "setMessagesGetter",
            "setMessagesSetter",
            "setModelConfigChangeHandler"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query.js",
          "imports": [
            "AssistantMessage",
            "BinaryFeedbackResult",
            "MessageType",
            "ProgressMessage",
            "query"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "WrappedClient"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "getNextAvailableLogForkNumber"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages.js",
          "imports": [
            "getErroredToolUseMessages",
            "getInProgressToolUseIDs",
            "getLastAssistantMessageId",
            "getToolUseID",
            "getUnresolvedToolUseIDs",
            "INTERRUPT_MESSAGE",
            "isNotEmptyMessage",
            "NormalizedMessage",
            "normalizeMessages",
            "normalizeMessagesForAPI",
            "processUserInput",
            "reorderMessages",
            "extractTag",
            "createAssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager",
            "ModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal",
            "updateTerminalTitle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/binary-feedback/BinaryFeedback",
          "imports": [
            "BinaryFeedback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/thinking",
          "imports": [
            "getMaxThinkingTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands/terminalSetup",
          "imports": [
            "handleHashCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/debugLogger",
          "imports": [
            "debugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "REPL",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CostThresholdDialog.tsx",
        "src/commands.ts",
        "src/components/Logo.tsx",
        "src/components/Message.tsx",
        "src/components/MessageResponse.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/PromptInput.tsx",
        "src/components/Spinner.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/cost-tracker.ts",
        "src/hooks/useLogStartupTime.ts",
        "src/history.ts",
        "src/hooks/useApiKeyVerification.ts",
        "src/hooks/useCancelRequest.ts",
        "src/hooks/useCanUseTool.ts",
        "src/hooks/useLogMessages.ts",
        "src/context/PermissionContext.tsx",
        "src/components/ModeIndicator.tsx",
        "src/messages.ts",
        "src/services/mcpClient.ts",
        "src/Tool.ts",
        "src/utils/config.ts",
        "src/constants/macros.ts",
        "src/utils/log.ts",
        "src/utils/model.ts",
        "src/utils/terminal.ts",
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/utils/thinking.ts",
        "src/utils/state.ts",
        "src/commands/terminalSetup.ts",
        "src/utils/debugLogger.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/hooks/useCancelRequest.ts",
        "src/screens/ResumeConversation.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 Kode主界面 - 交互式编程环境的核心REPL实现REPL架构设计：\n┌─────────────────────────────────────────────────────────────────┐\n│                    Kode REPL 系统架构                           │\n├─────────────────────────────────────────────────────────────────┤\n│ 用户输入 → 命令解析 → 工具执行 → AI处理 → 结果展示 → 循环继续   │\n│    ↓        ↓         ↓        ↓        ↓                      │\n│ 输入框 → 斜杠命令 → 权限检查 → 模型调用 → 消息流 → 界面更新     │\n└─────────────────────────────────────────────────────────────────┘核心功能：\n1. 💬 智能对话：与AI模型的流式交互和上下文管理\n2. 🔧 工具集成：文件操作、Shell命令、搜索等开发工具\n3. 🛡️ 权限管理：细粒度的工具使用权限控制和用户确认\n4. 📋 命令系统：内置斜杠命令和宏指令支持\n5. 🔄 对话分支：支持对话历史的分叉和恢复\n6. 📊 成本追踪：API使用成本的实时监控和预警\n7. 🔌 MCP集成：模型上下文协议的工具扩展支持\n8. 🎨 响应式UI：基于Ink的终端界面和实时更新"
      },
      "functions": [
        {
          "name": "REPL",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  commands,\n  safeMode,\n  debug = false,\n  initialForkNumber = 0,\n  initialPrompt,\n  messageLogName,\n  shouldShowPromptInput,\n  tools,\n  verbose: verboseFromCLI,\n  initialMessages,\n  mcpClients = [],\n  isDefaultModel = true,\n  initialUpdateVersion,\n  initialUpdateCommands,\n}"
          ],
          "returnType": "React.ReactNode",
          "description": "REPL - 读取-求值-输出-循环交互式界面",
          "lineNumber": 174
        },
        {
          "name": "onCancel",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "description": "🛑 取消操作处理器 - 统一的请求取消和状态清理取消优先级：",
          "lineNumber": 292
        },
        {
          "name": "onInit",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "description": "🚀 初始化处理器 - REPL启动时的初始化和自动提示执行初始化流程：",
          "lineNumber": 347
        },
        {
          "name": "onQuery",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "newMessages: MessageType[]",
            "passedAbortController: AbortController"
          ],
          "description": "🎯 查询处理器 - 处理用户输入并调用AI模型的核心方法查询流程：",
          "lineNumber": 460
        },
        {
          "name": "shouldRenderStatically",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "message: NormalizedMessage",
            "messages: NormalizedMessage[]",
            "unresolvedToolUseIDs: Set<string>"
          ],
          "returnType": "boolean",
          "description": "🎯 静态渲染判断器 - 决定消息是否应该静态渲染渲染策略：",
          "lineNumber": 939
        },
        {
          "name": "intersects",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "a: Set<A>",
            "b: Set<A>"
          ],
          "returnType": "boolean",
          "description": "🔍 集合交集判断器 - 检查两个集合是否有交集@param a - 第一个集合",
          "lineNumber": 979
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props",
        "BinaryFeedbackContext"
      ],
      "constants": [
        "verbose",
        "updateAvailableVersion",
        "updateCommands",
        "getBinaryFeedbackResponse",
        "readFileTimestamps",
        "totalCost",
        "canUseTool",
        "newAbortController",
        "model",
        "newMessages",
        "lastMessage",
        "controllerToUse",
        "isKodingRequest",
        "lastMessage",
        "content",
        "getMessages",
        "normalizedMessages",
        "unresolvedToolUseIDs",
        "inProgressToolUseIDs",
        "erroredToolUseIDs",
        "messagesJSX",
        "toolUseID",
        "message",
        "type",
        "showingCostDialog",
        "projectConfig",
        "toolUseID",
        "correspondingProgressMessage"
      ],
      "lineCount": 982,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\screens\\ResumeConversation.tsx",
      "relativePath": "src/screens/ResumeConversation.tsx",
      "name": "ResumeConversation.tsx",
      "extension": ".tsx",
      "directory": "src/screens",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./REPL",
          "imports": [
            "REPL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/conversationRecovery",
          "imports": [
            "deserializeMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/LogSelector",
          "imports": [
            "LogSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/logs",
          "imports": [
            "LogOption"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError",
            "getNextAvailableLogForkNumber"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "isDefaultSlowAndCapableModel"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ResumeConversation",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/screens/REPL.tsx",
        "src/utils/conversationRecovery.ts",
        "src/components/LogSelector.tsx",
        "src/types/logs.ts",
        "src/utils/log.ts",
        "src/Tool.ts",
        "src/commands.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/commands/resume.tsx",
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ResumeConversation",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  context,\n  commands,\n  logs,\n  tools,\n  verbose,\n}"
          ],
          "returnType": "React.ReactNode",
          "lineNumber": 20
        },
        {
          "name": "onSelect",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "index: number"
          ],
          "lineNumber": 27
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "log",
        "isDefaultModel"
      ],
      "lineCount": 69,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\adapters\\base.ts",
      "relativePath": "src/services/adapters/base.ts",
      "name": "base.ts",
      "extension": ".ts",
      "directory": "src/services/adapters",
      "level": 2,
      "imports": [
        {
          "source": "../../types/modelCapabilities",
          "imports": [
            "ModelCapabilities",
            "UnifiedRequestParams",
            "UnifiedResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/config",
          "imports": [
            "ModelProfile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelAPIAdapter",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/types/modelCapabilities.ts",
        "src/utils/config.ts",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/services/adapters/chatCompletions.ts",
        "src/services/adapters/responsesAPI.ts",
        "src/services/modelAdapterFactory.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [
        {
          "name": "ModelAPIAdapter",
          "isExported": true,
          "methods": [
            "createRequest",
            "parseResponse",
            "buildTools",
            "getMaxTokensParam",
            "getTemperature",
            "shouldIncludeReasoningEffort",
            "shouldIncludeVerbosity"
          ],
          "lineNumber": 5
        }
      ],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 38,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\adapters\\chatCompletions.ts",
      "relativePath": "src/services/adapters/chatCompletions.ts",
      "name": "chatCompletions.ts",
      "extension": ".ts",
      "directory": "src/services/adapters",
      "level": 2,
      "imports": [
        {
          "source": "./base",
          "imports": [
            "ModelAPIAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../types/modelCapabilities",
          "imports": [
            "UnifiedRequestParams",
            "UnifiedResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ChatCompletionsAdapter",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/adapters/base.ts",
        "src/types/modelCapabilities.ts",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/services/modelAdapterFactory.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [
        {
          "name": "ChatCompletionsAdapter",
          "isExported": true,
          "extends": "ModelAPIAdapter",
          "methods": [
            "createRequest",
            "buildTools",
            "parseResponse",
            "buildMessages"
          ],
          "lineNumber": 6
        }
      ],
      "interfaces": [],
      "types": [],
      "constants": [
        "fullMessages",
        "request",
        "choice",
        "systemMessages"
      ],
      "lineCount": 90,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\adapters\\responsesAPI.ts",
      "relativePath": "src/services/adapters/responsesAPI.ts",
      "name": "responsesAPI.ts",
      "extension": ".ts",
      "directory": "src/services/adapters",
      "level": 2,
      "imports": [
        {
          "source": "./base",
          "imports": [
            "ModelAPIAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../types/modelCapabilities",
          "imports": [
            "UnifiedRequestParams",
            "UnifiedResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ResponsesAPIAdapter",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/adapters/base.ts",
        "src/types/modelCapabilities.ts",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/services/modelAdapterFactory.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [
        {
          "name": "ResponsesAPIAdapter",
          "isExported": true,
          "extends": "ModelAPIAdapter",
          "methods": [
            "createRequest",
            "buildTools",
            "parseResponse",
            "convertMessagesToInput",
            "buildInstructions",
            "parseToolCalls"
          ],
          "lineNumber": 6
        }
      ],
      "interfaces": [],
      "types": [],
      "constants": [
        "systemMessages",
        "nonSystemMessages",
        "request",
        "hasSchema",
        "isCustom",
        "messageItems",
        "toolCalls",
        "systemContent",
        "promptContent"
      ],
      "lineCount": 170,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\browserMocks.ts",
      "relativePath": "src/services/browserMocks.ts",
      "name": "browserMocks.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "mockWindow",
          "type": "named"
        },
        {
          "name": "mockNavigator",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [],
      "comments": {
        "fileHeader": "浏览器API模拟服务\n为@statsig/js-client在Node.js环境中提供必要的浏览器API模拟\n实现了最小化的DOM和BOM API子集，确保第三方客户端库能在CLI环境中正常运行"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "mockDocument",
        "mockWindow",
        "mockNavigator"
      ],
      "lineCount": 120,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\claude.ts",
      "relativePath": "src/services/claude.ts",
      "name": "claude.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/shims/node",
          "imports": [],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk",
          "imports": [
            "default",
            "APIConnectionError",
            "APIError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/bedrock-sdk",
          "imports": [
            "AnthropicBedrock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/vertex-sdk",
          "imports": [
            "AnthropicVertex"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/beta/messages/messages.mjs",
          "imports": [
            "BetaUsage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "createHash",
            "randomUUID",
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "dotenv/config",
          "imports": [],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../cost-tracker",
          "imports": [
            "addToTotalCost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/models",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getAnthropicApiKey",
            "getOrCreateUserID",
            "getGlobalConfig",
            "ModelProfile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getProjectDocs"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError",
            "SESSION_ID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/http",
          "imports": [
            "USER_AGENT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "createAssistantAPIErrorMessage",
            "normalizeContentFromAPI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/tokens",
          "imports": [
            "countTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./vcr",
          "imports": [
            "withVCR"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/debugLogger",
          "imports": [
            "debugLogger",
            "markPhase",
            "getCurrentRequest",
            "logLLMInteraction",
            "logSystemPromptConstruction",
            "logErrorWithDiagnosis"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messageContextManager",
          "imports": [
            "MessageContextManager",
            "createRetentionStrategy"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/lib/BetaMessageStream.mjs",
          "imports": [
            "BetaMessageStream"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./modelAdapterFactory",
          "imports": [
            "ModelAdapterFactory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/modelCapabilities",
          "imports": [
            "UnifiedRequestParams"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./responseStateManager",
          "imports": [
            "responseStateManager",
            "getConversationId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "APIMessage",
            "MessageParam",
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/model",
          "imports": [
            "USE_BEDROCK",
            "USE_VERTEX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/prompts",
          "imports": [
            "getCLISyspromptPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getVertexRegionForModel"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "openai",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "openai/lib/ChatCompletionStream",
          "imports": [
            "ChatCompletionStream"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "@anthropic-ai/sdk/resources/messages/messages",
          "imports": [
            "ContentBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "nanoid",
          "imports": [
            "nanoid"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./openai",
          "imports": [
            "getCompletionWithProfile",
            "getGPT5CompletionWithProfile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/thinking",
          "imports": [
            "getReasoningEffort"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./systemReminder",
          "imports": [
            "generateSystemReminders"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./openai",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "generateKodeContext",
          "type": "named"
        },
        {
          "name": "refreshKodeContext",
          "type": "named"
        },
        {
          "name": "API_ERROR_MESSAGE_PREFIX",
          "type": "named"
        },
        {
          "name": "PROMPT_TOO_LONG_ERROR_MESSAGE",
          "type": "named"
        },
        {
          "name": "CREDIT_BALANCE_TOO_LOW_ERROR_MESSAGE",
          "type": "named"
        },
        {
          "name": "INVALID_API_KEY_ERROR_MESSAGE",
          "type": "named"
        },
        {
          "name": "NO_CONTENT_MESSAGE",
          "type": "named"
        },
        {
          "name": "MAIN_QUERY_TEMPERATURE",
          "type": "named"
        },
        {
          "name": "fetchAnthropicModels",
          "type": "named"
        },
        {
          "name": "verifyApiKey",
          "type": "named"
        },
        {
          "name": "getAnthropicClient",
          "type": "named"
        },
        {
          "name": "resetAnthropicClient",
          "type": "named"
        },
        {
          "name": "userMessageToMessageParam",
          "type": "named"
        },
        {
          "name": "assistantMessageToMessageParam",
          "type": "named"
        },
        {
          "name": "queryLLM",
          "type": "named"
        },
        {
          "name": "formatSystemPromptWithContext",
          "type": "named"
        },
        {
          "name": "queryModel",
          "type": "named"
        },
        {
          "name": "queryQuick",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/cost-tracker.ts",
        "src/constants/models.ts",
        "src/query.ts",
        "src/Tool.ts",
        "src/utils/config.ts",
        "src/context.ts",
        "src/utils/log.ts",
        "src/utils/http.ts",
        "src/utils/messages.tsx",
        "src/utils/tokens.ts",
        "src/services/vcr.ts",
        "src/utils/debugLogger.ts",
        "src/utils/messageContextManager.ts",
        "src/utils/model.ts",
        "src/services/modelAdapterFactory.ts",
        "src/types/modelCapabilities.ts",
        "src/services/responseStateManager.ts",
        "src/constants/prompts.ts",
        "src/services/openai.ts",
        "src/utils/thinking.ts",
        "src/services/systemReminder.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/compact.ts",
        "src/components/binary-feedback/utils.ts",
        "src/components/Bug.tsx",
        "src/components/messages/UserTextMessage.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/PromptInput.tsx",
        "src/hooks/useApiKeyVerification.ts",
        "src/services/oauth.ts",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/BashTool/utils.ts",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/commands.ts",
        "src/utils/exampleCommands.ts",
        "src/utils/messages.tsx",
        "src/utils/terminal.ts"
      ],
      "comments": {
        "fileHeader": "🎯 Claude AI 服务集成 - Kode 多 AI 模型调用的统一服务层🏗️ 核心功能：\n- 实现多平台 AI 模型的统一调用接口（Anthropic、OpenAI、Bedrock、Vertex）\n- 提供智能 API 适配和协议转换能力\n- 管理流式响应处理和上下文状态\n- 支持成本计算和使用统计跟踪\n- 集成重试机制和错误恢复策略\n- 优化提示缓存和上下文压缩🔄 依赖关系：\n- 上游：被查询编排系统和工具系统使用\n- 下游：依赖模型管理、配置系统和适配器工厂📊 使用场景：\n- AI 代理的统一模型调用入口\n- 多平台 AI 服务的抽象适配\n- 流式对话和工具调用处理\n- 成本监控和性能分析🔧 技术实现：\n- 多AI平台统一接口：Anthropic原生SDK + OpenAI兼容适配\n- 智能模型适配器工厂：根据模型能力自动选择最优API\n- GPT-5响应API支持：推理模型的高级特性集成\n- 上下文智能管理：自动缓存和压缩策略\n- 实时调试日志：完整的API调用链路追踪🔄 API调用流程：\n1. 模型解析和配置加载（ModelManager）\n2. 系统提示和上下文构建（formatSystemPromptWithContext）\n3. API适配器选择（Anthropic原生/OpenAI兼容）\n4. 流式/非流式调用执行\n5. 响应解析和成本计算\n6. 错误处理和重试机制📊 上游依赖：\n- ../utils/model.ts（模型管理）\n- ../utils/config.ts（配置系统）\n- ./modelAdapterFactory.ts（适配器工厂）📈 下游使用者：\n- ../query.ts（查询编排）\n- ../tools/（各种工具调用）\n- ../components/（UI组件的API调用）"
      },
      "functions": [
        {
          "name": "isGPT5Model",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "modelName: string"
          ],
          "returnType": "boolean",
          "description": "GPT-5 模型检测函数 - 识别 GPT-5 系列模型通过模型名称前缀判断是否为 GPT-5 系列模型，",
          "lineNumber": 119
        },
        {
          "name": "getModelConfigForDebug",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "model: string"
          ],
          "returnType": "{\n  modelName: string\n  provider: string\n  apiKeyStatus: 'configured' | 'missing' | 'invalid'\n  baseURL?: string\n  maxTokens?: number\n  reasoningEffort?: string\n  isStream?: boolean\n  temperature?: number\n}",
          "description": "模型配置调试信息提取函数 - 为调试日志准备模型配置摘要从模型管理器和全局配置中提取模型的关键配置信息，",
          "lineNumber": 132
        },
        {
          "name": "getMetadata",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "description": "获取 API 请求元数据 - 构建用于追踪的请求标识生成包含用户 ID 和会话 ID 的元数据，用于 API 请求的",
          "lineNumber": 374
        },
        {
          "name": "abortableDelay",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "delayMs: number",
            "signal: AbortSignal"
          ],
          "returnType": "Promise<void>",
          "description": "可中断延迟函数 - 支持取消信号的异步延迟创建支持 AbortSignal 中断的延迟 Promise，用于重试机制",
          "lineNumber": 407
        },
        {
          "name": "getRetryDelay",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "attempt: number",
            "retryAfterHeader: string | null"
          ],
          "returnType": "number",
          "lineNumber": 430
        },
        {
          "name": "shouldRetry",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "error: APIError"
          ],
          "returnType": "boolean",
          "lineNumber": 443
        },
        {
          "name": "withRetry",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "operation: (attempt: number) => Promise<T>",
            "options: RetryOptions"
          ],
          "returnType": "Promise<T>",
          "lineNumber": 477
        },
        {
          "name": "fetchAnthropicModels",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "baseURL: string",
            "apiKey: string"
          ],
          "returnType": "Promise<any[]>",
          "description": "获取 Anthropic 可用模型列表 - 从 API 动态获取支持的模型通过 Anthropic API 获取当前账户可用的模型列表，支持",
          "lineNumber": 547
        },
        {
          "name": "verifyApiKey",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "apiKey: string",
            "baseURL: string",
            "provider: string"
          ],
          "returnType": "Promise<boolean>",
          "description": "API 密钥验证函数 - 多提供商 API 密钥有效性检查通过发送测试请求验证 API 密钥的有效性，支持多种",
          "lineNumber": 631
        },
        {
          "name": "convertAnthropicMessagesToOpenAIMessages",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "messages: (UserMessage | AssistantMessage)[]"
          ],
          "returnType": "(\n  | OpenAI.ChatCompletionMessageParam\n  | OpenAI.ChatCompletionToolMessageParam\n)[]",
          "lineNumber": 724
        },
        {
          "name": "messageReducer",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "previous: OpenAI.ChatCompletionMessage",
            "item: OpenAI.ChatCompletionChunk"
          ],
          "returnType": "OpenAI.ChatCompletionMessage",
          "lineNumber": 810
        },
        {
          "name": "handleMessageStream",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "stream: ChatCompletionStream",
            "signal: AbortSignal"
          ],
          "returnType": "Promise<OpenAI.ChatCompletion>",
          "lineNumber": 854
        },
        {
          "name": "convertOpenAIResponseToAnthropic",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "response: OpenAI.ChatCompletion",
            "tools: Tool[]"
          ],
          "lineNumber": 975
        },
        {
          "name": "getAnthropicClient",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "model: string"
          ],
          "returnType": "Anthropic | AnthropicBedrock | AnthropicVertex",
          "description": "获取Anthropic客户端实例",
          "lineNumber": 1077
        },
        {
          "name": "resetAnthropicClient",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "Reset the Anthropic client to null, forcing a new client to be created on next use",
          "lineNumber": 1164
        },
        {
          "name": "applyCacheControlWithLimits",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "systemBlocks: TextBlockParam[]",
            "messageParams: MessageParam[]"
          ],
          "returnType": "{ systemBlocks: TextBlockParam[]; messageParams: MessageParam[] }",
          "description": "Manage cache control to ensure it doesn't exceed Claude's 4 cache block limit",
          "lineNumber": 1202
        },
        {
          "name": "userMessageToMessageParam",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "message: UserMessage",
            "addCache"
          ],
          "returnType": "MessageParam",
          "lineNumber": 1272
        },
        {
          "name": "assistantMessageToMessageParam",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "message: AssistantMessage",
            "addCache"
          ],
          "returnType": "MessageParam",
          "lineNumber": 1300
        },
        {
          "name": "splitSysPromptPrefix",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "systemPrompt: string[]"
          ],
          "returnType": "string[]",
          "lineNumber": 1328
        },
        {
          "name": "queryLLM",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "messages: (UserMessage | AssistantMessage)[]",
            "systemPrompt: string[]",
            "maxThinkingTokens: number",
            "tools: Tool[]",
            "signal: AbortSignal",
            "options: {\n    safeMode: boolean\n    model: string | import('../utils/config').ModelPointerType\n    prependCLISysprompt: boolean\n    toolUseContext?: ToolUseContext\n  }"
          ],
          "returnType": "Promise<AssistantMessage>",
          "description": "主要的 LLM 查询函数 - Kode AI 调用的统一入口点这是整个系统与 AI 模型交互的核心函数，负责协调所有 AI 相关的操作，",
          "lineNumber": 1376
        },
        {
          "name": "formatSystemPromptWithContext",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "systemPrompt: string[]",
            "context: { [k: string]: string }",
            "agentId: string",
            "skipContextReminders"
          ],
          "returnType": "{ systemPrompt: string[]; reminders: string }",
          "description": "系统提示词与上下文格式化函数",
          "lineNumber": 1516
        },
        {
          "name": "queryLLMWithPromptCaching",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "messages: (UserMessage | AssistantMessage)[]",
            "systemPrompt: string[]",
            "maxThinkingTokens: number",
            "tools: Tool[]",
            "signal: AbortSignal",
            "options: {\n    safeMode: boolean\n    model: string\n    prependCLISysprompt: boolean\n    modelProfile?: ModelProfile | null\n    toolUseContext?: ToolUseContext\n  }"
          ],
          "returnType": "Promise<AssistantMessage>",
          "lineNumber": 1587
        },
        {
          "name": "queryAnthropicNative",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "messages: (UserMessage | AssistantMessage)[]",
            "systemPrompt: string[]",
            "maxThinkingTokens: number",
            "tools: Tool[]",
            "signal: AbortSignal",
            "options: {\n    safeMode: boolean\n    model: string\n    prependCLISysprompt: boolean\n    modelProfile?: ModelProfile | null\n    toolUseContext?: ToolUseContext\n  }"
          ],
          "returnType": "Promise<AssistantMessage>",
          "lineNumber": 1639
        },
        {
          "name": "getAssistantMessageFromError",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "error: unknown"
          ],
          "returnType": "AssistantMessage",
          "lineNumber": 2051
        },
        {
          "name": "addCacheBreakpoints",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "messages: (UserMessage | AssistantMessage)[]"
          ],
          "returnType": "MessageParam[]",
          "lineNumber": 2078
        },
        {
          "name": "queryOpenAI",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "messages: (UserMessage | AssistantMessage)[]",
            "systemPrompt: string[]",
            "maxThinkingTokens: number",
            "tools: Tool[]",
            "signal: AbortSignal",
            "options: {\n    safeMode: boolean\n    model: string\n    prependCLISysprompt: boolean\n    modelProfile?: ModelProfile | null\n    toolUseContext?: ToolUseContext\n  }"
          ],
          "returnType": "Promise<AssistantMessage>",
          "lineNumber": 2088
        },
        {
          "name": "getMaxTokensFromProfile",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "modelProfile: any"
          ],
          "returnType": "number",
          "lineNumber": 2391
        },
        {
          "name": "getModelInputTokenCostUSD",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "model: string"
          ],
          "returnType": "number",
          "lineNumber": 2396
        },
        {
          "name": "getModelOutputTokenCostUSD",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "model: string"
          ],
          "returnType": "number",
          "lineNumber": 2408
        },
        {
          "name": "queryModel",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "modelPointer: import('../utils/config').ModelPointerType",
            "messages: (UserMessage | AssistantMessage)[]",
            "systemPrompt: string[]",
            "signal: AbortSignal"
          ],
          "returnType": "Promise<AssistantMessage>",
          "description": "New unified query functions for model pointer system",
          "lineNumber": 2421
        },
        {
          "name": "queryQuick",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "{\n  systemPrompt = [],\n  userPrompt,\n  assistantPrompt,\n  enablePromptCaching = false,\n  signal,\n}"
          ],
          "returnType": "Promise<AssistantMessage>",
          "description": "Simplified query function using quick model pointer",
          "lineNumber": 2445
        }
      ],
      "classes": [
        {
          "name": "KodeContextManager",
          "isExported": false,
          "methods": [
            "getInstance",
            "initialize",
            "loadProjectDocs",
            "getKodeContext",
            "refreshCache"
          ],
          "description": "Kode 上下文管理器 - 项目文档的智能缓存和访问系统🎯 核心功能：",
          "lineNumber": 198
        }
      ],
      "interfaces": [
        "StreamResponse",
        "RetryOptions"
      ],
      "types": [],
      "constants": [
        "config",
        "modelManager",
        "modelProfile",
        "projectDocs",
        "kodeContextManager",
        "generateKodeContext",
        "refreshKodeContext",
        "API_ERROR_MESSAGE_PREFIX",
        "PROMPT_TOO_LONG_ERROR_MESSAGE",
        "CREDIT_BALANCE_TOO_LOW_ERROR_MESSAGE",
        "INVALID_API_KEY_ERROR_MESSAGE",
        "NO_CONTENT_MESSAGE",
        "PROMPT_CACHING_ENABLED",
        "HAIKU_COST_PER_MILLION_INPUT_TOKENS",
        "HAIKU_COST_PER_MILLION_OUTPUT_TOKENS",
        "HAIKU_COST_PER_MILLION_PROMPT_CACHE_WRITE_TOKENS",
        "HAIKU_COST_PER_MILLION_PROMPT_CACHE_READ_TOKENS",
        "SONNET_COST_PER_MILLION_INPUT_TOKENS",
        "SONNET_COST_PER_MILLION_OUTPUT_TOKENS",
        "SONNET_COST_PER_MILLION_PROMPT_CACHE_WRITE_TOKENS",
        "SONNET_COST_PER_MILLION_PROMPT_CACHE_READ_TOKENS",
        "MAIN_QUERY_TEMPERATURE",
        "MAX_RETRIES",
        "BASE_DELAY_MS",
        "timeoutId",
        "abortHandler",
        "seconds",
        "shouldRetryHeader",
        "maxRetries",
        "retryAfter",
        "delayMs",
        "modelsURL",
        "response",
        "data",
        "headers",
        "modelsURL",
        "response",
        "clientConfig",
        "anthropic",
        "model",
        "messages",
        "openaiMessages",
        "toolResults",
        "finalMessages",
        "reduce",
        "accArray",
        "choice",
        "streamStartTime",
        "message",
        "tool",
        "toolName",
        "finalMessage",
        "config",
        "provider",
        "region",
        "defaultHeaders",
        "ARGS",
        "client",
        "vertexArgs",
        "client",
        "modelManager",
        "modelProfile",
        "clientConfig",
        "maxCacheBlocks",
        "processedSystemBlocks",
        "processedMessageParams",
        "processedContent",
        "shouldCache",
        "systemPromptFirstBlock",
        "systemPromptRest",
        "modelManager",
        "modelResolution",
        "modelProfile",
        "resolvedModel",
        "toolUseContext",
        "conversationId",
        "previousResponseId",
        "currentRequest",
        "result",
        "enhancedPrompt",
        "modelManager",
        "modelProfile",
        "persistencePrompts",
        "hasContext",
        "kodeContext",
        "reminderMessages",
        "filteredContext",
        "config",
        "modelManager",
        "toolUseContext",
        "modelProfile",
        "config",
        "modelManager",
        "toolUseContext",
        "modelProfile",
        "clientConfig",
        "errorDetails",
        "system",
        "toolSchemas",
        "anthropicMessages",
        "startIncludingRetries",
        "params",
        "stream",
        "contentBlocks",
        "inputJSONBuffers",
        "blockIndex",
        "currentBuffer",
        "stopIndex",
        "block",
        "jsonStr",
        "ttftMs",
        "durationMs",
        "content",
        "assistantMessage",
        "systemMessages",
        "inputTokens",
        "outputTokens",
        "cacheCreationInputTokens",
        "cacheReadInputTokens",
        "costUSD",
        "config",
        "modelManager",
        "toolUseContext",
        "modelProfile",
        "currentRequest",
        "system",
        "toolSchemas",
        "openaiSystem",
        "openaiMessages",
        "startIncludingRetries",
        "maxTokens",
        "isGPT5",
        "opts",
        "reasoningEffort",
        "USE_NEW_ADAPTER_SYSTEM",
        "adapter",
        "unifiedParams",
        "request",
        "response",
        "unifiedResponse",
        "apiMessage",
        "assistantMsg",
        "s",
        "r",
        "completionFunction",
        "s",
        "r",
        "errorDetails",
        "durationMs",
        "durationMsIncludingRetries",
        "inputTokens",
        "outputTokens",
        "cacheReadInputTokens",
        "cacheCreationInputTokens",
        "costUSD",
        "modelInfo",
        "modelInfo",
        "messages"
      ],
      "lineCount": 2468,
      "complexity": "high"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\customCommands.ts",
      "relativePath": "src/services/customCommands.ts",
      "name": "customCommands.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "MessageParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "execFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "util",
          "imports": [
            "promisify"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "executeBashCommands",
          "type": "named"
        },
        {
          "name": "resolveFileReferences",
          "type": "named"
        },
        {
          "name": "CustomCommandFrontmatter",
          "type": "named"
        },
        {
          "name": "CustomCommandWithScope",
          "type": "named"
        },
        {
          "name": "CustomCommandFile",
          "type": "named"
        },
        {
          "name": "parseFrontmatter",
          "type": "named"
        },
        {
          "name": "loadCustomCommands",
          "type": "named"
        },
        {
          "name": "reloadCustomCommands",
          "type": "named"
        },
        {
          "name": "getCustomCommandDirectories",
          "type": "named"
        },
        {
          "name": "hasCustomCommands",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/commands/refreshCommands.ts",
        "src/commands.ts",
        "src/components/Help.tsx",
        "src/utils/messages.tsx"
      ],
      "comments": {
        "fileHeader": "导入文件系统操作函数"
      },
      "functions": [
        {
          "name": "executeBashCommands",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "content: string"
          ],
          "returnType": "Promise<string>",
          "description": "Execute bash commands found in custom command content using !`command` syntaxThis function processes dynamic command execution within custom commands,",
          "lineNumber": 33
        },
        {
          "name": "resolveFileReferences",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "content: string"
          ],
          "returnType": "Promise<string>",
          "description": "Resolve file references using @filepath syntax within custom commandsThis function implements file inclusion for custom commands, similar to how",
          "lineNumber": 87
        },
        {
          "name": "validateAllowedTools",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "allowedTools: string[] | undefined"
          ],
          "returnType": "boolean",
          "description": "Validate and process allowed-tools specification from frontmatterThis function handles tool restriction specifications in custom commands.",
          "lineNumber": 146
        },
        {
          "name": "parseFrontmatter",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "content: string"
          ],
          "returnType": "{\n  frontmatter: CustomCommandFrontmatter\n  content: string\n}",
          "description": "Parse YAML frontmatter from markdown contentThis function extracts and parses YAML frontmatter from markdown files,",
          "lineNumber": 242
        },
        {
          "name": "scanMarkdownFiles",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "args: string[]",
            "directory: string",
            "signal: AbortSignal"
          ],
          "returnType": "Promise<string[]>",
          "description": "Scan directory for markdown files using find commandThis function discovers .md files in the specified directory using the",
          "lineNumber": 339
        },
        {
          "name": "createCustomCommand",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "frontmatter: CustomCommandFrontmatter",
            "content: string",
            "filePath: string",
            "baseDir: string"
          ],
          "returnType": "CustomCommandWithScope | null",
          "description": "Create a Command object from custom command file dataThis function transforms parsed custom command data into a Command object",
          "lineNumber": 381
        },
        {
          "name": "getCustomCommandDirectories",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "{\n  userClaude: string\n  projectClaude: string\n  userKode: string\n  projectKode: string\n}",
          "description": "Get custom command directories for help and diagnostic purposesThis function returns the standard directory paths where custom commands",
          "lineNumber": 677
        },
        {
          "name": "hasCustomCommands",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "boolean",
          "description": "Check if custom commands are available in either directoryThis function provides a quick way to determine if custom commands",
          "lineNumber": 700
        }
      ],
      "classes": [],
      "interfaces": [
        "CustomCommandFrontmatter",
        "CustomCommandWithScope",
        "CustomCommandFile"
      ],
      "types": [],
      "constants": [
        "execFileAsync",
        "bashCommandRegex",
        "matches",
        "fullMatch",
        "command",
        "parts",
        "cmd",
        "args",
        "output",
        "fileRefRegex",
        "matches",
        "fullMatch",
        "filePath",
        "fullPath",
        "fileContent",
        "formattedContent",
        "frontmatterRegex",
        "match",
        "yamlContent",
        "markdownContent",
        "frontmatter",
        "lines",
        "trimmed",
        "item",
        "colonIndex",
        "key",
        "value",
        "items",
        "relativePath",
        "pathParts",
        "fileName",
        "userClaudeDir",
        "userKodeDir",
        "scope",
        "prefix",
        "namespace",
        "description",
        "enabled",
        "hidden",
        "aliases",
        "progressMessage",
        "argNames",
        "command",
        "argValues",
        "value",
        "allowedTools",
        "allowedToolsStr",
        "loadCustomCommands",
        "userClaudeDir",
        "projectClaudeDir",
        "userKodeDir",
        "projectKodeDir",
        "abortController",
        "timeout",
        "startTime",
        "projectFiles",
        "userFiles",
        "allFiles",
        "duration",
        "commands",
        "content",
        "baseDir",
        "command",
        "content",
        "baseDir",
        "command",
        "enabledCommands",
        "cwd",
        "userClaudeDir",
        "projectClaudeDir",
        "userKodeDir",
        "projectKodeDir",
        "reloadCustomCommands"
      ],
      "lineCount": 704,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\fileFreshness.ts",
      "relativePath": "src/services/fileFreshness.ts",
      "name": "fileFreshness.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "statSync",
            "existsSync",
            "watchFile",
            "unwatchFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/systemReminder",
          "imports": [
            "emitReminderEvent",
            "systemReminderService"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentStorage",
          "imports": [
            "getAgentFilePath"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "fileFreshnessService",
          "type": "named"
        },
        {
          "name": "recordFileRead",
          "type": "named"
        },
        {
          "name": "recordFileEdit",
          "type": "named"
        },
        {
          "name": "checkFileFreshness",
          "type": "named"
        },
        {
          "name": "generateFileModificationReminder",
          "type": "named"
        },
        {
          "name": "resetFileFreshnessSession",
          "type": "named"
        },
        {
          "name": "startWatchingTodoFile",
          "type": "named"
        },
        {
          "name": "stopWatchingTodoFile",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/systemReminder.ts",
        "src/utils/agentStorage.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/fileRecoveryCore.ts"
      ],
      "comments": {
        "fileHeader": "文件新鲜度服务 - 文件变更检测和冲突管理系统"
      },
      "functions": [],
      "classes": [
        {
          "name": "FileFreshnessService",
          "isExported": false,
          "methods": [
            "setupEventListeners",
            "recordFileRead",
            "checkFileFreshness",
            "recordFileEdit",
            "generateFileModificationReminder",
            "getConflictedFiles",
            "getSessionFiles",
            "resetSession",
            "startWatchingTodoFile",
            "stopWatchingTodoFile",
            "getFileInfo",
            "isFileTracked",
            "getImportantFiles",
            "isValidForRecovery"
          ],
          "description": "文件新鲜度服务类",
          "lineNumber": 39
        }
      ],
      "interfaces": [
        "FileTimestamp",
        "FileFreshnessState"
      ],
      "types": [],
      "constants": [
        "stats",
        "timestamp",
        "recorded",
        "currentStats",
        "isFresh",
        "conflict",
        "now",
        "stats",
        "existing",
        "timestamp",
        "recorded",
        "currentStats",
        "isModified",
        "TIME_TOLERANCE_MS",
        "filePath",
        "reminder",
        "filePath",
        "fileFreshnessService",
        "recordFileRead",
        "recordFileEdit",
        "checkFileFreshness",
        "generateFileModificationReminder",
        "resetFileFreshnessSession",
        "startWatchingTodoFile",
        "stopWatchingTodoFile"
      ],
      "lineCount": 432,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\gpt5ConnectionTest.ts",
      "relativePath": "src/services/gpt5ConnectionTest.ts",
      "name": "gpt5ConnectionTest.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "./openai",
          "imports": [
            "getModelFeatures"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ConnectionTestResult",
          "type": "named"
        },
        {
          "name": "GPT5TestConfig",
          "type": "named"
        },
        {
          "name": "testGPT5Connection",
          "type": "named"
        },
        {
          "name": "validateGPT5Config",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/openai.ts"
      ],
      "dependents": [
        "src/components/ModelSelector.tsx"
      ],
      "comments": {
        "fileHeader": "🔥 GPT-5 Connection Test Service\nSpecialized connection testing for GPT-5 models that supports both\nResponses API and Chat Completions API with proper fallback handling."
      },
      "functions": [
        {
          "name": "testGPT5Connection",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "config: GPT5TestConfig"
          ],
          "returnType": "Promise<ConnectionTestResult>",
          "description": "Test GPT-5 model connection with intelligent API selection",
          "lineNumber": 30
        },
        {
          "name": "testResponsesAPI",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "config: GPT5TestConfig",
            "baseURL: string",
            "startTime: number"
          ],
          "returnType": "Promise<ConnectionTestResult>",
          "description": "Test using GPT-5 Responses API",
          "lineNumber": 73
        },
        {
          "name": "testChatCompletionsAPI",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "config: GPT5TestConfig",
            "baseURL: string",
            "startTime: number"
          ],
          "returnType": "Promise<ConnectionTestResult>",
          "description": "Test using Chat Completions API with GPT-5 compatibility",
          "lineNumber": 182
        },
        {
          "name": "validateGPT5Config",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "config: GPT5TestConfig"
          ],
          "returnType": "{ valid: boolean; errors: string[] }",
          "description": "Quick validation for GPT-5 configuration",
          "lineNumber": 300
        }
      ],
      "classes": [],
      "interfaces": [
        "ConnectionTestResult",
        "GPT5TestConfig"
      ],
      "types": [],
      "constants": [
        "startTime",
        "isGPT5",
        "modelFeatures",
        "baseURL",
        "isOfficialOpenAI",
        "responsesResult",
        "testURL",
        "testPayload",
        "headers",
        "response",
        "responseTime",
        "data",
        "messageOutput",
        "textContent",
        "containsYes",
        "errorData",
        "errorMessage",
        "testURL",
        "isGPT5",
        "testPayload",
        "headers",
        "response",
        "responseTime",
        "data",
        "responseContent",
        "containsYes",
        "errorData",
        "errorMessage",
        "errors",
        "isGPT5"
      ],
      "lineCount": 340,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\mcpClient.ts",
      "relativePath": "src/services/mcpClient.ts",
      "name": "mcpClient.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "zipObject"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "McpServerConfig",
            "saveCurrentProjectConfig",
            "getGlobalConfig",
            "saveGlobalConfig",
            "getMcprcConfig",
            "addMcprcServerForTesting",
            "removeMcprcServerForTesting"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ImageBlockParam",
            "MessageParam",
            "ToolResultBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/client/index.js",
          "imports": [
            "Client"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/client/stdio.js",
          "imports": [
            "StdioClientTransport"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/client/sse.js",
          "imports": [
            "SSEClientTransport"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/types.js",
          "imports": [
            "CallToolResultSchema",
            "ClientRequest",
            "ListPromptsResult",
            "ListPromptsResultSchema",
            "ListToolsResult",
            "ListToolsResultSchema",
            "Result",
            "ResultSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize",
            "pickBy"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../tools/MCPTool/MCPTool",
          "imports": [
            "MCPTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logMCPError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product.js",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "parseEnvVars",
          "type": "named"
        },
        {
          "name": "ensureConfigScope",
          "type": "named"
        },
        {
          "name": "addMcpServer",
          "type": "named"
        },
        {
          "name": "removeMcpServer",
          "type": "named"
        },
        {
          "name": "listMCPServers",
          "type": "named"
        },
        {
          "name": "getMcpServer",
          "type": "named"
        },
        {
          "name": "getMcprcServerStatus",
          "type": "named"
        },
        {
          "name": "getClients",
          "type": "named"
        },
        {
          "name": "getMCPTools",
          "type": "named"
        },
        {
          "name": "getMCPCommands",
          "type": "named"
        },
        {
          "name": "runCommand",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/utils/json.ts",
        "src/Tool.ts",
        "src/tools/MCPTool/MCPTool.tsx",
        "src/utils/log.ts",
        "src/commands.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/mcp.ts",
        "src/commands.ts",
        "src/components/Logo.tsx",
        "src/entrypoints/cli.tsx",
        "src/screens/REPL.tsx",
        "src/services/mcpServerApproval.tsx",
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 MCP 客户端服务 - 模型上下文协议的核心集成层🏗️ 核心功能：\n- 实现 MCP (Model Context Protocol) 协议的客户端集成\n- 提供多作用域的 MCP 服务器配置管理\n- 建立和维护与 MCP 服务器的连接池\n- 将 MCP 工具和提示转换为 Kode 统一格式\n- 支持多传输协议和错误恢复机制🔄 依赖关系：\n- 上游：被工具系统和命令系统使用\n- 下游：依赖配置管理和日志系统📊 使用场景：\n- 外部工具的 MCP 协议集成\n- 分布式 AI 服务的统一访问\n- 跨项目的工具共享和管理\n- 安全的外部资源访问控制🔧 技术实现：\n- 协议抽象：MCP 协议的完整实现\n- 传输层支持：stdio 和 SSE 多传输方式\n- 连接池管理：自动重连和故障转移\n- 权限控制：基于作用域的访问管理\n- 错误恢复：连接超时和重试机制🌐 MCP (Model Context Protocol) 协议特性：\n- 让 AI 模型安全地访问外部数据和工具\n- 标准化 AI 应用与外部服务的集成方式\n- 支持工具调用、提示模板、资源访问等功能📁 支持的配置作用域：\n- project: 项目级配置 (.kode.json)\n- global: 全局配置 (~/.kode.json)\n- mcprc: 项目根目录的 .mcprc 文件🔌 支持的传输协议：\n- stdio: 标准输入输出（子进程）\n- sse: 服务器发送事件（HTTP）"
      },
      "functions": [
        {
          "name": "parseEnvVars",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "rawEnvArgs: string[] | undefined"
          ],
          "returnType": "Record<string, string>",
          "description": "解析环境变量参数",
          "lineNumber": 97
        },
        {
          "name": "ensureConfigScope",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "scope: string"
          ],
          "returnType": "ConfigScope",
          "description": "确保配置作用域有效性",
          "lineNumber": 138
        },
        {
          "name": "addMcpServer",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "name: McpName",
            "server: McpServerConfig",
            "scope: ConfigScope"
          ],
          "returnType": "void",
          "description": "添加 MCP 服务器配置 - 在指定作用域中注册新的 MCP 服务器根据指定的作用域将 MCP 服务器配置保存到相应的配置文件中，",
          "lineNumber": 173
        },
        {
          "name": "removeMcpServer",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "name: McpName",
            "scope: ConfigScope"
          ],
          "returnType": "void",
          "description": "移除 MCP 服务器配置 - 从指定作用域中删除 MCP 服务器根据指定的作用域从相应的配置文件中删除 MCP 服务器配置，",
          "lineNumber": 245
        },
        {
          "name": "listMCPServers",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "Record<string, McpServerConfig>",
          "description": "列出所有 MCP 服务器配置 - 合并所有作用域的服务器配置按照优先级顺序合并所有作用域的 MCP 服务器配置，",
          "lineNumber": 317
        },
        {
          "name": "getMcpServer",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "name: McpName"
          ],
          "returnType": "ScopedMcpServerConfig | undefined",
          "description": "获取指定名称的 MCP 服务器配置 - 包含作用域信息的配置查询按照优先级顺序查找指定名称的 MCP 服务器配置，",
          "lineNumber": 357
        },
        {
          "name": "connectToServer",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "name: string",
            "serverRef: McpServerConfig"
          ],
          "returnType": "Promise<Client>",
          "description": "连接到MCP服务器",
          "lineNumber": 391
        },
        {
          "name": "getMcprcServerStatus",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "serverName: string"
          ],
          "returnType": "'approved' | 'rejected' | 'pending'",
          "description": "获取 .mcprc 服务器的审批状态 - 检查服务器的安全审批状态检查指定 .mcprc 服务器的用户审批状态，用于安全控制",
          "lineNumber": 485
        },
        {
          "name": "requestAll",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "req: ClientRequest",
            "resultSchema: ResultSchemaT",
            "requiredCapability: string"
          ],
          "returnType": "Promise<{ client: ConnectedClient; result: ResultT }[]>",
          "lineNumber": 558
        },
        {
          "name": "callMCPTool",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "{\n  client: { client, name },\n  tool,\n  args,\n}"
          ],
          "returnType": "Promise<ToolResultBlockParam['content']>",
          "description": "调用 MCP 工具 - 执行远程 MCP 工具并处理结果通过 MCP 协议调用远程工具，处理不同的响应格式，",
          "lineNumber": 702
        },
        {
          "name": "runCommand",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "{ name, client }",
            "args: Record<string, string>"
          ],
          "returnType": "Promise<MessageParam[]>",
          "description": "运行 MCP 命令 - 执行 MCP 提示并转换结果格式通过 MCP 协议执行指定的提示命令，将返回的 MCP 消息",
          "lineNumber": 830
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "McpName",
        "ConfigScope",
        "ScopedMcpServerConfig",
        "ConnectedClient",
        "FailedClient",
        "WrappedClient"
      ],
      "constants": [
        "parsedEnv",
        "VALID_SCOPES",
        "EXTERNAL_SCOPES",
        "scopesToCheck",
        "mcprcPath",
        "mcprcContent",
        "existingConfig",
        "config",
        "config",
        "mcprcPath",
        "mcprcContent",
        "mcprcConfig",
        "config",
        "config",
        "globalConfig",
        "mcprcConfig",
        "projectConfig",
        "projectConfig",
        "mcprcConfig",
        "globalConfig",
        "transport",
        "client",
        "CONNECTION_TIMEOUT_MS",
        "connectPromise",
        "timeoutPromise",
        "timeoutId",
        "errorText",
        "config",
        "getClients",
        "globalServers",
        "mcprcServers",
        "projectServers",
        "approvedMcprcServers",
        "allServers",
        "client",
        "clients",
        "results",
        "capabilities",
        "getMCPTools",
        "toolsList",
        "data",
        "result",
        "errorMessage",
        "getMCPCommands",
        "results",
        "argNames",
        "argsArray",
        "result"
      ],
      "lineCount": 866,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\mcpServerApproval.tsx",
      "relativePath": "src/services/mcpServerApproval.tsx",
      "name": "mcpServerApproval.tsx",
      "extension": ".tsx",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/MCPServerMultiselectDialog",
          "imports": [
            "MCPServerMultiselectDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/MCPServerApprovalDialog",
          "imports": [
            "MCPServerApprovalDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./mcpClient",
          "imports": [
            "getMcprcServerStatus"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getMcprcConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "handleMcprcServerApprovals",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/MCPServerMultiselectDialog.tsx",
        "src/components/MCPServerApprovalDialog.tsx",
        "src/services/mcpClient.ts",
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "handleMcprcServerApprovals",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<void>",
          "lineNumber": 8
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "mcprcServers",
        "pendingServers",
        "clearScreenAndResolve",
        "result",
        "result"
      ],
      "lineCount": 51,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\mentionProcessor.ts",
      "relativePath": "src/services/mentionProcessor.ts",
      "name": "mentionProcessor.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "./systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "getAvailableAgentTypes"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MentionContext",
          "type": "named"
        },
        {
          "name": "ProcessedMentions",
          "type": "named"
        },
        {
          "name": "mentionProcessor",
          "type": "named"
        },
        {
          "name": "processMentions",
          "type": "named"
        },
        {
          "name": "clearMentionCache",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/systemReminder.ts",
        "src/utils/agentLoader.ts",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/utils/messages.tsx"
      ],
      "comments": {
        "fileHeader": "@提及处理服务\n通过系统提醒基础架构处理@代理和@文件的提及\n设计与现有的事件驱动架构自然集成，支持多种@提及格式：\n- @run-agent-xxx：运行特定代理\n- @agent-xxx：传统代理格式\n- @ask-model：咨询特定模型\n- @filename：文件路径引用"
      },
      "functions": [],
      "classes": [
        {
          "name": "MentionProcessorService",
          "isExported": false,
          "methods": [
            "processMentions",
            "resolveFilePath",
            "refreshAgentCache",
            "extractAgentMentions",
            "emitAgentMentionEvent",
            "clearCache"
          ],
          "description": "@提及处理服务类",
          "lineNumber": 39
        }
      ],
      "interfaces": [
        "MentionContext",
        "ProcessedMentions"
      ],
      "types": [],
      "constants": [
        "result",
        "agentMentions",
        "fileMatches",
        "processedAgentMentions",
        "mention",
        "filePath",
        "now",
        "agents",
        "previousCacheSize",
        "mentions",
        "runAgentMatches",
        "mention",
        "agentType",
        "agentMatches",
        "mention",
        "agentType",
        "askModelMatches",
        "mention",
        "eventData",
        "mentionProcessor",
        "processMentions",
        "clearMentionCache"
      ],
      "lineCount": 298,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\modelAdapterFactory.ts",
      "relativePath": "src/services/modelAdapterFactory.ts",
      "name": "modelAdapterFactory.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "./adapters/base",
          "imports": [
            "ModelAPIAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./adapters/responsesAPI",
          "imports": [
            "ResponsesAPIAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./adapters/chatCompletions",
          "imports": [
            "ChatCompletionsAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/modelCapabilities",
          "imports": [
            "getModelCapabilities"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "ModelProfile",
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/modelCapabilities",
          "imports": [
            "ModelCapabilities"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelAdapterFactory",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/adapters/base.ts",
        "src/services/adapters/responsesAPI.ts",
        "src/services/adapters/chatCompletions.ts",
        "src/constants/modelCapabilities.ts",
        "src/utils/config.ts",
        "src/types/modelCapabilities.ts"
      ],
      "dependents": [
        "src/services/claude.ts",
        "src/test/testAdapters.ts"
      ],
      "comments": {
        "fileHeader": "🎯 模型适配器工厂 - AI 模型 API 的统一访问和适配层🏗️ 核心功能：\n- 实现多 AI 模型的统一适配器创建机制\n- 提供智能 API 架构选择和版本兼容\n- 管理不同 AI 服务商的 API 差异适配\n- 支持新旧 API 架构的平滑过渡和回退🔄 依赖关系：\n- 上游：被 Claude 服务和查询系统使用\n- 下游：依赖模型能力定义和适配器实现📊 使用场景：\n- 根据模型配置自动选择最优 API 接口\n- 新模型集成时的适配器创建\n- API 版本升级的兼容性管理\n- 第三方服务的 API 差异处理🔧 技术实现：\n- 工厂模式：基于配置的适配器实例化\n- 策略模式：多种 API 架构的动态选择\n- 能力驱动：基于模型能力的智能适配\n- 回退机制：API 不可用时的自动降级🔄 支持的 API 类型：\n- responses_api: 新一代流式响应 API（支持工具调用、思考等高级特性）\n- chat_completions: 传统聊天完成 API（通用兼容性好）📡 适配器选择逻辑：\n1. 检查模型能力定义\n2. 判断 API 端点类型（官方/第三方）\n3. 选择最优 API 架构\n4. 创建相应适配器实例"
      },
      "functions": [],
      "classes": [
        {
          "name": "ModelAdapterFactory",
          "isExported": true,
          "methods": [
            "createAdapter",
            "determineAPIType",
            "shouldUseResponsesAPI"
          ],
          "description": "模型适配器工厂类 - 智能 API 适配器创建的核心实现负责根据模型配置和能力创建合适的 API 适配器，提供统一的",
          "lineNumber": 60
        }
      ],
      "interfaces": [],
      "types": [],
      "constants": [
        "capabilities",
        "apiType",
        "isOfficialOpenAI",
        "capabilities",
        "apiType"
      ],
      "lineCount": 175,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\notifier.ts",
      "relativePath": "src/services/notifier.ts",
      "name": "notifier.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "sendNotification",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/components/ConsoleOAuthFlow.tsx",
        "src/hooks/useNotifyAfterTimeout.ts"
      ],
      "comments": {
        "fileHeader": "通知服务 - 多平台的用户通知系统"
      },
      "functions": [
        {
          "name": "sendITerm2Notification",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ message, title }"
          ],
          "returnType": "void",
          "description": "发送iTerm2的内置通知",
          "lineNumber": 22
        },
        {
          "name": "sendTerminalBell",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "发送终端响铃",
          "lineNumber": 37
        },
        {
          "name": "sendNotification",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "notif: NotificationOptions"
          ],
          "returnType": "Promise<void>",
          "description": "主要的通知发送函数",
          "lineNumber": 47
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "NotificationOptions"
      ],
      "constants": [
        "displayString",
        "channel"
      ],
      "lineCount": 71,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\oauth.ts",
      "relativePath": "src/services/oauth.ts",
      "name": "oauth.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "http",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "http",
          "imports": [
            "IncomingMessage",
            "ServerResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "url",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/oauth",
          "imports": [
            "OAUTH_CONFIG"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/browser",
          "imports": [
            "openBrowser"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./claude",
          "imports": [
            "resetAnthropicClient"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "AccountInfo",
            "getGlobalConfig",
            "saveGlobalConfig",
            "normalizeApiKeyForConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "OAuthService",
          "type": "named"
        },
        {
          "name": "createAndStoreApiKey",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/oauth.ts",
        "src/utils/browser.ts",
        "src/utils/log.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/components/ConsoleOAuthFlow.tsx"
      ],
      "comments": {
        "fileHeader": "OAuth认证服务 - Anthropic OAuth 2.0 PKCE流程的完整实现"
      },
      "functions": [
        {
          "name": "base64URLEncode",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "buffer: Buffer"
          ],
          "returnType": "string",
          "description": "Base64URL编码函数（符合RFC 4648标准）",
          "lineNumber": 35
        },
        {
          "name": "generateCodeVerifier",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "生成PKCE代码验证器",
          "lineNumber": 48
        },
        {
          "name": "generateCodeChallenge",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "verifier: string"
          ],
          "returnType": "Promise<string>",
          "description": "生成PKCE代码挑战码",
          "lineNumber": 58
        },
        {
          "name": "makeUrl",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "isManual: boolean"
          ],
          "returnType": "string",
          "description": "内部URL构建函数",
          "lineNumber": 124
        },
        {
          "name": "createAndStoreApiKey",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "accessToken: string"
          ],
          "returnType": "Promise<string | null>",
          "description": "创建并存储API密钥",
          "lineNumber": 407
        }
      ],
      "classes": [
        {
          "name": "OAuthService",
          "isExported": true,
          "methods": [
            "generateAuthUrls",
            "startOAuthFlow",
            "startLocalServer",
            "exchangeCodeForTokens",
            "processCallback",
            "closeServer"
          ],
          "description": "OAuth认证服务类",
          "lineNumber": 88
        }
      ],
      "interfaces": [],
      "types": [
        "OAuthTokenExchangeResponse",
        "OAuthResult"
      ],
      "constants": [
        "encoder",
        "data",
        "digest",
        "authUrl",
        "codeChallenge",
        "state",
        "onReady",
        "accountInfo",
        "config",
        "parsedUrl",
        "authorizationCode",
        "returnedState",
        "portError",
        "error",
        "requestBody",
        "response",
        "data",
        "createApiKeyResp",
        "apiKey",
        "config",
        "normalizedKey"
      ],
      "lineCount": 466,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\openai.ts",
      "relativePath": "src/services/openai.ts",
      "name": "openai.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "openai",
          "imports": [
            "OpenAI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "GlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "undici",
          "imports": [
            "ProxyAgent",
            "fetch",
            "Response"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/sessionState",
          "imports": [
            "setSessionState",
            "getSessionState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/debugLogger",
          "imports": [
            "debugLogger",
            "getCurrentRequest",
            "logAPIError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getGPT5CompletionWithProfile",
          "type": "named"
        },
        {
          "name": "getModelFeatures",
          "type": "named"
        },
        {
          "name": "applyModelSpecificTransformations",
          "type": "named"
        },
        {
          "name": "getCompletionWithProfile",
          "type": "named"
        },
        {
          "name": "createStreamProcessor",
          "type": "named"
        },
        {
          "name": "streamCompletion",
          "type": "named"
        },
        {
          "name": "callGPT5ResponsesAPI",
          "type": "named"
        },
        {
          "name": "fetchCustomModels",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts",
        "src/utils/sessionState.ts",
        "src/utils/debugLogger.ts"
      ],
      "dependents": [
        "src/components/ModelSelector.tsx",
        "src/services/claude.ts",
        "src/services/gpt5ConnectionTest.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getRetryDelay",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "attempt: number",
            "retryAfter: string | null"
          ],
          "returnType": "number",
          "description": "Calculate retry delay with exponential backoff and jitter",
          "lineNumber": 20
        },
        {
          "name": "abortableDelay",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "delayMs: number",
            "signal: AbortSignal"
          ],
          "returnType": "Promise<void>",
          "description": "Helper function to create an abortable delay",
          "lineNumber": 37
        },
        {
          "name": "getModelErrorKey",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "baseURL: string",
            "model: string",
            "type: ModelErrorType"
          ],
          "returnType": "string",
          "lineNumber": 69
        },
        {
          "name": "hasModelError",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "baseURL: string",
            "model: string",
            "type: ModelErrorType"
          ],
          "returnType": "boolean",
          "lineNumber": 77
        },
        {
          "name": "setModelError",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "baseURL: string",
            "model: string",
            "type: ModelErrorType",
            "error: string"
          ],
          "lineNumber": 87
        },
        {
          "name": "isRateLimitError",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "errMsg: string"
          ],
          "returnType": "boolean",
          "description": "Rate limit specific detection",
          "lineNumber": 246
        },
        {
          "name": "getModelFeatures",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "modelName: string"
          ],
          "returnType": "ModelFeatures",
          "description": "Helper to get model features based on model ID/name",
          "lineNumber": 308
        },
        {
          "name": "applyModelSpecificTransformations",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "opts: OpenAI.ChatCompletionCreateParams"
          ],
          "returnType": "void",
          "description": "Apply model-specific parameter transformations based on model features",
          "lineNumber": 342
        },
        {
          "name": "applyModelErrorFixes",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "opts: OpenAI.ChatCompletionCreateParams",
            "baseURL: string"
          ],
          "lineNumber": 402
        },
        {
          "name": "tryWithEndpointFallback",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "baseURL: string",
            "opts: OpenAI.ChatCompletionCreateParams",
            "headers: Record<string, string>",
            "provider: string",
            "proxy: any",
            "signal: AbortSignal"
          ],
          "returnType": "Promise<{ response: Response; endpoint: string }>",
          "description": "Helper function to try different endpoints for OpenAI-compatible providers",
          "lineNumber": 418
        },
        {
          "name": "getCompletionWithProfile",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "modelProfile: any",
            "opts: OpenAI.ChatCompletionCreateParams",
            "attempt: number",
            "maxAttempts: number",
            "signal: AbortSignal"
          ],
          "returnType": "Promise<OpenAI.ChatCompletion | AsyncIterable<OpenAI.ChatCompletionChunk>>",
          "lineNumber": 478
        },
        {
          "name": "createStreamProcessor",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "stream: any",
            "signal: AbortSignal"
          ],
          "returnType": "AsyncGenerator<OpenAI.ChatCompletionChunk, void, unknown>",
          "lineNumber": 852
        },
        {
          "name": "streamCompletion",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "stream: any",
            "signal: AbortSignal"
          ],
          "returnType": "AsyncGenerator<OpenAI.ChatCompletionChunk, void, unknown>",
          "lineNumber": 946
        },
        {
          "name": "callGPT5ResponsesAPI",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "modelProfile: any",
            "opts: any",
            "signal: AbortSignal"
          ],
          "returnType": "Promise<any>",
          "description": "Call GPT-5 Responses API with proper parameter handling",
          "lineNumber": 956
        },
        {
          "name": "convertResponsesAPIToChatCompletion",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "responsesData: any"
          ],
          "returnType": "any",
          "description": "Convert Responses API response to Chat Completion format for compatibility",
          "lineNumber": 1078
        },
        {
          "name": "getGPT5CompletionWithProfile",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "modelProfile: any",
            "opts: OpenAI.ChatCompletionCreateParams",
            "attempt: number",
            "maxAttempts: number",
            "signal: AbortSignal"
          ],
          "returnType": "Promise<OpenAI.ChatCompletion | AsyncIterable<OpenAI.ChatCompletionChunk>>",
          "description": "Enhanced getCompletionWithProfile that supports GPT-5 Responses API",
          "lineNumber": 1149
        },
        {
          "name": "fetchCustomModels",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "baseURL: string",
            "apiKey: string"
          ],
          "returnType": "Promise<any[]>",
          "description": "Fetch available models from custom OpenAI-compatible API",
          "lineNumber": 1251
        }
      ],
      "classes": [],
      "interfaces": [
        "ErrorHandler",
        "ModelFeatures"
      ],
      "types": [
        "ErrorDetector",
        "ErrorFixer"
      ],
      "constants": [
        "RETRY_CONFIG",
        "retryAfterMs",
        "delay",
        "jitter",
        "timeoutId",
        "abortHandler",
        "GPT5_ERROR_HANDLERS",
        "lowerMsg",
        "lowerMsg",
        "ERROR_HANDLERS",
        "toolDescriptions",
        "itemObj",
        "contentObj",
        "lowerMsg",
        "MODEL_FEATURES",
        "features",
        "isGPT5",
        "isGPT5",
        "handlers",
        "endpointsToTry",
        "response",
        "provider",
        "baseURL",
        "apiKey",
        "proxy",
        "headers",
        "azureApiVersion",
        "isOpenAICompatible",
        "result",
        "errorData",
        "hasError",
        "errorMessage",
        "isGPT5",
        "handlers",
        "delayMs",
        "stream",
        "isOpenAICompatible",
        "result",
        "errorData",
        "hasError",
        "errorMessage",
        "isGPT5",
        "handlers",
        "delayMs",
        "responseData",
        "delayMs",
        "reader",
        "decoder",
        "chunk",
        "line",
        "data",
        "parsed",
        "lines",
        "data",
        "parsed",
        "baseURL",
        "apiKey",
        "proxy",
        "headers",
        "responsesParams",
        "reasoningEffort",
        "systemMessages",
        "nonSystemMessages",
        "features",
        "response",
        "responseData",
        "usage",
        "reasoningItems",
        "messageItems",
        "reasoningSummary",
        "mainContent",
        "features",
        "isOfficialOpenAI",
        "result",
        "hasVersionNumber",
        "cleanBaseURL",
        "modelsURL",
        "response",
        "data",
        "hasDataArray",
        "hasModelsArray"
      ],
      "lineCount": 1362,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\responseStateManager.ts",
      "relativePath": "src/services/responseStateManager.ts",
      "name": "responseStateManager.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "responseStateManager",
          "type": "named"
        },
        {
          "name": "getConversationId",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/services/claude.ts"
      ],
      "comments": {
        "fileHeader": "GPT-5响应API状态管理服务\n管理previous_response_id以实现对话连续性和推理上下文复用\n主GPT-5的持久推理功能提供支持，确保复杂任务的思维连续性"
      },
      "functions": [
        {
          "name": "getConversationId",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "agentId: string",
            "messageId: string"
          ],
          "returnType": "string",
          "description": "从上下文生成对话ID的辅助函数",
          "lineNumber": 113
        }
      ],
      "classes": [
        {
          "name": "ResponseStateManager",
          "isExported": false,
          "methods": [
            "setPreviousResponseId",
            "getPreviousResponseId",
            "clearConversation",
            "clearAll",
            "cleanup",
            "getStateSize"
          ],
          "description": "响应状态管理器类",
          "lineNumber": 17
        }
      ],
      "interfaces": [
        "ConversationState"
      ],
      "types": [],
      "constants": [
        "state",
        "now",
        "responseStateManager"
      ],
      "lineCount": 116,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\sentry.ts",
      "relativePath": "src/services/sentry.ts",
      "name": "sentry.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "initSentry",
          "type": "named"
        },
        {
          "name": "captureException",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/SentryErrorBoundary.ts",
        "src/entrypoints/cli.tsx",
        "src/utils/log.ts"
      ],
      "comments": {
        "fileHeader": "Sentry错误跟踪服务\n提供错误监控和上报功能，当前为存根实现，可根据需要启用实际的Sentry集成\n这种设计允许在不同环境中灵活控制错误跟踪的行为"
      },
      "functions": [
        {
          "name": "initSentry",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "初始化Sentry错误跟踪服务",
          "lineNumber": 12
        },
        {
          "name": "captureException",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "error: unknown"
          ],
          "returnType": "Promise<void>",
          "description": "捕获并上报异常到Sentry",
          "lineNumber": 24
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 30,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\systemReminder.ts",
      "relativePath": "src/services/systemReminder.ts",
      "name": "systemReminder.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "../utils/todoStorage",
          "imports": [
            "getTodos",
            "TodoItem"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ReminderMessage",
          "type": "named"
        },
        {
          "name": "systemReminderService",
          "type": "named"
        },
        {
          "name": "generateSystemReminders",
          "type": "named"
        },
        {
          "name": "generateFileChangeReminder",
          "type": "named"
        },
        {
          "name": "emitReminderEvent",
          "type": "named"
        },
        {
          "name": "resetReminderSession",
          "type": "named"
        },
        {
          "name": "getReminderSessionState",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/todoStorage.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/query.ts",
        "src/services/claude.ts",
        "src/services/fileFreshness.ts",
        "src/services/mentionProcessor.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx"
      ],
      "comments": {
        "fileHeader": "系统提醒服务 - 智能上下文提醒和任务状态管理"
      },
      "functions": [],
      "classes": [
        {
          "name": "SystemReminderService",
          "isExported": false,
          "methods": [
            "generateReminders",
            "dispatchTodoEvent",
            "dispatchSecurityEvent",
            "dispatchPerformanceEvent",
            "getMentionReminders",
            "isMentionReminder",
            "generateFileChangeReminder",
            "createReminderMessage",
            "getTodoStateHash",
            "clearTodoReminders",
            "setupEventDispatcher",
            "addEventListener",
            "emitEvent",
            "createMentionReminder",
            "resetSession",
            "updateConfig",
            "getSessionState"
          ],
          "description": "系统提醒服务类",
          "lineNumber": 46
        }
      ],
      "interfaces": [
        "ReminderMessage",
        "ReminderConfig",
        "SessionReminderState"
      ],
      "types": [],
      "constants": [
        "reminders",
        "currentTime",
        "reminderGenerators",
        "result",
        "remindersToAdd",
        "todos",
        "currentTime",
        "agentKey",
        "reminderKey",
        "todoContent",
        "reminder",
        "currentTime",
        "currentTime",
        "sessionDuration",
        "currentTime",
        "MENTION_FRESHNESS_WINDOW",
        "reminders",
        "expiredKeys",
        "age",
        "mentionTypes",
        "currentTime",
        "reminderKey",
        "agentKey",
        "agentId",
        "reminder",
        "listeners",
        "reminder",
        "systemReminderService",
        "generateSystemReminders",
        "generateFileChangeReminder",
        "emitReminderEvent",
        "resetReminderSession",
        "getReminderSessionState"
      ],
      "lineCount": 537,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\vcr.ts",
      "relativePath": "src/services/vcr.ts",
      "name": "vcr.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "createHash",
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "mkdirSync",
            "readFileSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "mapValues"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ContentBlock"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "withVCR",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/env.ts",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/services/claude.ts"
      ],
      "comments": {
        "fileHeader": "VCR服务 - 测试环境中的API请求记录和重放系统"
      },
      "functions": [
        {
          "name": "withVCR",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "messages: (UserMessage | AssistantMessage)[]",
            "f: () => Promise<AssistantMessage>"
          ],
          "returnType": "Promise<AssistantMessage>",
          "description": "VCR主要包装函数 - 将API调用包装成可记录和重放的形式",
          "lineNumber": 28
        },
        {
          "name": "mapMessages",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "messages: (UserMessage | AssistantMessage)['message']['content'][]",
            "f: (s: unknown) => unknown"
          ],
          "returnType": "(UserMessage | AssistantMessage)['message']['content'][]",
          "description": "映射消息列表",
          "lineNumber": 89
        },
        {
          "name": "mapAssistantMessage",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "message: AssistantMessage",
            "f: (s: unknown) => unknown"
          ],
          "returnType": "AssistantMessage",
          "description": "映射助手消息",
          "lineNumber": 138
        },
        {
          "name": "dehydrateValue",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "s: unknown"
          ],
          "returnType": "unknown",
          "description": "脱水函数 - 移除数据中的环境相关信息",
          "lineNumber": 178
        },
        {
          "name": "hydrateValue",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "s: unknown"
          ],
          "returnType": "unknown",
          "description": "水化函数 - 恢复脱水后的数据中的环境信息",
          "lineNumber": 202
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "dehydratedInput",
        "filename",
        "cached",
        "result",
        "s1"
      ],
      "lineCount": 212,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\test\\testAdapters.ts",
      "relativePath": "src/test/testAdapters.ts",
      "name": "testAdapters.ts",
      "extension": ".ts",
      "directory": "src/test",
      "level": 1,
      "imports": [
        {
          "source": "../services/modelAdapterFactory",
          "imports": [
            "ModelAdapterFactory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/modelCapabilities",
          "imports": [
            "getModelCapabilities"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "ModelProfile"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [],
      "dependencies": [
        "src/services/modelAdapterFactory.ts",
        "src/constants/modelCapabilities.ts",
        "src/utils/config.ts"
      ],
      "dependents": [],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "testModels",
        "capabilities",
        "adapter",
        "shouldUseResponses",
        "customModel",
        "customShouldUseResponses"
      ],
      "lineCount": 96,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\Tool.ts",
      "relativePath": "src/Tool.ts",
      "name": "Tool.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ToolUseContext",
          "type": "named"
        },
        {
          "name": "ExtendedToolUseContext",
          "type": "named"
        },
        {
          "name": "ValidationResult",
          "type": "named"
        },
        {
          "name": "Tool",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/commands/ctx_viz.ts",
        "src/commands.ts",
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Message.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx",
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/components/PromptInput.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useCancelRequest.ts",
        "src/hooks/useCanUseTool.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/screens/REPL.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/services/adapters/base.ts",
        "src/services/adapters/chatCompletions.ts",
        "src/services/adapters/responsesAPI.ts",
        "src/services/claude.ts",
        "src/services/mcpClient.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MCPTool/MCPTool.tsx",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/tools/StickerRequestTool/StickerRequestTool.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/tools/WebSearchTool/WebSearchTool.tsx",
        "src/tools.ts",
        "src/utils/ask.tsx",
        "src/utils/conversationRecovery.ts",
        "src/utils/messages.tsx",
        "src/utils/toolExecutionController.ts"
      ],
      "comments": {
        "fileHeader": "🎯 工具系统核心接口 - Kode 可扩展架构的基础层🏗️ 核心功能：\n- 定义所有工具必须实现的标准化契约\n- 提供类型安全的工具输入输出接口\n- 集成权限系统和安全验证机制\n- 支持异步操作和流式输出处理🔄 依赖关系：\n- 上游：被所有具体工具实现和工具管理器使用\n- 下游：依赖 Zod 验证库和 React 组件系统📊 使用场景：\n- 工具系统的架构基础定义\n- 新工具开发的接口规范\n- 工具权限管理和安全验证\n- AI 代理的工具调用和结果处理🔧 技术实现：\n- 基于 TypeScript 泛型的类型安全设计\n- Zod 运行时类型验证和 JSON Schema 支持\n- React 组件集成用于 UI 渲染\n- 异步生成器模式支持流式处理"
      },
      "functions": [],
      "classes": [],
      "interfaces": [
        "ToolUseContext",
        "ExtendedToolUseContext",
        "ValidationResult",
        "Tool"
      ],
      "types": [
        "SetToolJSXFn"
      ],
      "constants": [],
      "lineCount": 227,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\ArchitectTool\\ArchitectTool.tsx",
      "relativePath": "src/tools/ArchitectTool/ArchitectTool.tsx",
      "name": "ArchitectTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/ArchitectTool",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlock"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "Message",
            "query"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/generators",
          "imports": [
            "lastX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "createUserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "ARCHITECT_SYSTEM_PROMPT",
            "DESCRIPTION"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ArchitectTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/HighlightedCode.tsx",
        "src/context.ts",
        "src/query.ts",
        "src/utils/generators.ts",
        "src/utils/messages.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/ArchitectTool/prompt.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "FS_EXPLORATION_TOOLS",
        "inputSchema",
        "ArchitectTool",
        "content",
        "userMessage",
        "messages",
        "allowedTools",
        "canUseTool",
        "lastResponse",
        "data"
      ],
      "lineCount": 136,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\ArchitectTool\\prompt.ts",
      "relativePath": "src/tools/ArchitectTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/ArchitectTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "ARCHITECT_SYSTEM_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/ArchitectTool/ArchitectTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "ARCHITECT_SYSTEM_PROMPT",
        "DESCRIPTION"
      ],
      "lineCount": 16,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\AskExpertModelTool\\AskExpertModelTool.tsx",
      "relativePath": "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
      "name": "AskExpertModelTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/AskExpertModelTool",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "createUserMessage",
            "createAssistantMessage",
            "INTERRUPT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/expertChatStorage",
          "imports": [
            "createExpertChatSession",
            "loadExpertChatSession",
            "getSessionMessages",
            "addMessageToSession"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "queryLLM"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/debugLogger",
          "imports": [
            "debugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/markdown",
          "imports": [
            "applyMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "inputSchema",
          "type": "named"
        },
        {
          "name": "AskExpertModelTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/utils/model.ts",
        "src/utils/theme.ts",
        "src/utils/messages.tsx",
        "src/utils/log.ts",
        "src/utils/expertChatStorage.ts",
        "src/services/claude.ts",
        "src/utils/debugLogger.ts",
        "src/utils/markdown.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [
        "In",
        "Out"
      ],
      "constants": [
        "inputSchema",
        "AskExpertModelTool",
        "modelManager",
        "normalizedExpert",
        "normalizedCurrent",
        "modelManager",
        "modelResolution",
        "availableModels",
        "isNewSession",
        "sessionDisplay",
        "theme",
        "verbose",
        "theme",
        "expertResult",
        "isError",
        "isInterrupted",
        "answerText",
        "expertModel",
        "abortListener",
        "session",
        "session",
        "newSession",
        "newSession",
        "messages",
        "modelManager",
        "modelResolution",
        "timeoutMs",
        "timeoutPromise",
        "modelManager",
        "availableModels",
        "result",
        "errorSessionId",
        "errorMessage",
        "result"
      ],
      "lineCount": 577,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\BashTool.tsx",
      "relativePath": "src/tools/BashTool/BashTool.tsx",
      "name": "BashTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "relative",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/commands",
          "imports": [
            "splitCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file",
          "imports": [
            "isInDirectory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/PersistentShell",
          "imports": [
            "PersistentShell"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd",
            "getOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./BashToolResultMessage",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "BANNED_COMMANDS",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "formatOutput",
            "getCommandFilePaths"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "inputSchema",
          "type": "named"
        },
        {
          "name": "BashTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/constants/product.ts",
        "src/services/claude.ts",
        "src/Tool.ts",
        "src/utils/commands.ts",
        "src/utils/file.ts",
        "src/utils/log.ts",
        "src/utils/PersistentShell.ts",
        "src/utils/state.ts",
        "src/utils/config.ts",
        "src/utils/model.ts",
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/tools/BashTool/prompt.ts",
        "src/tools/BashTool/utils.ts"
      ],
      "dependents": [
        "src/commands/review.ts",
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/constants/prompts.ts",
        "src/entrypoints/mcp.ts",
        "src/hooks/useCanUseTool.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts",
        "src/utils/messages.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 Bash 工具实现 - 系统命令执行工具的核心实现🏗️ 核心功能：\n- 提供安全的 Shell 命令执行接口\n- 支持持久化会话和状态管理\n- 集成完整的权限控制和安全检查\n- 实现命令输出的格式化和截断\n- 支持命令超时和中断机制🔄 依赖关系：\n- 上游：被 AI 代理调用执行系统操作\n- 下游：依赖持久化 Shell、权限系统、格式化工具📊 使用场景：\n- 系统命令的安全执行\n- Git 操作和版本控制\n- 文件系统的批量操作\n- 开发工具的集成调用🔧 技术实现：\n- 持久化会话：跨命令的状态保持\n- 安全控制：禁用命令列表和权限验证\n- 输出管理：智能截断和格式化\n- 错误处理：完善的异常捕获和恢复💡 设计原则：\n- 安全第一：严格的命令过滤和权限控制\n- 用户友好：清晰的输出格式和错误提示\n- 性能优化：持久化会话减少启动开销\n- 可控性：超时和中断机制确保系统稳定"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [
        "In",
        "Out"
      ],
      "constants": [
        "inputSchema",
        "BashTool",
        "config",
        "modelManager",
        "modelName",
        "commands",
        "parts",
        "baseCmd",
        "targetDir",
        "fullTargetDir",
        "match",
        "prefix",
        "content",
        "suffix",
        "hasBoth",
        "data",
        "result",
        "fullFilePath",
        "data",
        "isAborted",
        "errorMessage",
        "data"
      ],
      "lineCount": 417,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\BashToolResultMessage.tsx",
      "relativePath": "src/tools/BashTool/BashToolResultMessage.tsx",
      "name": "BashToolResultMessage.tsx",
      "extension": ".tsx",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./OutputLine",
          "imports": [
            "OutputLine"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./BashTool",
          "imports": [
            "BashOut"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/tools/BashTool/OutputLine.tsx",
        "src/utils/theme.ts",
        "src/tools/BashTool/BashTool.tsx"
      ],
      "dependents": [
        "src/components/messages/AssistantBashOutputMessage.tsx",
        "src/tools/BashTool/BashTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 Bash工具结果消息组件 - 命令执行结果的结构化UI展示🏗️ 核心功能：\n- 提供Bash命令执行结果的美观可读展示\n- 智能区分标准输出和错误输出的显示样式\n- 支持详细模式和简洁模式的灵活切换\n- 集成主题系统的一致性视觉效果\n- 处理空输出的用户友好提示🔄 依赖关系：\n- 上游：被 BashTool 调用进行结果展示\n- 下游：依赖 OutputLine 组件、主题系统、Ink UI📊 使用场景：\n- 终端命令执行结果的实时显示\n- 标准输出和错误输出的分离展示\n- 长输出内容的截断和格式化显示\n- 空命令结果的状态提示🔧 技术实现：\n- React函数式组件：现代化的组件开发模式\n- 条件渲染：基于输出内容的智能显示逻辑\n- 主题集成：统一的颜色和样式管理\n- 类型安全：完整的TypeScript类型定义💡 设计原则：\n- 清晰可读：区分不同类型输出的视觉效果\n- 响应式：适应不同内容长度的灵活布局\n- 一致性：与整体界面风格保持统一\n- 用户友好：提供清晰的状态反馈"
      },
      "functions": [
        {
          "name": "BashToolResultMessage",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "{ content, verbose }"
          ],
          "returnType": "React.JSX.Element",
          "description": "🎨 Bash工具结果消息渲染组件 - 智能化的命令输出展示器负责将Bash命令的执行结果进行结构化展示，智能处理不同类型的输出",
          "lineNumber": 87
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [],
      "lineCount": 114,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\OutputLine.tsx",
      "relativePath": "src/tools/BashTool/OutputLine.tsx",
      "name": "OutputLine.tsx",
      "extension": ".tsx",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "MAX_RENDERED_LINES"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "OutputLine",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/tools/BashTool/prompt.ts"
      ],
      "dependents": [
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/tools/MCPTool/MCPTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 输出行组件 - 命令输出内容的智能渲染和显示模块🏗️ 核心功能：\n- 提供命令输出内容的灵活显示和截断处理\n- 支持详细模式和简洁模式的动态切换\n- 集成错误状态的差异化视觉样式\n- 实现长输出的智能截断和预览\n- 提供一致的布局和用户体验🔄 依赖关系：\n- 上游：被 BashToolResultMessage 使用进行内容渲染\n- 下游：依赖 Ink UI、主题系统、Chalk 颜色处理📊 使用场景：\n- 标准输出和错误输出的统一渲染\n- 长命令输出的截断和预览显示\n- 终端界面的一致性布局控制\n- 不同输出类型的视觉区分🔧 技术实现：\n- 智能截断：保留输出末尾的关键信息\n- 主题集成：错误输出的颜色差异化\n- 响应式布局：适应不同终端宽度\n- 性能优化：避免渲染过长内容影响性能💡 设计原则：\n- 信息优先：确保重要信息的可见性\n- 视觉清晰：区分不同类型输出的样式\n- 性能友好：合理控制渲染内容的长度\n- 一致体验：统一的界面布局和交互"
      },
      "functions": [
        {
          "name": "renderTruncatedContent",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "content: string",
            "totalLines: number"
          ],
          "returnType": "string",
          "description": "📐 截断内容渲染函数 - 智能处理长输出内容的显示策略对超过显示行数限制的内容进行智能截断，保留最后的关键行数",
          "lineNumber": 69
        },
        {
          "name": "OutputLine",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  content,\n  lines,\n  verbose,\n  isError,\n}"
          ],
          "description": "📝 输出行组件 - 统一的命令输出渲染器提供标准化的命令输出显示组件，支持多种显示模式和视觉状态。",
          "lineNumber": 131
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "allLines",
        "lastLines"
      ],
      "lineCount": 158,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\prompt.ts",
      "relativePath": "src/tools/BashTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME",
            "PRODUCT_URL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../TaskTool/constants",
          "imports": [
            "TASK_TOOL_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GlobTool/prompt",
          "imports": [
            "GLOB_TOOL_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GrepTool/prompt",
          "imports": [
            "GREP_TOOL_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MAX_OUTPUT_LENGTH",
          "type": "named"
        },
        {
          "name": "MAX_RENDERED_LINES",
          "type": "named"
        },
        {
          "name": "BANNED_COMMANDS",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/product.ts",
        "src/tools/TaskTool/constants.ts",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/GlobTool/prompt.ts",
        "src/tools/GrepTool/prompt.ts",
        "src/tools/lsTool/lsTool.tsx"
      ],
      "dependents": [
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/BashTool/OutputLine.tsx",
        "src/tools/BashTool/utils.ts"
      ],
      "comments": {
        "fileHeader": "🎯 Bash 工具提示配置 - 命令行执行工具的 AI 指令模板🏗️ 核心功能：\n- 定义 Bash 命令执行的安全规范和最佳实践\n- 提供详细的命令执行流程和错误处理指导\n- 集成 Git 工作流的专业化操作指令\n- 配置安全限制和禁用命令列表\n- 支持 PR 创建和代码提交的标准化流程🔄 依赖关系：\n- 上游：被 BashTool 使用作为 AI 行为指导\n- 下游：依赖产品常量和其他工具的名称定义📊 使用场景：\n- AI 代理的命令行操作指导\n- 安全的系统命令执行控制\n- Git 工作流的自动化处理\n- 开发环境的标准化操作🔧 技术实现：\n- 安全控制：禁用危险和网络相关命令\n- 工作流集成：Git 提交和 PR 创建的标准流程\n- 工具协调：与文件操作工具的协同使用\n- 错误处理：完善的错误检查和恢复机制💡 设计原则：\n- 安全第一：严格的命令白名单和黑名单\n- 工作流标准化：统一的 Git 操作流程\n- 工具协同：避免功能重复的工具选择\n- 用户体验：清晰的执行步骤和错误提示"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "MAX_OUTPUT_LENGTH",
        "MAX_RENDERED_LINES",
        "BANNED_COMMANDS",
        "PROMPT"
      ],
      "lineCount": 238,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\utils.ts",
      "relativePath": "src/tools/BashTool/utils.ts",
      "name": "utils.ts",
      "extension": ".ts",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "../../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "MAX_OUTPUT_LENGTH"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "formatOutput",
          "type": "named"
        },
        {
          "name": "getCommandFilePaths",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/claude.ts",
        "src/utils/messages.tsx",
        "src/tools/BashTool/prompt.ts"
      ],
      "dependents": [
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 Bash工具实用函数集 - 命令输出处理和文件跟踪的核心工具库🏗️ 核心功能：\n- 提供命令输出的智能格式化和截断处理\n- 实现AI驱动的文件路径提取和跟踪\n- 支持大量输出内容的内存友好处理\n- 集成文件状态同步和时间戳管理🔄 依赖关系：\n- 上游：被 BashTool 主工具调用进行输出处理\n- 下游：依赖 Claude AI 服务、消息解析、配置管理📊 使用场景：\n- 长命令输出的智能截断和预览\n- Git操作涉及文件的自动识别\n- 文件系统操作的路径提取\n- 命令结果的结构化处理🔧 技术实现：\n- 双端截断：保留输出开头和结尾的关键信息\n- AI智能解析：使用语言模型准确提取文件路径\n- 性能优化：缓存和批处理机制\n- 错误容错：优雅处理解析失败情况💡 设计原则：\n- 内存效率：避免大量输出导致内存溢出\n- 信息保留：截断时保持输出的关键信息\n- 智能识别：准确提取命令涉及的文件路径\n- 性能优先：优化频繁调用的处理逻辑"
      },
      "functions": [
        {
          "name": "formatOutput",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "content: string"
          ],
          "returnType": "{\n  totalLines: number\n  truncatedContent: string\n}",
          "description": "📏 输出格式化函数 - 智能截断长输出内容的核心处理器对命令执行结果进行智能处理，当输出超过预设长度限制时，",
          "lineNumber": 72
        },
        {
          "name": "getCommandFilePaths",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "command: string",
            "output: string"
          ],
          "returnType": "Promise<string[]>",
          "description": "🤖 AI驱动的文件路径提取器 - 智能识别命令涉及的文件使用Claude AI模型分析命令和其输出，智能提取所有被读取、",
          "lineNumber": 139
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "halfLength",
        "start",
        "end",
        "truncated",
        "response",
        "content"
      ],
      "lineCount": 170,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileEditTool\\FileEditTool.tsx",
      "relativePath": "src/tools/FileEditTool/FileEditTool.tsx",
      "name": "FileEditTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/FileEditTool",
      "level": 2,
      "imports": [
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync",
            "readFileSync",
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "isAbsolute",
            "relative",
            "resolve",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FileEditToolUpdatedMessage",
          "imports": [
            "FileEditToolUpdatedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "addLineNumbers",
            "detectFileEncoding",
            "detectLineEndings",
            "findSimilarFile",
            "writeTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "applyEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasWritePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileEditTool",
          "type": "named"
        },
        {
          "name": "getSnippet",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/StructuredDiff.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/array.ts",
        "src/utils/log.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/FileEditTool/prompt.ts",
        "src/tools/FileEditTool/utils.ts",
        "src/utils/permissions/filesystem.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/permissions.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 文件编辑工具实现 - 精确文本替换的核心文件修改工具🏗️ 核心功能：\n- 提供精确的字符串替换文件修改能力\n- 支持全编码格式的文件读写操作\n- 集成完整的权限控制和安全验证\n- 实现智能的文件更改跟踪和冲突检测\n- 生成结构化的修改差异展示🔄 依赖关系：\n- 上游：被 AI 代理调用进行文件编辑操作\n- 下游：依赖文件系统工具、权限管理、差异处理📊 使用场景：\n- 代码文件的精确修改和重构\n- 配置文件的更新和调整\n- 文档内容的编辑和维护\n- 批量文件内容的标准化处理🔧 技术实现：\n- 唯一性验证：确保替换字符串在文件中唯一存在\n- 编码检测：自动识别并保持文件原始编码格式\n- 时间戳检测：防止并发修改导致的内容冲突\n- 差异生成：生成结构化的修改前后对比视图\n- 权限控制：集成文件写入权限的安全检查💡 设计原则：\n- 精确性：只替换指定的唯一字符串匹配\n- 安全性：严格的权限控制和文件状态验证\n- 可视化：清晰的修改差异展示和确认\n- 兼容性：支持各种编码格式和换行符风格"
      },
      "functions": [
        {
          "name": "getSnippet",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "initialText: string",
            "oldStr: string",
            "newStr: string"
          ],
          "returnType": "{ snippet: string; startLine: number }",
          "lineNumber": 342
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "In"
      ],
      "constants": [
        "inputSchema",
        "N_LINES_SNIPPET",
        "FileEditTool",
        "verbose",
        "fullFilePath",
        "similarFilename",
        "readTimestamp",
        "stats",
        "lastWriteTime",
        "enc",
        "file",
        "matches",
        "fullFilePath",
        "dir",
        "enc",
        "endings",
        "originalFile",
        "data",
        "before",
        "replacementLine",
        "newFileLines",
        "startLine",
        "endLine",
        "snippetLines",
        "snippet"
      ],
      "lineCount": 359,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileEditTool\\prompt.ts",
      "relativePath": "src/tools/FileEditTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/FileEditTool",
      "level": 2,
      "imports": [
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/NotebookEditTool/NotebookEditTool.tsx"
      ],
      "dependents": [
        "src/tools/FileEditTool/FileEditTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 文件编辑工具提示配置 - 精确文件修改的 AI 指令模板🏗️ 核心功能：\n- 定义单文件精确编辑的操作规范\n- 提供严格的上下文匹配和唯一性要求\n- 集成文件验证和安全检查流程\n- 支持新文件创建和现有文件修改\n- 确保编辑操作的原子性和准确性🔄 依赖关系：\n- 上游：被 FileEditTool 使用作为操作指导\n- 下游：依赖其他工具（Notebook、LS、View 等）📊 使用场景：\n- 代码文件的精确修改和重构\n- 配置文件的局部更新\n- 文档内容的定点编辑\n- 小规模的文件内容调整🔧 技术实现：\n- 唯一性匹配：确保编辑目标的精确定位\n- 上下文要求：严格的前后文本匹配\n- 原子操作：单次调用单次修改原则\n- 安全验证：文件路径和内容完整性检查💡 设计原则：\n- 精确性优先：严格的文本匹配要求\n- 安全可控：完善的验证和错误处理\n- 工具协同：与其他文件工具的职责分工\n- 用户友好：清晰的使用指导和错误提示"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DESCRIPTION"
      ],
      "lineCount": 96,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileEditTool\\utils.ts",
      "relativePath": "src/tools/FileEditTool/utils.ts",
      "name": "utils.ts",
      "extension": ".ts",
      "directory": "src/tools/FileEditTool",
      "level": 2,
      "imports": [
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file",
          "imports": [
            "detectFileEncoding"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "applyEdit",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/utils/file.ts",
        "src/utils/diff.ts"
      ],
      "dependents": [
        "src/tools/FileEditTool/FileEditTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 FileEditTool 工具函数集 - 文件编辑的核心实用工具🏗️ 核心功能：\n- 提供文件编辑操作的底层实现逻辑\n- 实现精确的字符串替换和差异计算\n- 支持新文件创建和现有文件修改\n- 集成智能的换行符处理机制\n- 生成详细的编辑操作差异报告🔄 依赖关系：\n- 上游：被 FileEditTool 主工具调用\n- 下游：依赖文件系统、编码检测、差异计算📊 使用场景：\n- 代码文件的精确行级编辑\n- 配置文件的键值对修改\n- 文档内容的局部更新\n- 批量文本替换操作🔧 技术实现：\n- 路径解析：支持相对路径和绝对路径\n- 编码保持：自动检测和保持原文件编码\n- 智能替换：处理边界情况和换行符\n- 差异生成：创建可视化的修改对比💡 设计原则：\n- 非破坏性：不直接修改磁盘文件\n- 精确性：确保替换操作的准确性\n- 可预览：生成完整的修改差异\n- 容错性：优雅处理各种边界情况"
      },
      "functions": [
        {
          "name": "applyEdit",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "file_path: string",
            "old_string: string",
            "new_string: string"
          ],
          "returnType": "{ patch: Hunk[]; updatedFile: string }",
          "description": "应用文件编辑操作并返回差异和更新后的文件内容这是文件编辑系统的核心函数，负责安全地执行文本替换操作，",
          "lineNumber": 84
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "fullFilePath",
        "enc",
        "patch"
      ],
      "lineCount": 196,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileReadTool\\FileReadTool.tsx",
      "relativePath": "src/tools/FileReadTool/FileReadTool.tsx",
      "name": "FileReadTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/FileReadTool",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ImageBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:fs",
          "imports": [
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:path",
          "imports": [
            "extname",
            "relative"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "addLineNumbers",
            "findSimilarFile",
            "normalizeFilePath",
            "readTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileRead",
            "generateFileModificationReminder"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/secureFile",
          "imports": [
            "secureFileService"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "sharp",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileReadTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/HighlightedCode.tsx",
        "src/Tool.ts",
        "src/utils/state.ts",
        "src/utils/log.ts",
        "src/utils/theme.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts",
        "src/tools/FileReadTool/prompt.ts",
        "src/utils/permissions/filesystem.ts",
        "src/utils/secureFile.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/BashTool/prompt.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 文件读取工具实现 - 多格式文件内容读取的核心工具🏗️ 核心功能：\n- 提供统一的文件读取接口支持文本和图片\n- 实现智能文件大小检测和分页读取\n- 集成图像处理和压缩优化功能\n- 支持完整的文件权限控制和安全验证\n- 生成格式化的代码高亮显示🔄 依赖关系：\n- 上游：被 AI 代理调用进行文件内容读取\n- 下游：依赖文件系统、图像处理库、权限管理📊 使用场景：\n- 源代码文件的内容分析和理解\n- 配置文件和文档的内容检查\n- 图片文件的视觉内容处理\n- 大文件的分段读取和浏览🔧 技术实现：\n- 自适应读取：根据文件大小自动选择读取策略\n- 图像优化：自动压缩和调整图片尺寸\n- 语法高亮：基于文件扩展名的代码着色\n- 分页支持：大文件的偏移量和限制参数\n- 编码检测：自动识别和处理各种文件编码💡 设计原则：\n- 性能优化：避免大文件导致的内存溢出\n- 用户体验：清晰的内容展示和格式化\n- 安全可控：严格的文件访问权限控制\n- 兼容全面：支持文本、图像等多种格式"
      },
      "functions": [
        {
          "name": "createImageResponse",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "buffer: Buffer",
            "ext: string"
          ],
          "returnType": "{\n  type: 'image'\n  file: { base64: string; type: ImageBlockParam.Source['media_type'] }\n}",
          "lineNumber": 326
        },
        {
          "name": "readImage",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "filePath: string",
            "ext: string"
          ],
          "returnType": "Promise<{\n  type: 'image'\n  file: { base64: string; type: ImageBlockParam.Source['media_type'] }\n}>",
          "lineNumber": 342
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "MAX_LINES_TO_RENDER",
        "MAX_OUTPUT_SIZE",
        "IMAGE_EXTENSIONS",
        "MAX_WIDTH",
        "MAX_HEIGHT",
        "MAX_IMAGE_SIZE",
        "inputSchema",
        "FileReadTool",
        "entries",
        "verbose",
        "contentWithFallback",
        "fullFilePath",
        "fileCheck",
        "similarFilename",
        "stats",
        "fileSize",
        "ext",
        "ext",
        "fullFilePath",
        "modificationReminder",
        "data",
        "lineOffset",
        "data",
        "formatFileSizeError",
        "stats",
        "sharp",
        "fileReadResult",
        "image",
        "metadata",
        "compressedBuffer",
        "fileReadResult",
        "resizedImageBuffer",
        "compressedBuffer",
        "fileReadResult"
      ],
      "lineCount": 438,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileReadTool\\prompt.ts",
      "relativePath": "src/tools/FileReadTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/FileReadTool",
      "level": 2,
      "imports": [
        {
          "source": "../NotebookReadTool/NotebookReadTool",
          "imports": [
            "NotebookReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ],
      "dependents": [
        "src/tools/FileReadTool/FileReadTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "MAX_LINES_TO_READ",
        "MAX_LINE_LENGTH",
        "DESCRIPTION",
        "PROMPT"
      ],
      "lineCount": 8,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileWriteTool\\FileWriteTool.tsx",
      "relativePath": "src/tools/FileWriteTool/FileWriteTool.tsx",
      "name": "FileWriteTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/FileWriteTool",
      "level": 2,
      "imports": [
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync",
            "readFileSync",
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "extname",
            "isAbsolute",
            "relative",
            "resolve",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FileEditToolUpdatedMessage",
          "imports": [
            "FileEditToolUpdatedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "addLineNumbers",
            "detectFileEncoding",
            "detectLineEndings",
            "detectRepoLineEndings",
            "writeTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasWritePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileWriteTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/HighlightedCode.tsx",
        "src/components/StructuredDiff.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/array.ts",
        "src/utils/log.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/tools/FileWriteTool/prompt.ts",
        "src/utils/permissions/filesystem.ts",
        "src/utils/diff.ts",
        "src/constants/product.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/permissions.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 文件写入工具实现 - 完整文件创建和覆盖的核心工具🏗️ 核心功能：\n- 提供完整的文件创建和内容替换能力\n- 支持自动编码检测和换行符保持\n- 集成差异对比和变更可视化展示\n- 实现文件修改时间跟踪和冲突检测\n- 生成详细的操作结果反馈和预览🔄 依赖关系：\n- 上游：被 AI 代理调用进行完整文件写入\n- 下游：依赖文件系统、差异处理、权限管理📊 使用场景：\n- 新文件的创建和初始化\n- 现有文件的完整内容替换\n- 代码生成和模板文件创建\n- 配置文件的批量更新操作🔧 技术实现：\n- 智能覆盖：区分文件创建和更新操作\n- 编码保持：维持原文件的编码格式\n- 差异展示：生成详细的修改前后对比\n- 冲突检测：验证文件修改时间戳避免冲突\n- 权限验证：确保写入操作的安全性💡 设计原则：\n- 操作明确：清晰区分创建和更新场景\n- 安全可控：严格的权限检查和冲突预防\n- 用户友好：详细的操作反馈和差异展示\n- 格式保持：维护文件的原有编码和格式"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "MAX_LINES_TO_RENDER",
        "MAX_LINES_TO_RENDER_FOR_ASSISTANT",
        "TRUNCATED_MESSAGE",
        "inputSchema",
        "FileWriteTool",
        "fullFilePath",
        "oldFileExists",
        "enc",
        "oldContent",
        "type",
        "patch",
        "verbose",
        "contentWithFallback",
        "numLines",
        "fullFilePath",
        "readTimestamp",
        "stats",
        "lastWriteTime",
        "fullFilePath",
        "dir",
        "oldFileExists",
        "enc",
        "oldContent",
        "endings",
        "patch",
        "data",
        "data"
      ],
      "lineCount": 333,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileWriteTool\\prompt.ts",
      "relativePath": "src/tools/FileWriteTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/FileWriteTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/FileWriteTool/FileWriteTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "PROMPT",
        "DESCRIPTION"
      ],
      "lineCount": 11,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\GlobTool\\GlobTool.tsx",
      "relativePath": "src/tools/GlobTool/GlobTool.tsx",
      "name": "GlobTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/GlobTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file",
          "imports": [
            "glob"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "TOOL_NAME_FOR_PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "relative",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "GlobTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/Cost.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/state.ts",
        "src/utils/file.ts",
        "src/tools/GlobTool/prompt.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 Glob 匹配工具实现 - 快速文件模式匹配的核心工具🏗️ 核心功能：\n- 提供高效的文件名模式匹配搜索\n- 支持标准 Glob 语法的完整实现\n- 集成智能文件发现和路径解析\n- 实现按修改时间的结果排序\n- 生成详细的搜索性能统计🔄 依赖关系：\n- 上游：被 AI 代理调用进行文件名匹配搜索\n- 下游：依赖文件系统遍历、权限验证系统📊 使用场景：\n- 特定文件类型的批量发现\n- 文件名模式的快速匹配查找\n- 项目结构的探索和分析\n- 代码库文件的组织和分类🔧 技术实现：\n- 模式匹配：支持通配符和复杂路径模式\n- 性能优化：限制结果数量防止内存溢出\n- 智能排序：按文件修改时间排序结果\n- 路径处理：自动处理绝对路径和相对路径\n- 权限集成：确保搜索路径的访问权限💡 设计原则：\n- 快速响应：适配大型代码库的文件发现\n- 模式灵活：支持复杂的 Glob 匹配表达式\n- 结果精准：准确的文件名和路径匹配\n- 用户友好：清晰的匹配结果展示"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [
        "Output"
      ],
      "constants": [
        "inputSchema",
        "GlobTool",
        "absolutePath",
        "relativePath",
        "start",
        "output"
      ],
      "lineCount": 221,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\GlobTool\\prompt.ts",
      "relativePath": "src/tools/GlobTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/GlobTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME_FOR_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/BashTool/prompt.ts",
        "src/tools/GlobTool/GlobTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 Glob 工具提示配置 - 高效文件模式匹配工具的 AI 指令🏗️ 核心功能：\n- 提供基于 Glob 模式的快速文件名匹配搜索\n- 支持复杂通配符表达式的文件发现\n- 集成智能结果排序和数量限制\n- 优化大型代码库的文件查找性能🔄 依赖关系：\n- 上游：被 GlobTool 使用作为功能描述指导\n- 下游：与其他搜索工具的协同工作策略📊 使用场景：\n- 特定类型文件的批量发现\n- 项目结构的快速探索\n- 文件名模式的精确匹配\n- 代码库文件的组织分析💡 设计理念：\n- 模式灵活：支持标准 Glob 语法的完整实现\n- 性能优先：适配任意规模代码库的文件匹配\n- 结果精准：准确的文件名和路径模式匹配\n- 工具协同：与 Grep 和 Agent 工具的分工合作"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "TOOL_NAME_FOR_PROMPT",
        "DESCRIPTION"
      ],
      "lineCount": 55,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\GrepTool\\GrepTool.tsx",
      "relativePath": "src/tools/GrepTool/GrepTool.tsx",
      "name": "GrepTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/GrepTool",
      "level": 2,
      "imports": [
        {
          "source": "fs/promises",
          "imports": [
            "stat"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "getAbsolutePath",
            "getAbsoluteAndRelativePaths"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/ripgrep",
          "imports": [
            "ripGrep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "TOOL_NAME_FOR_PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "GrepTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/Cost.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/state.ts",
        "src/utils/ripgrep.ts",
        "src/tools/GrepTool/prompt.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 Grep 搜索工具实现 - 高性能内容搜索的核心工具🏗️ 核心功能：\n- 提供基于正则表达式的快速文件内容搜索\n- 支持大规模代码库的高效搜索操作\n- 集成文件类型过滤和路径限制功能\n- 实现智能结果排序和数量限制\n- 生成详细的搜索统计和性能报告🔄 依赖关系：\n- 上游：被 AI 代理调用进行代码库内容搜索\n- 下游：依赖 ripgrep 搜索引擎、文件系统权限📊 使用场景：\n- 代码库中特定模式的快速定位\n- 函数定义和引用的批量查找\n- 配置文件中特定设置的搜索\n- 大型项目的内容分析和统计🔧 技术实现：\n- Ripgrep 集成：利用 Rust 高性能搜索引擎\n- 模式过滤：支持正则表达式和文件模式匹配\n- 智能排序：按文件修改时间排序结果\n- 性能监控：记录搜索耗时和结果统计\n- 权限控制：集成文件读取权限验证💡 设计原则：\n- 性能优先：适配任意规模的代码库搜索\n- 结果精准：精确的正则表达式匹配\n- 用户友好：清晰的搜索结果展示\n- 扩展灵活：支持多种过滤和排序选项"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [
        "Input",
        "Output"
      ],
      "constants": [
        "inputSchema",
        "MAX_RESULTS",
        "GrepTool",
        "start",
        "absolutePath",
        "args",
        "results",
        "stats",
        "matches",
        "timeComparison",
        "output"
      ],
      "lineCount": 250,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\GrepTool\\prompt.ts",
      "relativePath": "src/tools/GrepTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/GrepTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME_FOR_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/BashTool/prompt.ts",
        "src/tools/GrepTool/GrepTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 Grep 工具提示配置 - 高性能内容搜索工具的 AI 指令🏗️ 核心功能：\n- 提供基于正则表达式的快速文件内容搜索\n- 支持大型代码库的高效搜索操作\n- 集成文件过滤和结果排序机制\n- 优化搜索性能和结果呈现💡 设计特点：\n- 性能优先：适配任意规模代码库\n- 灵活过滤：支持文件模式匹配\n- 智能排序：按修改时间排序结果\n- 工具协同：与 Agent 工具的分工协作"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "TOOL_NAME_FOR_PROMPT",
        "DESCRIPTION"
      ],
      "lineCount": 41,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\lsTool\\lsTool.tsx",
      "relativePath": "src/tools/lsTool/lsTool.tsx",
      "name": "lsTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/lsTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "readdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "basename",
            "isAbsolute",
            "join",
            "relative",
            "resolve",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "LSTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/log.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/tools/lsTool/prompt.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/context.ts",
        "src/entrypoints/mcp.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/BashTool/prompt.ts",
        "src/tools.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "listDirectory",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "initialPath: string",
            "cwd: string",
            "abortSignal: AbortSignal"
          ],
          "returnType": "string[]",
          "lineNumber": 132
        },
        {
          "name": "createFileTree",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "sortedPaths: string[]"
          ],
          "returnType": "TreeNode[]",
          "lineNumber": 193
        },
        {
          "name": "printTree",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "tree: TreeNode[]",
            "level",
            "prefix"
          ],
          "returnType": "string",
          "description": "eg.",
          "lineNumber": 241
        },
        {
          "name": "skip",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "path: string"
          ],
          "returnType": "boolean",
          "description": "TODO: Add windows support",
          "lineNumber": 264
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "TreeNode"
      ],
      "constants": [
        "MAX_LINES",
        "MAX_FILES",
        "TRUNCATED_MESSAGE",
        "inputSchema",
        "LSTool",
        "absolutePath",
        "relativePath",
        "verbose",
        "result",
        "fullFilePath",
        "result",
        "safetyWarning",
        "userTree",
        "assistantTree",
        "userData",
        "assistantData",
        "results",
        "queue",
        "path",
        "fileName",
        "root",
        "parts",
        "part",
        "isLastPart",
        "existingNode",
        "newNode"
      ],
      "lineCount": 273,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\lsTool\\prompt.ts",
      "relativePath": "src/tools/lsTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/lsTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/lsTool/lsTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DESCRIPTION"
      ],
      "lineCount": 3,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MCPTool\\MCPTool.tsx",
      "relativePath": "src/tools/MCPTool/MCPTool.tsx",
      "name": "MCPTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/MCPTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../BashTool/OutputLine",
          "imports": [
            "OutputLine"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MCPTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/theme.ts",
        "src/tools/MCPTool/prompt.ts",
        "src/tools/BashTool/OutputLine.tsx"
      ],
      "dependents": [
        "src/services/mcpClient.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "inputSchema",
        "MCPTool",
        "verbose",
        "lines",
        "lines"
      ],
      "lineCount": 108,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MCPTool\\prompt.ts",
      "relativePath": "src/tools/MCPTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/MCPTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/MCPTool/MCPTool.tsx"
      ],
      "comments": {
        "fileHeader": "Actual prompt and description are overridden in mcpClient.ts"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "PROMPT",
        "DESCRIPTION"
      ],
      "lineCount": 4,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MemoryReadTool\\MemoryReadTool.tsx",
      "relativePath": "src/tools/MemoryReadTool/MemoryReadTool.tsx",
      "name": "MemoryReadTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/MemoryReadTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "lstatSync",
            "mkdirSync",
            "readdirSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/env",
          "imports": [
            "MEMORY_DIR"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentStorage",
          "imports": [
            "resolveAgentId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MemoryReadTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/env.ts",
        "src/utils/agentStorage.ts",
        "src/tools/MemoryReadTool/prompt.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "inputSchema",
        "MemoryReadTool",
        "agentId",
        "agentMemoryDir",
        "fullPath",
        "agentId",
        "agentMemoryDir",
        "fullPath",
        "content",
        "files",
        "indexPath",
        "index",
        "quotes",
        "content"
      ],
      "lineCount": 128,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MemoryReadTool\\prompt.ts",
      "relativePath": "src/tools/MemoryReadTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/MemoryReadTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/MemoryReadTool/MemoryReadTool.tsx"
      ],
      "comments": {
        "fileHeader": "Actual prompt and description are overridden in mcpClient.ts"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "PROMPT",
        "DESCRIPTION"
      ],
      "lineCount": 4,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MemoryWriteTool\\MemoryWriteTool.tsx",
      "relativePath": "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
      "name": "MemoryWriteTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/MemoryWriteTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "mkdirSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/env",
          "imports": [
            "MEMORY_DIR"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentStorage",
          "imports": [
            "resolveAgentId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MemoryWriteTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/env.ts",
        "src/utils/agentStorage.ts",
        "src/services/fileFreshness.ts",
        "src/tools/MemoryWriteTool/prompt.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 内存写入工具实现 - AI 代理持久化记忆的核心工具🏗️ 核心功能：\n- 提供 AI 代理的持久化记忆存储能力\n- 支持跨会话的知识和经验保存\n- 集成代理级别的内存空间隔离\n- 实现安全的文件路径验证和保护\n- 生成简洁的内存操作结果反馈🔄 依赖关系：\n- 上游：被 AI 代理调用进行记忆存储操作\n- 下游：依赖文件系统、代理存储、文件监控📊 使用场景：\n- 长期项目的知识积累和经验保存\n- 代理学习结果的持久化存储\n- 跨会话的上下文和状态维护\n- 个性化配置和偏好设置保存🔧 技术实现：\n- 代理隔离：每个代理独立的内存存储空间\n- 路径验证：严格的文件路径安全检查\n- 目录管理：自动创建和管理内存目录结构\n- 编码统一：统一使用 UTF-8 编码格式\n- 监控集成：集成文件变更跟踪和监控💡 设计原则：\n- 安全隔离：确保代理间的内存空间独立\n- 持久可靠：保证记忆数据的长期存储\n- 简洁高效：轻量级的内存操作接口\n- 扩展灵活：支持各种类型的记忆内容"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "inputSchema",
        "MemoryWriteTool",
        "agentId",
        "agentMemoryDir",
        "fullPath",
        "agentId",
        "agentMemoryDir",
        "fullPath"
      ],
      "lineCount": 123,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MemoryWriteTool\\prompt.ts",
      "relativePath": "src/tools/MemoryWriteTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/MemoryWriteTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx"
      ],
      "comments": {
        "fileHeader": "Actual prompt and description are overridden in mcpClient.ts"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "PROMPT",
        "DESCRIPTION"
      ],
      "lineCount": 4,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MultiEditTool\\MultiEditTool.tsx",
      "relativePath": "src/tools/MultiEditTool/MultiEditTool.tsx",
      "name": "MultiEditTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/MultiEditTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync",
            "readFileSync",
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "isAbsolute",
            "relative",
            "resolve",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FileEditToolUpdatedMessage",
          "imports": [
            "FileEditToolUpdatedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "addLineNumbers",
            "detectFileEncoding",
            "detectLineEndings",
            "findSimilarFile",
            "writeTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasWritePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MultiEditTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/StructuredDiff.tsx",
        "src/Tool.ts",
        "src/utils/array.ts",
        "src/utils/log.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/utils/permissions/filesystem.ts",
        "src/constants/product.ts",
        "src/tools/MultiEditTool/prompt.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts",
        "src/utils/diff.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 多重编辑工具实现 - 单文件批量修改的高效工具🏗️ 核心功能：\n- 提供单次操作中的多个编辑点修改能力\n- 支持原子性操作确保所有编辑同时成功或失败\n- 集成智能冲突检测和编辑顺序处理\n- 实现批量替换和精确定位修改\n- 生成详细的编辑操作结果和差异报告🔄 依赖关系：\n- 上游：被 AI 代理调用进行复杂的批量文件编辑\n- 下游：依赖文件系统、编辑验证、差异生成📊 使用场景：\n- 代码重构中的多处同步修改\n- 变量重命名和批量替换操作\n- 多行代码片段的组合修改\n- 配置文件的多项设置批量更新🔧 技术实现：\n- 原子操作：所有编辑要么全部成功要么全部回滚\n- 顺序执行：按编辑列表顺序依次应用修改\n- 冲突预检：编辑前验证所有目标字符串存在\n- 状态追踪：记录每个编辑操作的执行结果\n- 批量模式：支持全文匹配替换和单次替换💡 设计原则：\n- 事务性：确保编辑操作的完整性和一致性\n- 可预测性：严格的编辑顺序和结果可控性\n- 高效率：避免多次文件读写的性能开销\n- 安全可靠：完整的验证和回滚机制"
      },
      "functions": [
        {
          "name": "applyContentEdit",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "content: string",
            "oldString: string",
            "newString: string",
            "replaceAll: boolean"
          ],
          "returnType": "{ newContent: string; occurrences: number }",
          "description": "Local content-based edit function for MultiEditTool",
          "lineNumber": 55
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "In"
      ],
      "constants": [
        "regex",
        "matches",
        "occurrences",
        "newContent",
        "newContent",
        "EditSchema",
        "inputSchema",
        "N_LINES_SNIPPET",
        "MultiEditTool",
        "workingDir",
        "relativePath",
        "editSummary",
        "isError",
        "workingDir",
        "normalizedPath",
        "parentDir",
        "readFileTimestamps",
        "readTimestamp",
        "stats",
        "lastWriteTime",
        "encoding",
        "currentContent",
        "edit",
        "edit",
        "startTime",
        "workingDir",
        "filePath",
        "encoding",
        "parentDir",
        "appliedEdits",
        "edit",
        "result",
        "errorMessage",
        "lineEndings",
        "encoding",
        "relativePath",
        "summary",
        "structuredPatch",
        "resultData",
        "errorMessage",
        "errorResult"
      ],
      "lineCount": 431,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MultiEditTool\\prompt.ts",
      "relativePath": "src/tools/MultiEditTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/MultiEditTool",
      "level": 2,
      "imports": [
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/NotebookEditTool/NotebookEditTool.tsx"
      ],
      "dependents": [
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DESCRIPTION",
        "PROMPT"
      ],
      "lineCount": 46,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\NotebookEditTool\\NotebookEditTool.tsx",
      "relativePath": "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "name": "NotebookEditTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/NotebookEditTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "extname",
            "isAbsolute",
            "relative",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../types/notebook",
          "imports": [
            "NotebookCellType",
            "NotebookContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "detectFileEncoding",
            "detectLineEndings",
            "writeTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasWritePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "NotebookEditTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/HighlightedCode.tsx",
        "src/Tool.ts",
        "src/types/notebook.ts",
        "src/utils/json.ts",
        "src/utils/state.ts",
        "src/tools/NotebookEditTool/prompt.ts",
        "src/utils/permissions/filesystem.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/permissions.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileEditTool/prompt.ts",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/MultiEditTool/prompt.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 Notebook 编辑工具实现 - Jupyter Notebook 专用编辑工具🏗️ 核心功能：\n- 提供 Jupyter Notebook 单元格的精确编辑能力\n- 支持代码和 Markdown 单元格的类型管理\n- 集成单元格的增删改操作和状态管理\n- 实现 Notebook 格式的完整性验证\n- 生成详细的编辑操作反馈和预览🔄 依赖关系：\n- 上游：被 AI 代理调用进行 Notebook 文件编辑\n- 下游：依赖文件系统、JSON 解析、权限管理📊 使用场景：\n- 数据科学项目的代码单元格修改\n- 文档单元格的内容更新和调整\n- Notebook 结构的重组和优化\n- 代码执行结果的清理和重置🔧 技术实现：\n- 格式验证：确保 Notebook JSON 结构完整性\n- 单元格操作：支持替换、插入、删除三种模式\n- 类型管理：自动处理代码和文档单元格差异\n- 状态重置：清理执行计数和输出结果\n- 编码保持：维持原文件的编码和格式💡 设计原则：\n- 专业化：专门针对 Jupyter Notebook 格式优化\n- 完整性：保持 Notebook 的结构和元数据完整\n- 灵活操作：支持多种编辑模式和单元格类型\n- 安全可靠：严格的格式验证和错误处理"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "inputSchema",
        "NotebookEditTool",
        "fullPath",
        "enc",
        "content",
        "notebook",
        "fullPath",
        "enc",
        "content",
        "notebook",
        "language",
        "new_cell",
        "targetCell",
        "endings",
        "updatedNotebook",
        "data",
        "data",
        "data"
      ],
      "lineCount": 332,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\NotebookEditTool\\prompt.ts",
      "relativePath": "src/tools/NotebookEditTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/NotebookEditTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/NotebookEditTool/NotebookEditTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DESCRIPTION",
        "PROMPT"
      ],
      "lineCount": 4,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\NotebookReadTool\\NotebookReadTool.tsx",
      "relativePath": "src/tools/NotebookReadTool/NotebookReadTool.tsx",
      "name": "NotebookReadTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/NotebookReadTool",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ImageBlockParam",
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "extname",
            "isAbsolute",
            "relative",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../types/notebook",
          "imports": [
            "NotebookCellSource",
            "NotebookContent",
            "NotebookCell",
            "NotebookOutputImage",
            "NotebookCellSourceOutput",
            "NotebookCellOutput",
            "NotebookCellType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../BashTool/utils",
          "imports": [
            "formatOutput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file",
          "imports": [
            "findSimilarFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "NotebookReadTool",
          "type": "named"
        },
        {
          "name": "isNotebookCellType",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/types/notebook.ts",
        "src/tools/BashTool/utils.ts",
        "src/utils/state.ts",
        "src/utils/file.ts",
        "src/tools/NotebookReadTool/prompt.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/tools/FileReadTool/prompt.ts",
        "src/tools.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "processOutputText",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "text: string | string[] | undefined"
          ],
          "returnType": "string",
          "lineNumber": 143
        },
        {
          "name": "extractImage",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "data: Record<string, unknown>"
          ],
          "returnType": "NotebookOutputImage | undefined",
          "lineNumber": 150
        },
        {
          "name": "processOutput",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "output: NotebookCellOutput"
          ],
          "lineNumber": 168
        },
        {
          "name": "processCell",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "cell: NotebookCell",
            "index: number",
            "language: string"
          ],
          "returnType": "NotebookCellSource",
          "lineNumber": 192
        },
        {
          "name": "cellContentToToolResult",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "cell: NotebookCellSource"
          ],
          "returnType": "TextBlockParam",
          "lineNumber": 212
        },
        {
          "name": "cellOutputToToolResult",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "output: NotebookCellSourceOutput"
          ],
          "lineNumber": 227
        },
        {
          "name": "getToolResultFromCell",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "cell: NotebookCellSource"
          ],
          "lineNumber": 248
        },
        {
          "name": "isNotebookCellType",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "value: string | null"
          ],
          "returnType": "value is NotebookCellType",
          "lineNumber": 254
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "In",
        "Out"
      ],
      "constants": [
        "inputSchema",
        "NotebookReadTool",
        "fullFilePath",
        "similarFilename",
        "fullPath",
        "content",
        "notebook",
        "language",
        "cells",
        "outputText",
        "rawText",
        "cellData",
        "metadata",
        "cellContent",
        "outputs",
        "contentResult",
        "outputResults"
      ],
      "lineCount": 259,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\NotebookReadTool\\prompt.ts",
      "relativePath": "src/tools/NotebookReadTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/NotebookReadTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DESCRIPTION",
        "PROMPT"
      ],
      "lineCount": 4,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\StickerRequestTool\\prompt.ts",
      "relativePath": "src/tools/StickerRequestTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/StickerRequestTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/StickerRequestTool/StickerRequestTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DESCRIPTION",
        "PROMPT"
      ],
      "lineCount": 20,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\StickerRequestTool\\StickerRequestTool.tsx",
      "relativePath": "src/tools/StickerRequestTool/StickerRequestTool.tsx",
      "name": "StickerRequestTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/StickerRequestTool",
      "level": 2,
      "imports": [
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ToolUseContext",
            "ExtendedToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/StickerRequestForm",
          "imports": [
            "StickerRequestForm",
            "FormData"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "StickerRequestTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/tools/StickerRequestTool/prompt.ts",
        "src/components/StickerRequestForm.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "stickerRequestSchema",
        "StickerRequestTool",
        "formComplete",
        "extendedContext",
        "success"
      ],
      "lineCount": 99,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TaskTool\\constants.ts",
      "relativePath": "src/tools/TaskTool/constants.ts",
      "name": "constants.ts",
      "extension": ".ts",
      "directory": "src/tools/TaskTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/BashTool/prompt.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 TaskTool 常量定义 - 任务工具的核心配置常量🏗️ 核心功能：\n- 定义 TaskTool 在系统中的标准名称标识符\n- 提供工具注册和引用的统一命名规范\n- 确保整个系统中工具名称的一致性🔄 依赖关系：\n- 上游：被 TaskTool 实现和工具注册系统使用\n- 下游：作为基础配置影响工具的识别和调用📊 使用场景：\n- 工具系统的注册和发现机制\n- AI 代理调用工具时的名称匹配\n- 日志记录和调试信息的工具标识\n- 配置文件和权限控制的工具引用💡 设计原则：\n- 简洁明确：使用简短且直观的工具名称\n- 全局统一：确保整个系统中的命名一致性\n- 易于识别：便于开发者和用户理解工具用途"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "TOOL_NAME"
      ],
      "lineCount": 37,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TaskTool\\prompt.ts",
      "relativePath": "src/tools/TaskTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/TaskTool",
      "level": 2,
      "imports": [
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools",
          "imports": [
            "getTools",
            "getReadOnlyTools"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TaskTool",
          "imports": [
            "TaskTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentLoader",
          "imports": [
            "getActiveAgents"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getTaskTools",
          "type": "named"
        },
        {
          "name": "getPrompt",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/tools.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/utils/model.ts",
        "src/utils/agentLoader.ts"
      ],
      "dependents": [
        "src/tools/TaskTool/TaskTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 任务工具提示配置 - AI 代理协调和任务分发的核心指令系统🏗️ 核心功能：\n- 定义多代理系统的协调和任务分发机制\n- 提供动态代理类型选择和工具访问控制\n- 支持并发代理启动和性能优化策略\n- 集成安全模式和只读工具过滤\n- 管理代理生命周期和状态隔离🔄 依赖关系：\n- 上游：被 TaskTool 使用作为代理协调指导\n- 下游：依赖工具系统、模型管理、代理加载器📊 使用场景：\n- 复杂多步骤任务的智能分解\n- 专业化代理的动态调度\n- 并发任务处理的性能优化\n- 安全受限环境的功能控制🔧 技术实现：\n- 代理发现：动态加载和配置活跃代理\n- 工具过滤：基于安全模式的工具访问控制\n- 并发优化：多代理同时启动的性能策略\n- 状态隔离：确保代理间的独立性和安全性💡 设计原则：\n- 自主性：代理具有完整的任务执行能力\n- 专业化：不同代理类型处理特定任务领域\n- 性能优先：并发执行和智能调度\n- 安全可控：严格的权限管理和隔离机制🎭 任务编排架构说明：\n┌─────────────────┐    ┌───────────────────┐    ┌─────────────────┐\n│   主 AI 代理     │───▶│   TaskTool 系统    │───▶│   专业化代理     │\n│  (主要决策)      │    │  (任务编排中心)    │    │  (具体执行)      │\n└─────────────────┘    └───────────────────┘    └─────────────────┘\n│                        │                        │\n▼                        ▼                        ▼\n┌─────────────────┐    ┌───────────────────┐    ┌─────────────────┐\n│   任务分析       │    │   代理选择         │    │   结果聚合       │\n│   优先级评估     │    │   工具分配         │    │   状态同步       │\n│   复杂度判断     │    │   并发控制         │    │   错误处理       │\n└─────────────────┘    └───────────────────┘    └─────────────────┘🔄 任务生命周期流程：\n1. 任务接收 → 2. 复杂度分析 → 3. 代理选择 → 4. 工具分配 → 5. 执行监控 → 6. 结果汇总\n↓           ↓              ↓           ↓           ↓           ↓\n解析需求    评估难度        匹配专家     配置权限     实时跟踪     质量验证"
      },
      "functions": [
        {
          "name": "getTaskTools",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "safeMode: boolean"
          ],
          "returnType": "Promise<Tool[]>",
          "description": "获取任务代理可用工具列表 - 智能工具过滤和权限管理系统这是任务代理工具访问控制的核心函数，负责根据安全策略和执行环境",
          "lineNumber": 109
        },
        {
          "name": "getPrompt",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "safeMode: boolean"
          ],
          "returnType": "Promise<string>",
          "description": "生成任务工具的 AI 提示模板 - 智能代理协调的动态指导系统这是任务编排系统的核心智能组件，负责基于当前系统状态和可用资源",
          "lineNumber": 176
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "agents",
        "agentDescriptions",
        "toolsStr"
      ],
      "lineCount": 287,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TaskTool\\TaskTool.tsx",
      "relativePath": "src/tools/TaskTool/TaskTool.tsx",
      "name": "TaskTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/TaskTool",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "last",
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useState",
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/prompts",
          "imports": [
            "getAgentPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../permissions",
          "imports": [
            "hasPermissionsToUseTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage",
            "MessageType",
            "query"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/format",
          "imports": [
            "formatDuration",
            "formatNumber"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log.js",
          "imports": [
            "getMessagesPath",
            "getNextAvailableLogSidechainNumber",
            "overwriteLog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/markdown",
          "imports": [
            "applyMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages.js",
          "imports": [
            "createAssistantMessage",
            "createUserMessage",
            "getLastAssistantMessageId",
            "INTERRUPT_MESSAGE",
            "normalizeMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/thinking",
          "imports": [
            "getMaxThinkingTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentStorage",
          "imports": [
            "generateAgentId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/debugLogger",
          "imports": [
            "debugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "getTaskTools",
            "getPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants",
          "imports": [
            "TOOL_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentLoader",
          "imports": [
            "getActiveAgents",
            "getAgentByType",
            "getAvailableAgentTypes"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TaskTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/utils/format.tsx",
        "src/utils/markdown.ts",
        "src/utils/model.ts",
        "src/utils/thinking.ts",
        "src/utils/theme.ts",
        "src/utils/agentStorage.ts",
        "src/utils/debugLogger.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools/TaskTool/constants.ts",
        "src/utils/agentLoader.ts"
      ],
      "dependents": [
        "src/entrypoints/mcp.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 任务工具实现 - AI 代理协调和任务分发的核心工具🏗️ 核心功能：\n- 实现多 AI 代理的智能调度和任务分发\n- 提供专业化代理的动态选择机制\n- 支持并发代理执行和性能优化\n- 管理代理生命周期和状态隔离\n- 集成任务日志和结果聚合系统🔄 依赖关系：\n- 上游：被主 AI 代理调用进行任务分解\n- 下游：依赖代理加载器、模型管理、权限系统📊 使用场景：\n- 复杂多步骤任务的智能分解\n- 专业领域问题的代理派发\n- 并发任务处理的性能优化\n- 大型项目的模块化处理🔧 技术实现：\n- 代理发现：动态加载和配置活跃代理\n- 任务路由：基于代理能力的智能分派\n- 并发控制：多代理同时执行的协调\n- 状态管理：代理间的独立性和通信\n- 结果聚合：多代理结果的统一处理💡 设计原则：\n- 自主性：代理具有完整的独立执行能力\n- 专业化：不同代理处理特定领域任务\n- 性能导向：最大化并发执行效率\n- 安全隔离：严格的代理间状态隔离"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "inputSchema",
        "TaskTool",
        "startTime",
        "agentType",
        "agentConfig",
        "availableTypes",
        "helpMessage",
        "messages",
        "isAllArray",
        "modelToUse",
        "getSidechainNumber",
        "taskId",
        "queryOptions",
        "normalizedMessages",
        "preview",
        "toolMessage",
        "modifiedMessage",
        "normalizedMessages",
        "lastMessage",
        "result",
        "data",
        "modelManager",
        "availableModels",
        "availableTypes",
        "agentType",
        "modelManager",
        "defaultTaskModel",
        "actualModel",
        "agentType",
        "promptPreview",
        "theme",
        "theme",
        "textBlocks",
        "totalLength",
        "isInterrupted"
      ],
      "lineCount": 821,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\ThinkTool\\prompt.ts",
      "relativePath": "src/tools/ThinkTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/ThinkTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/ThinkTool/ThinkTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DESCRIPTION",
        "PROMPT"
      ],
      "lineCount": 13,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\ThinkTool\\ThinkTool.tsx",
      "relativePath": "src/tools/ThinkTool/ThinkTool.tsx",
      "name": "ThinkTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/ThinkTool",
      "level": 2,
      "imports": [
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/MessageResponse",
          "imports": [
            "MessageResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "USE_BEDROCK",
            "USE_VERTEX"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ThinkTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/tools/ThinkTool/prompt.ts",
        "src/utils/theme.ts",
        "src/components/MessageResponse.tsx",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/tools.ts",
        "src/utils/thinking.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "thinkToolSchema",
        "ThinkTool"
      ],
      "lineCount": 49,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TodoWriteTool\\prompt.ts",
      "relativePath": "src/tools/TodoWriteTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/TodoWriteTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/TodoWriteTool/TodoWriteTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 Todo 写入工具提示配置 - 任务跟踪和进度管理的 AI 指令🏗️ 核心功能：\n- 定义智能任务跟踪和进度管理规范\n- 提供任务状态管理和工作流控制\n- 支持复杂任务的分解和组织\n- 集成主动任务创建和完成验证💡 设计理念：\n- 主动管理：智能识别需要跟踪的任务\n- 状态控制：严格的任务状态转换规则\n- 进度透明：实时的任务状态更新\n- 质量保证：完整的任务完成验证"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DESCRIPTION",
        "PROMPT"
      ],
      "lineCount": 93,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TodoWriteTool\\TodoWriteTool.tsx",
      "relativePath": "src/tools/TodoWriteTool/TodoWriteTool.tsx",
      "name": "TodoWriteTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/TodoWriteTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/TodoItem",
          "imports": [
            "TodoItemComponent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/todoStorage",
          "imports": [
            "setTodos",
            "getTodos",
            "TodoItem"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "startWatchingTodoFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TodoWriteTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/TodoItem.tsx",
        "src/Tool.ts",
        "src/utils/todoStorage.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts",
        "src/tools/TodoWriteTool/prompt.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ],
      "comments": {
        "fileHeader": "🎯 Todo 写入工具实现 - 任务跟踪和进度管理的核心工具🏗️ 核心功能：\n- 提供智能任务列表的创建和管理功能\n- 支持任务状态的实时更新和进度跟踪\n- 集成任务优先级和完成状态管理\n- 实现多代理环境的任务状态隔离\n- 生成可视化的任务列表展示界面🔄 依赖关系：\n- 上游：被 AI 代理调用进行任务管理操作\n- 下游：依赖任务存储、文件监控、提醒系统📊 使用场景：\n- 复杂任务的分解和进度管理\n- 多步骤工作流的状态跟踪\n- 项目里程碑的完成度监控\n- 团队协作的任务分配和同步🔧 技术实现：\n- 状态验证：确保任务状态的一致性和完整性\n- 代理隔离：支持多代理环境的任务状态独立性\n- 视觉展示：生成彩色编码的任务状态界面\n- 文件监控：实时监控任务文件的变更\n- 事件系统：集成任务变更的提醒和通知💡 设计原则：\n- 主动管理：智能识别和创建需要跟踪的任务\n- 状态可控：严格的任务状态转换和验证规则\n- 用户友好：直观的视觉反馈和进度展示\n- 协作支持：多代理环境的任务状态同步"
      },
      "functions": [
        {
          "name": "validateTodos",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "todos: TodoItem[]"
          ],
          "returnType": "ValidationResult",
          "lineNumber": 61
        },
        {
          "name": "generateTodoSummary",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "todos: TodoItem[]"
          ],
          "returnType": "string",
          "lineNumber": 118
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "TodoItemSchema",
        "inputSchema",
        "ids",
        "uniqueIds",
        "inProgressTasks",
        "stats",
        "TodoWriteTool",
        "isError",
        "currentTodos",
        "sortedTodos",
        "order",
        "nextPendingIndex",
        "todoItems",
        "validation",
        "agentId",
        "previousTodos",
        "todoItems",
        "hasChanged",
        "summary",
        "resultData",
        "errorMessage",
        "errorResult"
      ],
      "lineCount": 347,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\URLFetcherTool\\cache.ts",
      "relativePath": "src/tools/URLFetcherTool/cache.ts",
      "name": "cache.ts",
      "extension": ".ts",
      "directory": "src/tools/URLFetcherTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "urlCache",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/URLFetcherTool/URLFetcherTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [
        {
          "name": "URLCache",
          "isExported": false,
          "methods": [
            "set",
            "get",
            "clear",
            "cleanExpired"
          ],
          "lineNumber": 6
        }
      ],
      "interfaces": [
        "CacheEntry"
      ],
      "types": [],
      "constants": [
        "entry",
        "now",
        "urlCache"
      ],
      "lineCount": 55,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\URLFetcherTool\\htmlToMarkdown.ts",
      "relativePath": "src/tools/URLFetcherTool/htmlToMarkdown.ts",
      "name": "htmlToMarkdown.ts",
      "extension": ".ts",
      "directory": "src/tools/URLFetcherTool",
      "level": 2,
      "imports": [
        {
          "source": "turndown",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "convertHtmlToMarkdown",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/URLFetcherTool/URLFetcherTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "convertHtmlToMarkdown",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "html: string"
          ],
          "returnType": "string",
          "lineNumber": 35
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "turndownService",
        "href",
        "cleanHtml",
        "markdown"
      ],
      "lineCount": 55,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\URLFetcherTool\\prompt.ts",
      "relativePath": "src/tools/URLFetcherTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/URLFetcherTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME_FOR_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/URLFetcherTool/URLFetcherTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "TOOL_NAME_FOR_PROMPT",
        "DESCRIPTION"
      ],
      "lineCount": 18,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\URLFetcherTool\\URLFetcherTool.tsx",
      "relativePath": "src/tools/URLFetcherTool/URLFetcherTool.tsx",
      "name": "URLFetcherTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/URLFetcherTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node-fetch",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "TOOL_NAME_FOR_PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./htmlToMarkdown",
          "imports": [
            "convertHtmlToMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./cache",
          "imports": [
            "urlCache"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "URLFetcherTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/Cost.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/tools/URLFetcherTool/prompt.ts",
        "src/tools/URLFetcherTool/htmlToMarkdown.ts",
        "src/tools/URLFetcherTool/cache.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "normalizeUrl",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "url: string"
          ],
          "returnType": "string",
          "lineNumber": 25
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Input",
        "Output"
      ],
      "constants": [
        "inputSchema",
        "URLFetcherTool",
        "statusText",
        "normalizedUrl",
        "cachedContent",
        "abortController",
        "timeout",
        "response",
        "contentType",
        "html",
        "maxContentLength",
        "truncatedContent",
        "systemPrompt",
        "userPrompt",
        "aiResponse",
        "output",
        "output"
      ],
      "lineCount": 178,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\WebSearchTool\\prompt.ts",
      "relativePath": "src/tools/WebSearchTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/WebSearchTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME_FOR_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/WebSearchTool/WebSearchTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "TOOL_NAME_FOR_PROMPT",
        "DESCRIPTION"
      ],
      "lineCount": 14,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\WebSearchTool\\searchProviders.ts",
      "relativePath": "src/tools/WebSearchTool/searchProviders.ts",
      "name": "searchProviders.ts",
      "extension": ".ts",
      "directory": "src/tools/WebSearchTool",
      "level": 2,
      "imports": [
        {
          "source": "node-fetch",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node-html-parser",
          "imports": [
            "parse"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SearchResult",
          "type": "named"
        },
        {
          "name": "SearchProvider",
          "type": "named"
        },
        {
          "name": "searchProviders",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/WebSearchTool/WebSearchTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [
        "SearchResult",
        "SearchProvider"
      ],
      "types": [],
      "constants": [
        "duckDuckGoSearchProvider",
        "response",
        "html",
        "root",
        "results",
        "resultNodes",
        "titleNode",
        "snippetNode",
        "title",
        "link",
        "snippet",
        "url",
        "searchProviders"
      ],
      "lineCount": 67,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\WebSearchTool\\WebSearchTool.tsx",
      "relativePath": "src/tools/WebSearchTool/WebSearchTool.tsx",
      "name": "WebSearchTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/WebSearchTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "TOOL_NAME_FOR_PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./searchProviders",
          "imports": [
            "SearchResult",
            "searchProviders"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "WebSearchTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/Cost.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/tools/WebSearchTool/prompt.ts",
        "src/tools/WebSearchTool/searchProviders.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [
        "Input",
        "Output"
      ],
      "constants": [
        "inputSchema",
        "WebSearchTool",
        "start",
        "searchResults",
        "output",
        "output"
      ],
      "lineCount": 104,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools.ts",
      "relativePath": "src/tools.ts",
      "name": "tools.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "./Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/TaskTool/TaskTool",
          "imports": [
            "TaskTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/ArchitectTool/ArchitectTool",
          "imports": [
            "ArchitectTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/AskExpertModelTool/AskExpertModelTool",
          "imports": [
            "AskExpertModelTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/MultiEditTool/MultiEditTool",
          "imports": [
            "MultiEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/NotebookReadTool/NotebookReadTool",
          "imports": [
            "NotebookReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/MemoryReadTool/MemoryReadTool",
          "imports": [
            "MemoryReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/MemoryWriteTool/MemoryWriteTool",
          "imports": [
            "MemoryWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/ThinkTool/ThinkTool",
          "imports": [
            "ThinkTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/TodoWriteTool/TodoWriteTool",
          "imports": [
            "TodoWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/WebSearchTool/WebSearchTool",
          "imports": [
            "WebSearchTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/URLFetcherTool/URLFetcherTool",
          "imports": [
            "URLFetcherTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/mcpClient",
          "imports": [
            "getMCPTools"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getAllTools",
          "type": "named"
        },
        {
          "name": "getTools",
          "type": "named"
        },
        {
          "name": "getReadOnlyTools",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/tools/WebSearchTool/WebSearchTool.tsx",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/services/mcpClient.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/tools/TaskTool/prompt.ts"
      ],
      "comments": {
        "fileHeader": "🎯 工具系统核心注册表 - Kode 工具生态系统的中央管理层🏗️ 核心功能：\n- 实现所有工具的统一注册和管理机制\n- 提供基于权限和配置的工具过滤系统\n- 集成 MCP (Model Context Protocol) 外部工具\n- 支持工具的动态加载、缓存和可用性检查\n- 管理内部专用工具的访问控制🔄 依赖关系：\n- 上游：被 AI 服务和命令系统使用\n- 下游：依赖各个工具实现和 MCP 客户端📊 使用场景：\n- AI 代理的工具能力获取\n- 权限受限环境的只读工具提供\n- 外部 MCP 工具的动态集成\n- 工具生态的统一管理和扩展🔧 技术实现：\n- 注册模式：集中式工具注册和导出\n- 权限控制：基于用户类型的工具过滤\n- 缓存优化：memoize 避免重复初始化\n- 动态加载：支持异步工具能力检查\n- 扩展支持：MCP 协议的无缝集成🎯 工具分类：\n- 核心协调：任务编排和专家咨询\n- 系统操作：命令行和文件系统访问\n- 文件管理：读取、编辑、搜索和导航\n- 认知工具：思考过程和任务管理\n- 网络功能：搜索和内容获取\n- 内部专用：内存管理等高级功能💡 设计原则：\n- 模块化：每个工具独立实现和注册\n- 安全性：严格的权限控制和验证\n- 扩展性：支持 MCP 和插件机制\n- 性能优化：智能缓存和懒加载"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "ANT_ONLY_TOOLS",
        "getAllTools",
        "getTools",
        "tools",
        "isEnabled",
        "getReadOnlyTools",
        "tools",
        "isEnabled"
      ],
      "lineCount": 234,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\common.d.ts",
      "relativePath": "src/types/common.d.ts",
      "name": "common.d.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [],
      "dependencies": [],
      "dependents": [],
      "comments": {
        "fileHeader": "🎯 通用类型定义 - 项目通用的基础类型🏗️ 核心功能：\n- 提供项目中使用的通用类型定义\n- 确保类型安全和一致性\n- 简化其他模块的类型导入🔄 依赖关系：\n- 上游：被整个项目的类型系统使用\n- 下游：基础类型定义，无外部依赖📊 使用场景：\n- 统一的 UUID 类型定义\n- 跨模块的类型一致性保证\n- TypeScript 类型检查和推断🔧 技术实现：\n- 使用 TypeScript 模板字面量类型\n- 严格的 UUID 格式验证\n- 类型级别的字符串格式约束"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [
        "UUID"
      ],
      "constants": [],
      "lineCount": 36,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\conversation.ts",
      "relativePath": "src/types/conversation.ts",
      "name": "conversation.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "MessageParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "APIAssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "UserMessage",
          "type": "named"
        },
        {
          "name": "AssistantMessage",
          "type": "named"
        },
        {
          "name": "ProgressMessage",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/utils/debugLogger.ts"
      ],
      "comments": {
        "fileHeader": "🎯 对话与消息系统类型定义 - 统一的消息处理框架🏗️ 核心功能：\n- 定义用户、助手和进度消息的统一接口\n- 支持工具调用结果的集成和传递\n- 提供完整的对话会话类型安全\n- 集成成本追踪和性能监控数据🔄 依赖关系：\n- 上游：被调试日志器和对话相关工具使用\n- 下游：依赖 Anthropic AI SDK 和 crypto UUID📊 使用场景：\n- 对话历史的序列化和反序列化\n- 消息流的类型安全处理\n- 工具执行结果的消息集成\n- 调试和日志记录的统一接口🔧 技术实现：\n- 与 query.ts 中的 Message 类型保持一致\n- 支持 Anthropic AI SDK 的原生消息格式\n- 包含完整的元数据和选项配置\n- 类型安全的联合类型定义"
      },
      "functions": [],
      "classes": [],
      "interfaces": [
        "UserMessage",
        "AssistantMessage",
        "ProgressMessage"
      ],
      "types": [
        "Message"
      ],
      "constants": [],
      "lineCount": 98,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\logs.ts",
      "relativePath": "src/types/logs.ts",
      "name": "logs.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SerializedMessage",
          "type": "named"
        },
        {
          "name": "LogOption",
          "type": "named"
        },
        {
          "name": "LogListProps",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/LogSelector.tsx",
        "src/screens/LogList.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/utils/log.ts"
      ],
      "comments": {
        "fileHeader": "🎯 日志系统类型定义 - 完整的对话日志管理框架🏗️ 核心功能：\n- 支持对话消息的序列化和持久化存储\n- 管理对话日志的索引和元数据\n- 提供日志选择和浏览的完整接口\n- 支持会话分支和历史记录管理🔄 依赖关系：\n- 上游：被日志选择器、日志列表和日志工具使用\n- 下游：依赖 crypto UUID 和消息系统📊 使用场景：\n- 对话历史的持久化存储和检索\n- 日志文件的浏览和管理界面\n- 会话恢复和分支管理\n- 对话数据的统计和分析🔧 技术实现：\n- 基于 log.ts 中的序列化/反序列化机制\n- 支持多种消息类型的完整记录\n- 包含丰富的元数据和时间戳信息\n- 优化的日志索引和搜索结构"
      },
      "functions": [],
      "classes": [],
      "interfaces": [
        "SerializedMessage",
        "LogOption",
        "LogListProps"
      ],
      "types": [],
      "constants": [],
      "lineCount": 104,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\modelCapabilities.ts",
      "relativePath": "src/types/modelCapabilities.ts",
      "name": "modelCapabilities.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "ModelCapabilities",
          "type": "named"
        },
        {
          "name": "UnifiedRequestParams",
          "type": "named"
        },
        {
          "name": "UnifiedResponse",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/constants/modelCapabilities.ts",
        "src/services/adapters/base.ts",
        "src/services/adapters/chatCompletions.ts",
        "src/services/adapters/responsesAPI.ts",
        "src/services/claude.ts",
        "src/services/modelAdapterFactory.ts"
      ],
      "comments": {
        "fileHeader": "🎯 模型能力类型定义 - 统一 API 支持的完整框架🏗️ 核心功能：\n- 定义不同 AI 模型的能力和限制\n- 提供统一的请求和响应接口\n- 支持多种 API 架构的适配和回退\n- 管理工具调用和状态管理能力🔄 依赖关系：\n- 上游：被模型适配器和服务层使用\n- 下游：适配各种 AI 模型 API（OpenAI、Anthropic 等）📊 使用场景：\n- 多模型支持的统一接口实现\n- 模型能力检测和功能启用\n- API 调用参数的标准化处理\n- 不同模型间的兼容性管理🔧 技术实现：\n- 支持 Chat Completions 和 Responses API 两种架构\n- 完整的工具调用能力定义\n- 灵活的参数映射和适配机制\n- 统一的流式传输和状态管理"
      },
      "functions": [],
      "classes": [],
      "interfaces": [
        "ModelCapabilities",
        "UnifiedRequestParams",
        "UnifiedResponse"
      ],
      "types": [],
      "constants": [],
      "lineCount": 129,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\notebook.ts",
      "relativePath": "src/types/notebook.ts",
      "name": "notebook.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "NotebookOutputImage",
          "type": "named"
        },
        {
          "name": "NotebookCellSourceOutput",
          "type": "named"
        },
        {
          "name": "NotebookCellSource",
          "type": "named"
        },
        {
          "name": "NotebookCellOutput",
          "type": "named"
        },
        {
          "name": "NotebookCell",
          "type": "named"
        },
        {
          "name": "NotebookContent",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 Jupyter 笔记本功能类型定义 - 完整的笔记本处理框架🏗️ 核心功能：\n- 支持完整的 Jupyter 笔记本结构解析\n- 处理代码和 Markdown 单元格类型\n- 管理单元格输出和执行结果\n- 提供图像输出的完整支持🔄 依赖关系：\n- 上游：被 NotebookReadTool 和 NotebookEditTool 使用\n- 下游：兼容标准 .ipynb 文件格式📊 使用场景：\n- 读取和编辑 Jupyter 笔记本文件\n- 执行代码单元格并收集输出\n- 显示图像和富文本输出\n- 笔记本内容的结构化处理🔧 技术实现：\n- 完全兼容 Jupyter 笔记本 v4 格式\n- 支持多种输出类型和媒体格式\n- 区分原始数据和处理后的显示格式\n- 类型安全的单元格操作接口"
      },
      "functions": [],
      "classes": [],
      "interfaces": [
        "NotebookOutputImage",
        "NotebookCellSourceOutput",
        "NotebookCellSource",
        "NotebookCellOutput",
        "NotebookCell",
        "NotebookContent"
      ],
      "types": [
        "NotebookCellType"
      ],
      "constants": [],
      "lineCount": 155,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\PermissionMode.ts",
      "relativePath": "src/types/PermissionMode.ts",
      "name": "PermissionMode.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "PermissionContext",
          "type": "named"
        },
        {
          "name": "ModeConfig",
          "type": "named"
        },
        {
          "name": "MODE_CONFIGS",
          "type": "named"
        },
        {
          "name": "getNextPermissionMode",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/context/PermissionContext.tsx"
      ],
      "comments": {
        "fileHeader": "🎯 权限模式管理系统 - 基于 Claude Code 的权限控制机制🏗️ 核心功能：\n- 提供四种权限模式的完整定义和配置\n- 管理工具访问权限和路径限制\n- 支持权限模式间的安全切换\n- 实现细粒度的操作控制和验证🔄 依赖关系：\n- 上游：被权限系统和工具执行器调用\n- 下游：控制所有工具和文件系统操作📊 使用场景：\n- 交互式会话中的权限模式切换\n- 自动化脚本的权限控制\n- 计划模式下的只读操作限制\n- 开发调试时的权限绕过🔧 技术实现：\n- 基于官方 Claude Code 实现的权限模式设计\n- 使用类型安全的模式定义和配置\n- 支持权限模式的循环切换机制\n- 包含详细的限制和元数据管理"
      },
      "functions": [
        {
          "name": "getNextPermissionMode",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "currentMode: PermissionMode",
            "isBypassAvailable: boolean"
          ],
          "returnType": "PermissionMode",
          "description": "权限模式循环切换函数 - 基于原始 yg2 函数实现按照预定的顺序在不同权限模式间切换，支持可选的绕过权限模式。切换顺序：",
          "lineNumber": 190
        }
      ],
      "classes": [],
      "interfaces": [
        "PermissionContext",
        "ModeConfig"
      ],
      "types": [
        "PermissionMode"
      ],
      "constants": [
        "MODE_CONFIGS"
      ],
      "lineCount": 207,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\RequestContext.ts",
      "relativePath": "src/types/RequestContext.ts",
      "name": "RequestContext.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "RequestContext",
          "type": "named"
        },
        {
          "name": "AbortBarrier",
          "type": "named"
        },
        {
          "name": "createRequestContext",
          "type": "named"
        },
        {
          "name": "createAbortBarrier",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [],
      "comments": {
        "fileHeader": "🎯 请求上下文管理器 - 完美状态隔离机制🏗️ 核心功能：\n- 为每个请求创建独立的上下文和取消控制器\n- 提供完美的状态隔离，避免请求间相互干扰\n- 支持多种请求类型的生命周期管理\n- 实现安全的请求取消和清理机制🔄 依赖关系：\n- 上游：被工具执行系统和查询处理器调用\n- 下游：依赖浏览器原生 AbortController API📊 使用场景：\n- 用户查询处理时创建请求上下文\n- 工具执行期间的状态管理\n- 长时间运行任务的取消控制\n- 多请求并发时的状态隔离🔧 技术实现：\n- 基于官方 Kode 模式的状态隔离设计\n- 使用 crypto.randomUUID() 生成唯一标识\n- AbortController 实现优雅的取消机制\n- 事件监听器的自动清理防止内存泄漏"
      },
      "functions": [
        {
          "name": "createRequestContext",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "type: RequestContext['type']"
          ],
          "returnType": "RequestContext",
          "description": "创建新的请求上下文@param type - 请求类型，默认为 'query'",
          "lineNumber": 74
        },
        {
          "name": "createAbortBarrier",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "requestContext: RequestContext"
          ],
          "returnType": "AbortBarrier",
          "description": "创建取消屏障 - 为请求提供安全的取消机制该函数创建一个取消屏障，确保只有特定请求的取消信号被响应，",
          "lineNumber": 114
        }
      ],
      "classes": [],
      "interfaces": [
        "RequestContext",
        "AbortBarrier"
      ],
      "types": [],
      "constants": [
        "abortHandler"
      ],
      "lineCount": 156,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\advancedFuzzyMatcher.ts",
      "relativePath": "src/utils/advancedFuzzyMatcher.ts",
      "name": "advancedFuzzyMatcher.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "MatchResult",
          "type": "named"
        },
        {
          "name": "AdvancedFuzzyMatcher",
          "type": "named"
        },
        {
          "name": "advancedMatcher",
          "type": "named"
        },
        {
          "name": "matchAdvanced",
          "type": "named"
        },
        {
          "name": "matchManyAdvanced",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/utils/fuzzyMatcher.ts"
      ],
      "comments": {
        "fileHeader": "Advanced Fuzzy Matching Algorithm\nInspired by:\n- Chinese Pinyin input methods (Sogou, Baidu)\n- IDE intelligent completion (VSCode, IntelliJ)\n- Terminal fuzzy finders (fzf, peco)\nKey features:\n- Hyphen-aware matching (dao → dao-qi-harmony)\n- Numeric suffix matching (py3 → python3)\n- Abbreviation matching (dq → dao-qi)\n- Subsequence matching\n- Word boundary bonus"
      },
      "functions": [
        {
          "name": "matchAdvanced",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "candidate: string",
            "query: string"
          ],
          "returnType": "MatchResult",
          "lineNumber": 270
        },
        {
          "name": "matchManyAdvanced",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "candidates: string[]",
            "query: string",
            "minScore: number"
          ],
          "returnType": "Array<{ candidate: string; score: number; algorithm: string }>",
          "lineNumber": 274
        }
      ],
      "classes": [
        {
          "name": "AdvancedFuzzyMatcher",
          "isExported": true,
          "methods": [
            "match",
            "exactPrefixMatch",
            "hyphenAwareMatch",
            "wordBoundaryMatch",
            "abbreviationMatch",
            "numericSuffixMatch",
            "subsequenceMatch",
            "fuzzySegmentMatch"
          ],
          "lineNumber": 23
        }
      ],
      "interfaces": [
        "MatchResult"
      ],
      "types": [],
      "constants": [
        "text",
        "pattern",
        "algorithms",
        "coverage",
        "words",
        "coverage",
        "concatenated",
        "coverage",
        "words",
        "gap",
        "spread",
        "patternMatch",
        "textWithoutSuffix",
        "coverage",
        "abbrevResult",
        "spread",
        "cleanText",
        "cleanPattern",
        "coverage",
        "index",
        "positionPenalty",
        "advancedMatcher",
        "result"
      ],
      "lineCount": 290,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\agentLoader.ts",
      "relativePath": "src/utils/agentLoader.ts",
      "name": "agentLoader.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "readdirSync",
            "statSync",
            "watch",
            "FSWatcher"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "gray-matter",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AgentConfig",
          "type": "named"
        },
        {
          "name": "getActiveAgents",
          "type": "named"
        },
        {
          "name": "getAllAgents",
          "type": "named"
        },
        {
          "name": "clearAgentCache",
          "type": "named"
        },
        {
          "name": "getAgentByType",
          "type": "named"
        },
        {
          "name": "getAvailableAgentTypes",
          "type": "named"
        },
        {
          "name": "startAgentWatcher",
          "type": "named"
        },
        {
          "name": "stopAgentWatcher",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/components/messages/TaskToolMessage.tsx",
        "src/entrypoints/cli.tsx",
        "src/hooks/useUnifiedCompletion.ts",
        "src/services/mentionProcessor.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ],
      "comments": {
        "fileHeader": "Agent configuration loader\nLoads agent configurations from markdown files with YAML frontmatter\nFollowing Claude Code's agent system architecture"
      },
      "functions": [
        {
          "name": "parseTools",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "tools: any"
          ],
          "returnType": "string[] | '*'",
          "description": "Parse tools field from frontmatter",
          "lineNumber": 51
        },
        {
          "name": "scanAgentDirectory",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "dirPath: string",
            "location: 'user' | 'project'"
          ],
          "returnType": "Promise<AgentConfig[]>",
          "description": "Scan a directory for agent configuration files",
          "lineNumber": 68
        },
        {
          "name": "loadAllAgents",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<{\n  activeAgents: AgentConfig[]\n  allAgents: AgentConfig[]\n}>",
          "description": "Load all agent configurations",
          "lineNumber": 130
        },
        {
          "name": "clearAgentCache",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "description": "Clear cache when needed",
          "lineNumber": 202
        },
        {
          "name": "startAgentWatcher",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "onChange: () => void"
          ],
          "returnType": "Promise<void>",
          "description": "Start watching agent configuration directories for changes",
          "lineNumber": 231
        },
        {
          "name": "stopAgentWatcher",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<void>",
          "description": "Stop watching agent configuration directories",
          "lineNumber": 265
        }
      ],
      "classes": [],
      "interfaces": [
        "AgentConfig"
      ],
      "types": [],
      "constants": [
        "warnedAgents",
        "BUILTIN_GENERAL_PURPOSE",
        "filteredTools",
        "agents",
        "files",
        "filePath",
        "stat",
        "content",
        "agent",
        "userClaudeDir",
        "userKodeDir",
        "projectClaudeDir",
        "projectKodeDir",
        "builtinAgents",
        "agentMap",
        "activeAgents",
        "allAgents",
        "getActiveAgents",
        "getAllAgents",
        "getAgentByType",
        "agents",
        "getAvailableAgentTypes",
        "agents",
        "userClaudeDir",
        "userKodeDir",
        "projectClaudeDir",
        "projectKodeDir",
        "watchDirectory",
        "watcher"
      ],
      "lineCount": 279,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\agentStorage.ts",
      "relativePath": "src/utils/agentStorage.ts",
      "name": "agentStorage.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync",
            "mkdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getAgentFilePath",
          "type": "named"
        },
        {
          "name": "readAgentData",
          "type": "named"
        },
        {
          "name": "writeAgentData",
          "type": "named"
        },
        {
          "name": "getDefaultAgentId",
          "type": "named"
        },
        {
          "name": "resolveAgentId",
          "type": "named"
        },
        {
          "name": "generateAgentId",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/services/fileFreshness.ts",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/todoStorage.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getConfigDirectory",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "Get the kode config directory",
          "lineNumber": 15
        },
        {
          "name": "getSessionId",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "Get the current session ID",
          "lineNumber": 22
        },
        {
          "name": "getAgentFilePath",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "agentId: string"
          ],
          "returnType": "string",
          "description": "Generate agent-specific file path",
          "lineNumber": 32
        },
        {
          "name": "readAgentData",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "agentId: string"
          ],
          "returnType": "T | null",
          "description": "Read agent-specific data from storage",
          "lineNumber": 48
        },
        {
          "name": "writeAgentData",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "agentId: string",
            "data: T"
          ],
          "returnType": "void",
          "description": "Write agent-specific data to storage",
          "lineNumber": 67
        },
        {
          "name": "getDefaultAgentId",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "Get default agent ID if none is provided",
          "lineNumber": 81
        },
        {
          "name": "resolveAgentId",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "agentId: string"
          ],
          "returnType": "string",
          "description": "Resolve agent ID from context",
          "lineNumber": 88
        },
        {
          "name": "generateAgentId",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "Generate a new unique Agent ID",
          "lineNumber": 95
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "sessionId",
        "filename",
        "configDir",
        "filePath",
        "content",
        "filePath"
      ],
      "lineCount": 98,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\array.ts",
      "relativePath": "src/utils/array.ts",
      "name": "array.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "intersperse",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "intersperse",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "as: A[]",
            "separator: (index: number) => A"
          ],
          "returnType": "A[]",
          "lineNumber": 1
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 4,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\ask.tsx",
      "relativePath": "src/utils/ask.tsx",
      "name": "ask.tsx",
      "extension": ".tsx",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "last"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/prompts",
          "imports": [
            "getSystemPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../cost-tracker",
          "imports": [
            "getTotalCost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message",
            "query"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useCanUseTool",
          "imports": [
            "CanUseToolFn"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "setCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "getMessagesPath",
            "overwriteLog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages",
          "imports": [
            "createUserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ask",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/cost-tracker.ts",
        "src/query.ts",
        "src/hooks/useCanUseTool.ts",
        "src/Tool.ts",
        "src/utils/model.ts",
        "src/utils/state.ts",
        "src/utils/log.ts",
        "src/utils/messages.tsx"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ask",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "{\n  commands,\n  safeMode,\n  hasPermissionsToUseTool,\n  messageLogName,\n  prompt,\n  cwd,\n  tools,\n  verbose = false,\n}"
          ],
          "returnType": "Promise<{\n  resultText: string\n  totalCost: number\n  messageHistoryFile: string\n}>",
          "description": "ask the user for permissions or further input.",
          "lineNumber": 28
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "Props"
      ],
      "constants": [
        "message",
        "messages",
        "result",
        "messageHistoryFile"
      ],
      "lineCount": 100,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\auth.ts",
      "relativePath": "src/utils/auth.ts",
      "name": "auth.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./model",
          "imports": [
            "USE_BEDROCK",
            "USE_VERTEX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "isAnthropicAuthEnabled",
          "type": "named"
        },
        {
          "name": "isLoggedInToAnthropic",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/model.ts",
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/commands/login.tsx",
        "src/commands.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "isAnthropicAuthEnabled",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "boolean",
          "lineNumber": 4
        },
        {
          "name": "isLoggedInToAnthropic",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "boolean",
          "lineNumber": 9
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 14,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\autoCompactCore.ts",
      "relativePath": "src/utils/autoCompactCore.ts",
      "name": "autoCompactCore.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tokens",
          "imports": [
            "countTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesGetter",
            "getMessagesSetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/style",
          "imports": [
            "getCodeStyle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/fileFreshness",
          "imports": [
            "resetFileFreshnessSession"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "createUserMessage",
            "normalizeMessagesForAPI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "queryLLM"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./fileRecoveryCore",
          "imports": [
            "selectAndReadFiles"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./file",
          "imports": [
            "addLineNumbers"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "checkAutoCompact",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/tokens.ts",
        "src/messages.ts",
        "src/context.ts",
        "src/utils/style.ts",
        "src/utils/terminal.ts",
        "src/services/fileFreshness.ts",
        "src/utils/messages.tsx",
        "src/services/claude.ts",
        "src/utils/fileRecoveryCore.ts",
        "src/utils/file.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/query.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getCompressionModelContextLimit",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<number>",
          "description": "Retrieves the context length for the main model that should execute compression",
          "lineNumber": 24
        },
        {
          "name": "calculateThresholds",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "tokenCount: number"
          ],
          "description": "Calculates context usage thresholds based on the main model's capabilities",
          "lineNumber": 73
        },
        {
          "name": "shouldAutoCompact",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "messages: Message[]"
          ],
          "returnType": "Promise<boolean>",
          "description": "Determines if auto-compact should trigger based on token usage",
          "lineNumber": 89
        },
        {
          "name": "checkAutoCompact",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "messages: Message[]",
            "toolUseContext: any"
          ],
          "returnType": "Promise<{ messages: Message[]; wasCompacted: boolean }>",
          "description": "Main entry point for automatic context compressionThis function is called before each query to check if the conversation",
          "lineNumber": 113
        },
        {
          "name": "executeAutoCompact",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "messages: Message[]",
            "toolUseContext: any"
          ],
          "returnType": "Promise<Message[]>",
          "description": "Executes the conversation compression process using the main modelThis function generates a comprehensive summary using the main model",
          "lineNumber": 146
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "AUTO_COMPACT_THRESHOLD_RATIO",
        "modelManager",
        "modelProfile",
        "COMPRESSION_PROMPT",
        "contextLimit",
        "autoCompactThreshold",
        "tokenCount",
        "compactedMessages",
        "summaryRequest",
        "summaryResponse",
        "content",
        "summary",
        "recoveredFiles",
        "compactedMessages",
        "contentWithLines",
        "recoveryMessage"
      ],
      "lineCount": 224,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\autoUpdater.ts",
      "relativePath": "src/utils/autoUpdater.ts",
      "name": "autoUpdater.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "semver",
          "imports": [
            "lt",
            "gt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "isAutoUpdaterDisabled"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "assertMinVersion",
          "type": "named"
        },
        {
          "name": "getLatestVersion",
          "type": "named"
        },
        {
          "name": "getUpdateCommandSuggestions",
          "type": "named"
        },
        {
          "name": "checkAndNotifyUpdate",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/execFileNoThrow.ts",
        "src/utils/log.ts",
        "src/constants/macros.ts",
        "src/constants/product.ts",
        "src/utils/config.ts",
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "assertMinVersion",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<void>",
          "description": "Ensure current version meets minimum supported version; exit if too old",
          "lineNumber": 15
        },
        {
          "name": "getLatestVersion",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<string | null>",
          "description": "Get latest version from npm (via npm CLI or HTTP fallback)",
          "lineNumber": 35
        },
        {
          "name": "getUpdateCommandSuggestions",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<string[]>",
          "description": "Suggest manual update commands; prefer Bun first, then npm",
          "lineNumber": 77
        },
        {
          "name": "checkAndNotifyUpdate",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<void>",
          "description": "Optional: background notifier that prints a simple banner",
          "lineNumber": 85
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "VersionConfig"
      ],
      "constants": [
        "versionConfig",
        "suggestions",
        "abortController",
        "result",
        "v",
        "controller",
        "timer",
        "res",
        "json",
        "latest",
        "config",
        "now",
        "DAY_MS",
        "lastCheck",
        "latest",
        "suggestions"
      ],
      "lineCount": 122,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\browser.ts",
      "relativePath": "src/utils/browser.ts",
      "name": "browser.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "openBrowser",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/execFileNoThrow.ts"
      ],
      "dependents": [
        "src/components/Bug.tsx",
        "src/services/oauth.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "openBrowser",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "url: string"
          ],
          "returnType": "Promise<boolean>",
          "lineNumber": 3
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "platform",
        "command"
      ],
      "lineCount": 15,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\cleanup.ts",
      "relativePath": "src/utils/cleanup.ts",
      "name": "cleanup.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "fs"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "CACHE_PATHS"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "convertFileNameToDate",
          "type": "named"
        },
        {
          "name": "cleanupOldMessageFiles",
          "type": "named"
        },
        {
          "name": "cleanupOldMessageFilesInBackground",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "convertFileNameToDate",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filename: string"
          ],
          "returnType": "Date",
          "lineNumber": 13
        },
        {
          "name": "cleanupOldMessageFiles",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<CleanupResult>",
          "lineNumber": 20
        },
        {
          "name": "cleanupOldMessageFilesInBackground",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 67
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "CleanupResult"
      ],
      "constants": [
        "THIRTY_DAYS_MS",
        "isoStr",
        "messagePath",
        "errorPath",
        "thirtyDaysAgo",
        "deletedCounts",
        "files",
        "timestamp",
        "immediate"
      ],
      "lineCount": 73,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\commands.ts",
      "relativePath": "src/utils/commands.ts",
      "name": "commands.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "API_ERROR_MESSAGE_PREFIX",
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "shell-quote",
          "imports": [
            "ControlOperator",
            "parse",
            "ParseEntry"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "splitCommand",
          "type": "named"
        },
        {
          "name": "getCommandSubcommandPrefix",
          "type": "named"
        },
        {
          "name": "isUnsafeCompoundCommand",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/claude.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx",
        "src/components/permissions/toolUseOptions.ts",
        "src/hooks/useCanUseTool.ts",
        "src/permissions.ts",
        "src/tools/BashTool/BashTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "splitCommand",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "command: string"
          ],
          "returnType": "string[]",
          "description": "Splits a command string into individual commands based on shell operators",
          "lineNumber": 24
        },
        {
          "name": "isCommandList",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "command: string"
          ],
          "returnType": "boolean",
          "description": "Checks if this is just a list of commands",
          "lineNumber": 228
        },
        {
          "name": "isUnsafeCompoundCommand",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "command: string"
          ],
          "returnType": "boolean",
          "lineNumber": 259
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "CommandPrefixResult",
        "CommandSubcommandPrefixResult"
      ],
      "constants": [
        "SINGLE_QUOTE",
        "DOUBLE_QUOTE",
        "parts",
        "stringParts",
        "quotedParts",
        "getCommandSubcommandPrefix",
        "subcommands",
        "subcommandPrefixes",
        "getCommandPrefix",
        "response",
        "prefix",
        "COMMAND_LIST_SEPARATORS"
      ],
      "lineCount": 262,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\commonUnixCommands.ts",
      "relativePath": "src/utils/commonUnixCommands.ts",
      "name": "commonUnixCommands.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "COMMON_UNIX_COMMANDS",
          "type": "named"
        },
        {
          "name": "getCommonSystemCommands",
          "type": "named"
        },
        {
          "name": "getCommandPriority",
          "type": "named"
        },
        {
          "name": "getEssentialCommands",
          "type": "named"
        },
        {
          "name": "getMinimalFallbackCommands",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/hooks/useUnifiedCompletion.ts"
      ],
      "comments": {
        "fileHeader": "Common Unix Commands Database\nA curated list of 500+ most frequently used Unix/Linux commands\nfor developers and system administrators.\nCategories:\n- File & Directory Operations\n- Text Processing\n- Process Management\n- Network Tools\n- Development Tools\n- System Administration\n- Package Management\n- Version Control"
      },
      "functions": [
        {
          "name": "getCommonSystemCommands",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "systemCommands: string[]"
          ],
          "returnType": "string[]",
          "description": "Get common commands that exist on the current system",
          "lineNumber": 120
        },
        {
          "name": "getCommandPriority",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "command: string"
          ],
          "returnType": "number",
          "description": "Get a priority score for a command based on its position in the common list",
          "lineNumber": 131
        },
        {
          "name": "getEssentialCommands",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string[]",
          "description": "Get essential fallback commands for when PATH is empty or unavailable",
          "lineNumber": 145
        },
        {
          "name": "getMinimalFallbackCommands",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string[]",
          "description": "Get minimal fallback commands for error scenarios",
          "lineNumber": 157
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "COMMON_UNIX_COMMANDS",
        "systemSet",
        "commonIntersection",
        "index",
        "maxScore",
        "score"
      ],
      "lineCount": 161,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\config.ts",
      "relativePath": "src/utils/config.ts",
      "name": "config.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "resolve",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "cloneDeep",
            "memoize",
            "pick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./env",
          "imports": [
            "GLOBAL_CLAUDE_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomBytes"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./errors",
          "imports": [
            "ConfigParseError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./theme",
          "imports": [
            "ThemeNames"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./debugLogger",
          "imports": [
            "debugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./sessionState",
          "imports": [
            "getSessionState",
            "setSessionState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./model",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "isAutoUpdaterStatus",
          "type": "named"
        },
        {
          "name": "DEFAULT_GLOBAL_CONFIG",
          "type": "named"
        },
        {
          "name": "GLOBAL_CONFIG_KEYS",
          "type": "named"
        },
        {
          "name": "isGlobalConfigKey",
          "type": "named"
        },
        {
          "name": "PROJECT_CONFIG_KEYS",
          "type": "named"
        },
        {
          "name": "checkHasTrustDialogAccepted",
          "type": "named"
        },
        {
          "name": "isProjectConfigKey",
          "type": "named"
        },
        {
          "name": "saveGlobalConfig",
          "type": "named"
        },
        {
          "name": "getGlobalConfig",
          "type": "named"
        },
        {
          "name": "getAnthropicApiKey",
          "type": "named"
        },
        {
          "name": "normalizeApiKeyForConfig",
          "type": "named"
        },
        {
          "name": "getCustomApiKeyStatus",
          "type": "named"
        },
        {
          "name": "enableConfigs",
          "type": "named"
        },
        {
          "name": "getCurrentProjectConfig",
          "type": "named"
        },
        {
          "name": "saveCurrentProjectConfig",
          "type": "named"
        },
        {
          "name": "isAutoUpdaterDisabled",
          "type": "named"
        },
        {
          "name": "TEST_MCPRC_CONFIG_FOR_TESTING",
          "type": "named"
        },
        {
          "name": "clearMcprcConfigForTesting",
          "type": "named"
        },
        {
          "name": "addMcprcServerForTesting",
          "type": "named"
        },
        {
          "name": "removeMcprcServerForTesting",
          "type": "named"
        },
        {
          "name": "getMcprcConfig",
          "type": "named"
        },
        {
          "name": "getOrCreateUserID",
          "type": "named"
        },
        {
          "name": "getConfigForCLI",
          "type": "named"
        },
        {
          "name": "setConfigForCLI",
          "type": "named"
        },
        {
          "name": "deleteConfigForCLI",
          "type": "named"
        },
        {
          "name": "listConfigForCLI",
          "type": "named"
        },
        {
          "name": "listConfigForCLI",
          "type": "named"
        },
        {
          "name": "listConfigForCLI",
          "type": "named"
        },
        {
          "name": "getOpenAIApiKey",
          "type": "named"
        },
        {
          "name": "setAllPointersToModel",
          "type": "named"
        },
        {
          "name": "setModelPointer",
          "type": "named"
        },
        {
          "name": "isGPT5ModelName",
          "type": "named"
        },
        {
          "name": "validateAndRepairGPT5Profile",
          "type": "named"
        },
        {
          "name": "validateAndRepairAllGPT5Profiles",
          "type": "named"
        },
        {
          "name": "getGPT5ConfigRecommendations",
          "type": "named"
        },
        {
          "name": "createGPT5ModelProfile",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts",
        "src/utils/state.ts",
        "src/utils/json.ts",
        "src/utils/errors.ts",
        "src/utils/theme.ts",
        "src/utils/debugLogger.ts",
        "src/utils/sessionState.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/commands/logout.tsx",
        "src/commands/model.tsx",
        "src/commands/onboarding.tsx",
        "src/commands/terminalSetup.ts",
        "src/components/ApproveApiKey.tsx",
        "src/components/Bug.tsx",
        "src/components/Logo.tsx",
        "src/components/ModelStatusDisplay.tsx",
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx",
        "src/hooks/useApiKeyVerification.ts",
        "src/screens/REPL.tsx",
        "src/services/adapters/base.ts",
        "src/services/claude.ts",
        "src/services/mcpServerApproval.tsx",
        "src/services/modelAdapterFactory.ts",
        "src/services/notifier.ts",
        "src/services/openai.ts",
        "src/test/testAdapters.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/auth.ts",
        "src/utils/autoUpdater.ts",
        "src/utils/model.ts",
        "src/utils/theme.ts",
        "src/utils/user.ts"
      ],
      "comments": {
        "fileHeader": "🎯 配置管理核心系统 - Kode 应用程序的配置中枢🏗️ 核心功能：\n- 实现多层次配置管理架构（全局/项目级）\n- 提供统一的模型配置文件系统\n- 管理 MCP 服务器配置和集成\n- 支持用户偏好和主题定制🔄 依赖关系：\n- 上游：被整个应用的配置相关功能使用\n- 下游：依赖文件系统、JSON 解析和状态管理📊 使用场景：\n- 应用程序启动时的配置初始化\n- 用户设置的读取和保存\n- 项目特定配置的管理\n- AI 模型配置的动态切换🔧 技术实现：\n- 基于文件系统的持久化存储\n- 类型安全的配置模式验证\n- 配置迁移和向后兼容机制\n- 测试环境的配置隔离支持🏗️ 配置架构：\n- 全局配置：存储在用户主目录 ~/.kode.json\n- 项目配置：存储在全局配置中的projects字段，按项目路径索引\n- MCP配置：支持全局、项目和.mcprc文件三种作用域🔒 安全特性：\n- API密钥安全存储和截断\n- 配置文件解析错误处理\n- 权限和作用域验证\n- 测试环境隔离"
      },
      "functions": [
        {
          "name": "defaultConfigForProject",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "projectPath: string"
          ],
          "returnType": "ProjectConfig",
          "description": "为指定项目生成默认配置 - 项目配置初始化函数根据项目路径生成合适的默认配置，对于用户主目录",
          "lineNumber": 140
        },
        {
          "name": "isAutoUpdaterStatus",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "value: string"
          ],
          "returnType": "value is AutoUpdaterStatus",
          "description": "检查值是否为有效的自动更新器状态 - 类型守卫函数@param value - 待检查的字符串值",
          "lineNumber": 167
        },
        {
          "name": "isGlobalConfigKey",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "key: string"
          ],
          "returnType": "key is GlobalConfigKey",
          "lineNumber": 350
        },
        {
          "name": "checkHasTrustDialogAccepted",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "boolean",
          "description": "检查信任对话框是否已被接受",
          "lineNumber": 377
        },
        {
          "name": "isProjectConfigKey",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "key: string"
          ],
          "returnType": "key is ProjectConfigKey",
          "lineNumber": 406
        },
        {
          "name": "saveGlobalConfig",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "config: GlobalConfig"
          ],
          "returnType": "void",
          "description": "保存全局配置到磁盘",
          "lineNumber": 428
        },
        {
          "name": "getGlobalConfig",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "GlobalConfig",
          "description": "获取全局配置",
          "lineNumber": 462
        },
        {
          "name": "getAnthropicApiKey",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "null | string",
          "description": "获取 Anthropic API 密钥 - 从环境变量读取 Claude API 密钥@returns Anthropic API 密钥或 null（如果未设置）",
          "lineNumber": 475
        },
        {
          "name": "normalizeApiKeyForConfig",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "apiKey: string"
          ],
          "returnType": "string",
          "description": "标准化 API 密钥用于配置存储 - 安全截断 API 密钥只保留 API 密钥的最后 20 个字符用于配置存储和识别，",
          "lineNumber": 488
        },
        {
          "name": "getCustomApiKeyStatus",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "truncatedApiKey: string"
          ],
          "returnType": "'approved' | 'rejected' | 'new'",
          "description": "获取自定义 API 密钥状态 - 检查 API 密钥的授权状态根据截断的 API 密钥检查用户之前是否已经批准或拒绝使用该密钥，",
          "lineNumber": 501
        },
        {
          "name": "saveConfig",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "file: string",
            "config: A",
            "defaultConfig: A"
          ],
          "returnType": "void",
          "description": "通用配置保存函数",
          "lineNumber": 533
        },
        {
          "name": "enableConfigs",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "启用配置系统 - 初始化配置读取功能设置配置读取标志并验证全局配置文件的有效性，",
          "lineNumber": 557
        },
        {
          "name": "getConfig",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "file: string",
            "defaultConfig: A",
            "throwOnInvalid: boolean"
          ],
          "returnType": "A",
          "description": "核心配置读取函数",
          "lineNumber": 596
        },
        {
          "name": "getCurrentProjectConfig",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "ProjectConfig",
          "description": "获取当前项目的配置",
          "lineNumber": 706
        },
        {
          "name": "saveCurrentProjectConfig",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "projectConfig: ProjectConfig"
          ],
          "returnType": "void",
          "description": "保存当前项目的配置",
          "lineNumber": 750
        },
        {
          "name": "isAutoUpdaterDisabled",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<boolean>",
          "description": "检查自动更新器是否被禁用 - 异步检查自动更新状态@returns Promise<boolean> - 如果自动更新被禁用则返回 true",
          "lineNumber": 776
        },
        {
          "name": "clearMcprcConfigForTesting",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 782
        },
        {
          "name": "addMcprcServerForTesting",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "name: string",
            "server: McpServerConfig"
          ],
          "returnType": "void",
          "lineNumber": 790
        },
        {
          "name": "removeMcprcServerForTesting",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "name: string"
          ],
          "returnType": "void",
          "lineNumber": 799
        },
        {
          "name": "getOrCreateUserID",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "获取或创建用户 ID - 获取匿名用户标识符如果用户 ID 不存在，则生成一个新的随机 ID 并保存到配置中。",
          "lineNumber": 855
        },
        {
          "name": "getConfigForCLI",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "key: string",
            "global: boolean"
          ],
          "returnType": "unknown",
          "lineNumber": 866
        },
        {
          "name": "setConfigForCLI",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "key: string",
            "value: unknown",
            "global: boolean"
          ],
          "returnType": "void",
          "lineNumber": 887
        },
        {
          "name": "deleteConfigForCLI",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "key: string",
            "global: boolean"
          ],
          "returnType": "void",
          "lineNumber": 933
        },
        {
          "name": "listConfigForCLI",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "global: true"
          ],
          "returnType": "GlobalConfig",
          "lineNumber": 958
        },
        {
          "name": "listConfigForCLI",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "global: false"
          ],
          "returnType": "ProjectConfig",
          "lineNumber": 959
        },
        {
          "name": "listConfigForCLI",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "global: boolean"
          ],
          "returnType": "object",
          "lineNumber": 960
        },
        {
          "name": "getOpenAIApiKey",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string | undefined",
          "description": "获取 OpenAI API 密钥 - 从环境变量读取 GPT API 密钥@returns OpenAI API 密钥或 undefined（如果未设置）",
          "lineNumber": 975
        },
        {
          "name": "migrateModelProfilesRemoveId",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "config: GlobalConfig"
          ],
          "returnType": "GlobalConfig",
          "description": "Configuration migration utility functions",
          "lineNumber": 980
        },
        {
          "name": "setAllPointersToModel",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "modelName: string"
          ],
          "returnType": "void",
          "description": "设置所有模型指针指向同一个模型",
          "lineNumber": 1060
        },
        {
          "name": "setModelPointer",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "pointer: ModelPointerType",
            "modelName: string"
          ],
          "returnType": "void",
          "description": "设置模型指针 - 为特定用途配置模型设置指定类型的模型指针指向特定模型，并强制重新加载",
          "lineNumber": 1084
        },
        {
          "name": "isGPT5ModelName",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "modelName: string"
          ],
          "returnType": "boolean",
          "description": "检查模型名称是否为 GPT-5 模型 - GPT-5 模型识别函数通过模型名称判断是否为 GPT-5 系列模型，用于应用",
          "lineNumber": 1116
        },
        {
          "name": "validateAndRepairGPT5Profile",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "profile: ModelProfile"
          ],
          "returnType": "ModelProfile",
          "description": "验证并自动修复 GPT-5 模型配置 - GPT-5 配置自动优化对 GPT-5 模型配置进行验证和自动修复，确保配置符合",
          "lineNumber": 1131
        },
        {
          "name": "validateAndRepairAllGPT5Profiles",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "{ repaired: number; total: number }",
          "description": "Validate and repair all GPT-5 profiles in the global configuration",
          "lineNumber": 1197
        },
        {
          "name": "getGPT5ConfigRecommendations",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "modelName: string"
          ],
          "returnType": "Partial<ModelProfile>",
          "description": "Get GPT-5 configuration recommendations for a specific model",
          "lineNumber": 1228
        },
        {
          "name": "createGPT5ModelProfile",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "name: string",
            "modelName: string",
            "apiKey: string",
            "baseURL: string",
            "provider: ProviderType"
          ],
          "returnType": "ModelProfile",
          "description": "Create a properly configured GPT-5 model profile",
          "lineNumber": 1255
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "McpStdioServerConfig",
        "McpSSEServerConfig",
        "McpServerConfig",
        "ProjectConfig",
        "AutoUpdaterStatus",
        "NotificationChannel",
        "ProviderType",
        "ModelProfile",
        "ModelPointerType",
        "ModelPointers",
        "AccountInfo",
        "GlobalConfig",
        "GlobalConfigKey",
        "ProjectConfigKey"
      ],
      "constants": [
        "DEFAULT_PROJECT_CONFIG",
        "config",
        "DEFAULT_GLOBAL_CONFIG",
        "GLOBAL_CONFIG_KEYS",
        "PROJECT_CONFIG_KEYS",
        "config",
        "projectConfig",
        "parentPath",
        "TEST_GLOBAL_CONFIG_FOR_TESTING",
        "TEST_PROJECT_CONFIG_FOR_TESTING",
        "config",
        "config",
        "filteredConfig",
        "fileContent",
        "parsedConfig",
        "finalConfig",
        "errorMessage",
        "absolutePath",
        "config",
        "projectConfig",
        "config",
        "TEST_MCPRC_CONFIG_FOR_TESTING",
        "getMcprcConfig",
        "mcprcPath",
        "mcprcContent",
        "config",
        "cwd",
        "mcprcPath",
        "stat",
        "config",
        "userID",
        "currentConfig",
        "currentConfig",
        "currentConfig",
        "currentConfig",
        "currentConfig",
        "idToModelNameMap",
        "migratedProfiles",
        "migratedPointers",
        "modelName",
        "migratedConfig",
        "config",
        "updatedConfig",
        "config",
        "updatedConfig",
        "lowerName",
        "isGPT5",
        "now",
        "repairedProfile",
        "validReasoningEfforts",
        "config",
        "repairedProfiles",
        "repairedProfile",
        "updatedConfig",
        "recommendations",
        "recommendations",
        "profile"
      ],
      "lineCount": 1283,
      "complexity": "high"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\conversationRecovery.ts",
      "relativePath": "src/utils/conversationRecovery.ts",
      "name": "conversationRecovery.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs/promises",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "loadMessagesFromLog",
          "type": "named"
        },
        {
          "name": "deserializeMessages",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/screens/ResumeConversation.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "loadMessagesFromLog",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "logPath: string",
            "tools: Tool[]"
          ],
          "returnType": "Promise<any[]>",
          "description": "Load messages from a log file",
          "lineNumber": 11
        },
        {
          "name": "deserializeMessages",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "messages: any[]",
            "tools: Tool[]"
          ],
          "returnType": "any[]",
          "description": "Deserialize messages from a saved format, reconnecting any tool references",
          "lineNumber": 31
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "content",
        "messages",
        "toolMap",
        "clonedMessage",
        "actualTool"
      ],
      "lineCount": 56,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\Cursor.ts",
      "relativePath": "src/utils/Cursor.ts",
      "name": "Cursor.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "wrap-ansi",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Cursor",
          "type": "named"
        },
        {
          "name": "MeasuredText",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/hooks/useTextInput.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [
        {
          "name": "Cursor",
          "isExported": true,
          "methods": [
            "fromText",
            "render",
            "left",
            "right",
            "up",
            "down",
            "startOfLine",
            "endOfLine",
            "nextWord",
            "prevWord",
            "modifyText",
            "insert",
            "del",
            "backspace",
            "deleteToLineStart",
            "deleteToLineEnd",
            "deleteWordBefore",
            "deleteWordAfter",
            "isOverWordChar",
            "equals",
            "isAtStart",
            "isAtEnd",
            "getPosition",
            "getOffset"
          ],
          "lineNumber": 9
        },
        {
          "name": "WrappedLine",
          "isExported": false,
          "methods": [
            "equals"
          ],
          "lineNumber": 248
        },
        {
          "name": "MeasuredText",
          "isExported": true,
          "methods": [
            "measureWrappedText",
            "getWrappedText",
            "getLine",
            "getOffsetFromPosition",
            "getLineLength",
            "getPositionFromOffset",
            "equals"
          ],
          "lineNumber": 265
        }
      ],
      "interfaces": [],
      "types": [
        "WrappedText",
        "Position"
      ],
      "constants": [
        "lastSixStart",
        "newOffset",
        "newOffset",
        "column",
        "offset",
        "startOffset",
        "endOffset",
        "newText",
        "newCursor",
        "currentOffset",
        "leftCursor",
        "leftOffset",
        "newText",
        "currentChar",
        "wrappedText",
        "wrappedLines",
        "lines",
        "text",
        "isPrecededByNewline",
        "startOffset",
        "endsWithNewline",
        "startOffset",
        "startOffset",
        "potentialNewlinePos",
        "endsWithNewline",
        "wrappedLine",
        "startOffsetPlusColumn",
        "lineEnd",
        "maxOffset",
        "currentLine",
        "nextLine",
        "lines",
        "currentLine",
        "nextLine",
        "leadingWhitepace",
        "column",
        "line"
      ],
      "lineCount": 437,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\debugLogger.ts",
      "relativePath": "src/utils/debugLogger.ts",
      "name": "debugLogger.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync",
            "appendFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "env-paths",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "SESSION_ID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/conversation",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "debugLog",
          "type": "named"
        },
        {
          "name": "debug",
          "type": "named"
        },
        {
          "name": "startRequest",
          "type": "named"
        },
        {
          "name": "endRequest",
          "type": "named"
        },
        {
          "name": "getCurrentRequest",
          "type": "named"
        },
        {
          "name": "markPhase",
          "type": "named"
        },
        {
          "name": "logReminderEvent",
          "type": "named"
        },
        {
          "name": "logAPIError",
          "type": "named"
        },
        {
          "name": "logLLMInteraction",
          "type": "named"
        },
        {
          "name": "logSystemPromptConstruction",
          "type": "named"
        },
        {
          "name": "logContextCompression",
          "type": "named"
        },
        {
          "name": "logUserFriendly",
          "type": "named"
        },
        {
          "name": "initDebugLogger",
          "type": "named"
        },
        {
          "name": "diagnoseError",
          "type": "named"
        },
        {
          "name": "logErrorWithDiagnosis",
          "type": "named"
        },
        {
          "name": "getDebugInfo",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/product.ts",
        "src/utils/log.ts",
        "src/types/conversation.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/query.ts",
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/services/openai.ts",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/config.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getProjectDir",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "cwd: string"
          ],
          "returnType": "string",
          "lineNumber": 66
        },
        {
          "name": "ensureDebugDir",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "description": "确保调试目录存在",
          "lineNumber": 79
        },
        {
          "name": "writeToFile",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "filePath: string",
            "entry: LogEntry"
          ],
          "description": "核心日志记录函数",
          "lineNumber": 125
        },
        {
          "name": "getDedupeKey",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "level: LogLevel",
            "phase: string",
            "data: any"
          ],
          "returnType": "string",
          "description": "生成日志去重键",
          "lineNumber": 153
        },
        {
          "name": "shouldLogWithDedupe",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "level: LogLevel",
            "phase: string",
            "data: any"
          ],
          "returnType": "boolean",
          "description": "检查是否应该记录日志（去重）",
          "lineNumber": 165
        },
        {
          "name": "formatMessages",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "messages: any"
          ],
          "returnType": "string",
          "lineNumber": 190
        },
        {
          "name": "shouldShowInTerminal",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "level: LogLevel"
          ],
          "returnType": "boolean",
          "description": "判断是否应该在终端显示日志",
          "lineNumber": 237
        },
        {
          "name": "logToTerminal",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "entry: LogEntry"
          ],
          "description": "终端彩色输出",
          "lineNumber": 250
        },
        {
          "name": "debugLog",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "level: LogLevel",
            "phase: string",
            "data: any",
            "requestId: string"
          ],
          "description": "主要调试日志函数",
          "lineNumber": 324
        },
        {
          "name": "startRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "RequestContext",
          "description": "请求生命周期管理",
          "lineNumber": 397
        },
        {
          "name": "endRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "ctx: RequestContext"
          ],
          "lineNumber": 410
        },
        {
          "name": "getCurrentRequest",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "RequestContext | null",
          "lineNumber": 426
        },
        {
          "name": "markPhase",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "phase: string",
            "data: any"
          ],
          "description": "阶段标记函数",
          "lineNumber": 431
        },
        {
          "name": "logReminderEvent",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "eventType: string",
            "reminderData: any",
            "agentId: string"
          ],
          "description": "新增：Reminder 事件日志记录",
          "lineNumber": 443
        },
        {
          "name": "logAPIError",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "context: {\n  model: string\n  endpoint: string\n  status: number\n  error: any\n  request?: any\n  response?: any\n  provider?: string\n}"
          ],
          "description": "API错误日志功能",
          "lineNumber": 462
        },
        {
          "name": "logLLMInteraction",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "context: {\n  systemPrompt: string\n  messages: any[]\n  response: any\n  usage?: { inputTokens: number; outputTokens: number }\n  timing: { start: number; end: number }\n  apiFormat?: 'anthropic' | 'openai'\n}"
          ],
          "description": "新增：LLM 交互核心调试信息",
          "lineNumber": 573
        },
        {
          "name": "logSystemPromptConstruction",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "construction: {\n  basePrompt: string\n  kodeContext?: string\n  reminders: string[]\n  finalPrompt: string\n}"
          ],
          "description": "新增：系统提示构建过程调试",
          "lineNumber": 795
        },
        {
          "name": "logContextCompression",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "compression: {\n  beforeMessages: number\n  afterMessages: number\n  trigger: string\n  preservedFiles: string[]\n  compressionRatio: number\n}"
          ],
          "description": "新增：上下文压缩过程调试",
          "lineNumber": 823
        },
        {
          "name": "logUserFriendly",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "type: string",
            "data: any",
            "requestId: string"
          ],
          "description": "新增：用户友好的日志显示",
          "lineNumber": 847
        },
        {
          "name": "initDebugLogger",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "description": "初始化日志系统",
          "lineNumber": 900
        },
        {
          "name": "diagnoseError",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "error: any",
            "context: any"
          ],
          "returnType": "ErrorDiagnosis",
          "lineNumber": 951
        },
        {
          "name": "logErrorWithDiagnosis",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "error: any",
            "context: any",
            "requestId: string"
          ],
          "lineNumber": 1158
        },
        {
          "name": "getDebugInfo",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "lineNumber": 1216
        }
      ],
      "classes": [
        {
          "name": "RequestContext",
          "isExported": false,
          "methods": [
            "markPhase",
            "getPhaseTime",
            "getAllPhases"
          ],
          "description": "当前请求上下文",
          "lineNumber": 97
        }
      ],
      "interfaces": [
        "LogEntry",
        "ErrorDiagnosis"
      ],
      "types": [],
      "constants": [
        "isDebugMode",
        "isVerboseMode",
        "isDebugVerboseMode",
        "TERMINAL_LOG_LEVELS",
        "DEBUG_VERBOSE_TERMINAL_LOG_LEVELS",
        "USER_FRIENDLY_LEVELS",
        "STARTUP_TIMESTAMP",
        "REQUEST_START_TIME",
        "KODE_DIR",
        "DEBUG_PATHS",
        "debugDir",
        "activeRequests",
        "logLine",
        "recentLogs",
        "LOG_DEDUPE_WINDOW_MS",
        "file",
        "key",
        "now",
        "lastLogTime",
        "recentMessages",
        "role",
        "totalIndex",
        "parsed",
        "timestamp",
        "reqId",
        "elapsedStr",
        "formattedMessages",
        "entry",
        "debug",
        "ctx",
        "request",
        "errorDir",
        "timestamp",
        "sanitizedModel",
        "filename",
        "filepath",
        "fullLogContent",
        "responseStr",
        "duration",
        "apiLabel",
        "recentMessages",
        "globalIndex",
        "roleColor",
        "reminderContent",
        "maxLength",
        "textBlocks",
        "toolBlocks",
        "text",
        "maxLength",
        "roleIcon",
        "toolCalls",
        "inputStr",
        "maxLength",
        "displayInput",
        "inputStr",
        "maxLength",
        "displayInput",
        "textBlocks",
        "maxResponseLength",
        "displayContent",
        "toolNames",
        "toolName",
        "toolInput",
        "inputStr",
        "maxToolInputLength",
        "displayInput",
        "timestamp",
        "reqId",
        "terminalLevels",
        "errorMessage",
        "errorStack",
        "diagnosis",
        "errorMessage",
        "truncatedLog",
        "debugPath"
      ],
      "lineCount": 1236,
      "complexity": "high"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\diff.ts",
      "relativePath": "src/utils/diff.ts",
      "name": "diff.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "diff",
          "imports": [
            "Hunk",
            "structuredPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getPatch",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/tools/FileEditTool/utils.ts",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getPatch",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  filePath,\n  fileContents,\n  oldStr,\n  newStr,\n}"
          ],
          "returnType": "Hunk[]",
          "lineNumber": 11
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "CONTEXT_LINES",
        "AMPERSAND_TOKEN",
        "DOLLAR_TOKEN"
      ],
      "lineCount": 43,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\env.ts",
      "relativePath": "src/utils/env.ts",
      "name": "env.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "CONFIG_BASE_DIR",
            "CONFIG_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "CLAUDE_BASE_DIR",
          "type": "named"
        },
        {
          "name": "GLOBAL_CLAUDE_FILE",
          "type": "named"
        },
        {
          "name": "MEMORY_DIR",
          "type": "named"
        },
        {
          "name": "env",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/execFileNoThrow.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/terminalSetup.ts",
        "src/components/Bug.tsx",
        "src/components/Link.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/permissions/hooks.ts",
        "src/components/permissions/utils.ts",
        "src/constants/figures.ts",
        "src/constants/prompts.ts",
        "src/entrypoints/cli.tsx",
        "src/hooks/usePermissionRequestLogging.ts",
        "src/services/vcr.ts",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/utils/autoUpdater.ts",
        "src/utils/config.ts",
        "src/utils/exampleCommands.ts",
        "src/utils/user.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "CLAUDE_BASE_DIR",
        "GLOBAL_CLAUDE_FILE",
        "MEMORY_DIR",
        "getIsDocker",
        "hasInternetAccess",
        "controller",
        "timeout",
        "env"
      ],
      "lineCount": 58,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\errors.ts",
      "relativePath": "src/utils/errors.ts",
      "name": "errors.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "MalformedCommandError",
          "type": "named"
        },
        {
          "name": "DeprecatedCommandError",
          "type": "named"
        },
        {
          "name": "AbortError",
          "type": "named"
        },
        {
          "name": "ConfigParseError",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/InvalidConfigDialog.tsx",
        "src/entrypoints/cli.tsx",
        "src/hooks/useCanUseTool.ts",
        "src/permissions.ts",
        "src/utils/config.ts",
        "src/utils/messages.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [
        {
          "name": "MalformedCommandError",
          "isExported": true,
          "extends": "TypeError",
          "methods": [],
          "lineNumber": 1
        },
        {
          "name": "DeprecatedCommandError",
          "isExported": true,
          "extends": "Error",
          "methods": [],
          "lineNumber": 3
        },
        {
          "name": "AbortError",
          "isExported": true,
          "extends": "Error",
          "methods": [],
          "lineNumber": 5
        },
        {
          "name": "ConfigParseError",
          "isExported": true,
          "extends": "Error",
          "methods": [],
          "description": "Custom error class for configuration file parsing errors",
          "lineNumber": 11
        }
      ],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 22,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\exampleCommands.ts",
      "relativePath": "src/utils/exampleCommands.ts",
      "name": "exampleCommands.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./config.js",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "exec"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize",
            "sample"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "util",
          "imports": [
            "promisify"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./git",
          "imports": [
            "getIsGit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getExampleCommands",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts",
        "src/utils/state.ts",
        "src/utils/log.ts",
        "src/utils/git.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getFrequentlyModifiedFiles",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<string[]>",
          "lineNumber": 18
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "execPromise",
        "response",
        "content",
        "chosenFilenames",
        "getExampleCommands",
        "globalConfig",
        "projectConfig",
        "now",
        "lastGenerated",
        "oneWeek",
        "newGlobalConfig",
        "frequentFile"
      ],
      "lineCount": 110,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\execFileNoThrow.ts",
      "relativePath": "src/utils/execFileNoThrow.ts",
      "name": "execFileNoThrow.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "child_process",
          "imports": [
            "execFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "execFileNoThrow",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands/listen.ts",
        "src/commands/terminalSetup.ts",
        "src/context.ts",
        "src/utils/autoUpdater.ts",
        "src/utils/browser.ts",
        "src/utils/env.ts",
        "src/utils/git.ts",
        "src/utils/ripgrep.ts",
        "src/utils/user.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "execFileNoThrow",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "file: string",
            "args: string[]",
            "abortSignal: AbortSignal",
            "timeout",
            "preserveOutputOnError"
          ],
          "returnType": "Promise<{ stdout: string; stderr: string; code: number }>",
          "description": "execFile, but always resolves (never throws)",
          "lineNumber": 11
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "MS_IN_SECOND",
        "SECONDS_IN_MINUTE",
        "errorCode"
      ],
      "lineCount": 52,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\expertChatStorage.ts",
      "relativePath": "src/utils/expertChatStorage.ts",
      "name": "expertChatStorage.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync",
            "mkdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ChatMessage",
          "type": "named"
        },
        {
          "name": "ExpertChatSession",
          "type": "named"
        },
        {
          "name": "createExpertChatSession",
          "type": "named"
        },
        {
          "name": "loadExpertChatSession",
          "type": "named"
        },
        {
          "name": "saveExpertChatSession",
          "type": "named"
        },
        {
          "name": "addMessageToSession",
          "type": "named"
        },
        {
          "name": "getSessionMessages",
          "type": "named"
        },
        {
          "name": "generateSessionId",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getExpertChatDirectory",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "获取专家聊天存储目录",
          "lineNumber": 27
        },
        {
          "name": "getSessionFilePath",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "sessionId: string"
          ],
          "returnType": "string",
          "description": "获取会话文件路径 - 使用 sessionId.json 格式",
          "lineNumber": 42
        },
        {
          "name": "createExpertChatSession",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "expertModel: string"
          ],
          "returnType": "ExpertChatSession",
          "description": "创建新的专家聊天会话",
          "lineNumber": 49
        },
        {
          "name": "loadExpertChatSession",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "sessionId: string"
          ],
          "returnType": "ExpertChatSession | null",
          "description": "加载现有专家聊天会话",
          "lineNumber": 68
        },
        {
          "name": "saveExpertChatSession",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "session: ExpertChatSession"
          ],
          "returnType": "void",
          "description": "保存专家聊天会话",
          "lineNumber": 89
        },
        {
          "name": "addMessageToSession",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "sessionId: string",
            "role: 'user' | 'assistant'",
            "content: string"
          ],
          "returnType": "ExpertChatSession | null",
          "description": "添加消息到会话",
          "lineNumber": 107
        },
        {
          "name": "getSessionMessages",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "sessionId: string"
          ],
          "returnType": "ChatMessage[]",
          "description": "获取会话的消息历史 - 返回OpenAI格式",
          "lineNumber": 126
        },
        {
          "name": "generateSessionId",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "description": "生成新的会话ID",
          "lineNumber": 134
        }
      ],
      "classes": [],
      "interfaces": [
        "ChatMessage",
        "ExpertChatSession"
      ],
      "types": [],
      "constants": [
        "configDir",
        "expertChatDir",
        "sessionId",
        "session",
        "filePath",
        "content",
        "filePath",
        "session",
        "session"
      ],
      "lineCount": 137,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\file.ts",
      "relativePath": "src/utils/file.ts",
      "name": "file.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "readFileSync",
            "writeFileSync",
            "openSync",
            "readSync",
            "closeSync",
            "existsSync",
            "readdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "normalize",
            "resolve",
            "resolvePath",
            "relative",
            "sep",
            "basename",
            "dirname",
            "extname",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "glob",
          "imports": [
            "globLib"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "process",
          "imports": [
            "cwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ripgrep",
          "imports": [
            "listAllContentFiles"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lru-cache",
          "imports": [
            "LRUCache"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "glob",
          "type": "named"
        },
        {
          "name": "readFileSafe",
          "type": "named"
        },
        {
          "name": "isInDirectory",
          "type": "named"
        },
        {
          "name": "readTextContent",
          "type": "named"
        },
        {
          "name": "writeTextContent",
          "type": "named"
        },
        {
          "name": "detectRepoLineEndings",
          "type": "named"
        },
        {
          "name": "detectRepoLineEndingsDirect",
          "type": "named"
        },
        {
          "name": "detectFileEncoding",
          "type": "named"
        },
        {
          "name": "detectFileEncodingDirect",
          "type": "named"
        },
        {
          "name": "detectLineEndings",
          "type": "named"
        },
        {
          "name": "detectLineEndingsDirect",
          "type": "named"
        },
        {
          "name": "normalizeFilePath",
          "type": "named"
        },
        {
          "name": "getAbsolutePath",
          "type": "named"
        },
        {
          "name": "getAbsoluteAndRelativePaths",
          "type": "named"
        },
        {
          "name": "findSimilarFile",
          "type": "named"
        },
        {
          "name": "addLineNumbers",
          "type": "named"
        },
        {
          "name": "isDirEmpty",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/utils/ripgrep.ts",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/ProjectOnboarding.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/utils.ts",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/fileRecoveryCore.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "glob",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "filePattern: string",
            "cwd: string",
            "{ limit, offset }",
            "abortSignal: AbortSignal"
          ],
          "returnType": "Promise<{ files: string[]; truncated: boolean }>",
          "lineNumber": 36
        },
        {
          "name": "readFileSafe",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filepath: string"
          ],
          "returnType": "string | null",
          "lineNumber": 61
        },
        {
          "name": "isInDirectory",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "relativePath: string",
            "relativeCwd: string"
          ],
          "returnType": "boolean",
          "lineNumber": 70
        },
        {
          "name": "readTextContent",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filePath: string",
            "offset",
            "maxLines: number"
          ],
          "returnType": "{ content: string; lineCount: number; totalLines: number }",
          "lineNumber": 112
        },
        {
          "name": "writeTextContent",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filePath: string",
            "content: string",
            "encoding: BufferEncoding",
            "endings: LineEndingType"
          ],
          "returnType": "void",
          "lineNumber": 134
        },
        {
          "name": "detectRepoLineEndings",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "filePath: string"
          ],
          "returnType": "Promise<LineEndingType | undefined>",
          "lineNumber": 155
        },
        {
          "name": "detectRepoLineEndingsDirect",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "cwd: string"
          ],
          "returnType": "Promise<LineEndingType>",
          "lineNumber": 161
        },
        {
          "name": "fetch",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "cache: LRUCache<K, V>",
            "key: K",
            "value: () => V"
          ],
          "returnType": "V",
          "description": "eslint-disable-next-line @typescript-eslint/no-empty-object-type",
          "lineNumber": 182
        },
        {
          "name": "detectFileEncoding",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filePath: string"
          ],
          "returnType": "BufferEncoding",
          "lineNumber": 203
        },
        {
          "name": "detectFileEncodingDirect",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filePath: string"
          ],
          "returnType": "BufferEncoding",
          "lineNumber": 208
        },
        {
          "name": "detectLineEndings",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filePath: string"
          ],
          "returnType": "LineEndingType",
          "lineNumber": 247
        },
        {
          "name": "detectLineEndingsDirect",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filePath: string",
            "encoding: BufferEncoding"
          ],
          "returnType": "LineEndingType",
          "lineNumber": 252
        },
        {
          "name": "normalizeFilePath",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filePath: string"
          ],
          "returnType": "string",
          "lineNumber": 283
        },
        {
          "name": "getAbsolutePath",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "path: string | undefined"
          ],
          "returnType": "string | undefined",
          "lineNumber": 307
        },
        {
          "name": "getAbsoluteAndRelativePaths",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "path: string | undefined"
          ],
          "returnType": "{\n  absolutePath: string | undefined\n  relativePath: string | undefined\n}",
          "lineNumber": 311
        },
        {
          "name": "findSimilarFile",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filePath: string"
          ],
          "returnType": "string | undefined",
          "description": "Find files with the same name but different extensions in the same directory",
          "lineNumber": 328
        },
        {
          "name": "addLineNumbers",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "{\n  content,\n  // 1-indexed\n  startLine,\n}"
          ],
          "returnType": "string",
          "description": "Adds cat -n style line numbers to the content",
          "lineNumber": 364
        },
        {
          "name": "isDirEmpty",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "dirPath: string"
          ],
          "returnType": "boolean",
          "description": "Checks if a directory is empty by efficiently reading just the first entry",
          "lineNumber": 397
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "File",
        "LineEndingType"
      ],
      "constants": [
        "paths",
        "sortedPaths",
        "truncated",
        "fullPath",
        "fullCwd",
        "rel",
        "enc",
        "content",
        "lines",
        "toReturn",
        "repoEndingCache",
        "abortController",
        "allFiles",
        "lineEnding",
        "v",
        "fileEncodingCache",
        "k",
        "BUFFER_SIZE",
        "buffer",
        "bytesRead",
        "isUtf8",
        "lineEndingCache",
        "k",
        "buffer",
        "fd",
        "bytesRead",
        "content",
        "absoluteFilePath",
        "absolutePath",
        "relativePath",
        "dir",
        "fileBaseName",
        "files",
        "similarFiles",
        "firstMatch",
        "lineNum",
        "numStr",
        "n",
        "entries"
      ],
      "lineCount": 406,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\fileRecoveryCore.ts",
      "relativePath": "src/utils/fileRecoveryCore.ts",
      "name": "fileRecoveryCore.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./file",
          "imports": [
            "readTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/fileFreshness",
          "imports": [
            "fileFreshnessService"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "selectAndReadFiles",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/file.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/utils/autoCompactCore.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "selectAndReadFiles",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<\n  Array<{\n    path: string\n    content: string\n    tokens: number\n    truncated: boolean\n  }>\n>",
          "description": "Selects and reads recently accessed files for context recoveryDuring auto-compact, this function preserves development context by:",
          "lineNumber": 22
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "MAX_FILES_TO_RECOVER",
        "MAX_TOKENS_PER_FILE",
        "MAX_TOTAL_FILE_TOKENS",
        "importantFiles",
        "results",
        "estimatedTokens",
        "maxChars",
        "finalTokens"
      ],
      "lineCount": 72,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\format.tsx",
      "relativePath": "src/utils/format.tsx",
      "name": "format.tsx",
      "extension": ".tsx",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "wrapText",
          "type": "named"
        },
        {
          "name": "formatDuration",
          "type": "named"
        },
        {
          "name": "formatNumber",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/StructuredDiff.tsx",
        "src/cost-tracker.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "wrapText",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "text: string",
            "width: number"
          ],
          "returnType": "string[]",
          "lineNumber": 1
        },
        {
          "name": "formatDuration",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "ms: number"
          ],
          "returnType": "string",
          "lineNumber": 19
        },
        {
          "name": "formatNumber",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "number: number"
          ],
          "returnType": "string",
          "lineNumber": 37
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "lines",
        "hours",
        "minutes",
        "seconds"
      ],
      "lineCount": 45,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\fuzzyMatcher.ts",
      "relativePath": "src/utils/fuzzyMatcher.ts",
      "name": "fuzzyMatcher.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./advancedFuzzyMatcher",
          "imports": [
            "matchManyAdvanced"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MatchResult",
          "type": "named"
        },
        {
          "name": "FuzzyMatcherConfig",
          "type": "named"
        },
        {
          "name": "FuzzyMatcher",
          "type": "named"
        },
        {
          "name": "defaultMatcher",
          "type": "named"
        },
        {
          "name": "matchCommand",
          "type": "named"
        },
        {
          "name": "matchCommands",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/advancedFuzzyMatcher.ts"
      ],
      "dependents": [
        "src/hooks/useUnifiedCompletion.ts"
      ],
      "comments": {
        "fileHeader": "Input Method Inspired Fuzzy Matching Algorithm\nMulti-algorithm weighted scoring system inspired by:\n- Sogou/Baidu Pinyin input method algorithms\n- Double-pinyin abbreviation matching\n- Terminal completion best practices (fzf, zsh, fish)\nDesigned specifically for command/terminal completion scenarios\nwhere users type abbreviations like \"nde\" expecting \"node\""
      },
      "functions": [
        {
          "name": "matchCommand",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "command: string",
            "query: string"
          ],
          "returnType": "MatchResult",
          "lineNumber": 314
        },
        {
          "name": "matchCommands",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "commands: string[]",
            "query: string"
          ],
          "returnType": "Array<{command: string, score: number}>",
          "lineNumber": 321
        }
      ],
      "classes": [
        {
          "name": "FuzzyMatcher",
          "isExported": true,
          "methods": [
            "match",
            "prefixScore",
            "substringScore",
            "abbreviationScore",
            "editDistanceScore",
            "popularityScore",
            "matchMany"
          ],
          "lineNumber": 51
        }
      ],
      "interfaces": [
        "MatchResult",
        "FuzzyMatcherConfig"
      ],
      "types": [],
      "constants": [
        "DEFAULT_CONFIG",
        "weightSum",
        "text",
        "pattern",
        "scores",
        "rawScore",
        "weight",
        "lengthPenalty",
        "finalScore",
        "maxAlgorithm",
        "confidence",
        "coverage",
        "index",
        "positionFactor",
        "coverageFactor",
        "numMatch",
        "coverageFactor",
        "textWords",
        "textClean",
        "char",
        "lastPatternChar",
        "lastTextChar",
        "dp",
        "m",
        "n",
        "cost",
        "distance",
        "defaultMatcher"
      ],
      "lineCount": 328,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\generators.ts",
      "relativePath": "src/utils/generators.ts",
      "name": "generators.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "lastX",
          "type": "named"
        },
        {
          "name": "all",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/context.ts",
        "src/entrypoints/mcp.ts",
        "src/query.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/utils/messages.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "lastX",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "as: AsyncGenerator<A>"
          ],
          "returnType": "Promise<A>",
          "lineNumber": 3
        },
        {
          "name": "all",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "generators: AsyncGenerator<A, void>[]",
            "concurrencyCap"
          ],
          "returnType": "AsyncGenerator<A, void>",
          "description": "Run all generators concurrently up to a concurrency cap, yielding values as they come in",
          "lineNumber": 22
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "QueuedGenerator"
      ],
      "constants": [
        "NO_VALUE",
        "next",
        "promise",
        "waiting",
        "promises",
        "gen",
        "nextGen"
      ],
      "lineCount": 63,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\git.ts",
      "relativePath": "src/utils/git.ts",
      "name": "git.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getIsGit",
          "type": "named"
        },
        {
          "name": "getHead",
          "type": "named"
        },
        {
          "name": "getBranch",
          "type": "named"
        },
        {
          "name": "getRemoteUrl",
          "type": "named"
        },
        {
          "name": "getIsHeadOnRemote",
          "type": "named"
        },
        {
          "name": "getIsClean",
          "type": "named"
        },
        {
          "name": "GitRepoState",
          "type": "named"
        },
        {
          "name": "getGitState",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/execFileNoThrow.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/utils.ts",
        "src/components/Bug.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/utils/exampleCommands.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getGitState",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<GitRepoState | null>",
          "lineNumber": 70
        }
      ],
      "classes": [],
      "interfaces": [
        "GitRepoState"
      ],
      "types": [],
      "constants": [
        "getIsGit",
        "getHead",
        "getBranch",
        "getRemoteUrl",
        "getIsHeadOnRemote",
        "getIsClean"
      ],
      "lineCount": 93,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\globalLogger.ts",
      "relativePath": "src/utils/globalLogger.ts",
      "name": "globalLogger.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "globalLogger",
          "type": "named"
        },
        {
          "name": "logger",
          "type": "named"
        },
        {
          "name": "debugLog",
          "type": "named"
        },
        {
          "name": "statusLog",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [],
      "comments": {
        "fileHeader": "统一的全局日志系统\n普通模式：完全静默，零日志输出\n调试模式：详细日志输出"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "isDebugMode",
        "LOGGING_ENABLED",
        "globalLogger",
        "logger",
        "debugLog",
        "statusLog"
      ],
      "lineCount": 77,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\http.ts",
      "relativePath": "src/utils/http.ts",
      "name": "http.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "USER_AGENT",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/macros.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/Bug.tsx",
        "src/services/claude.ts"
      ],
      "comments": {
        "fileHeader": "HTTP utility constants and helpers"
      },
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "USER_AGENT"
      ],
      "lineCount": 11,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\imagePaste.ts",
      "relativePath": "src/utils/imagePaste.ts",
      "name": "imagePaste.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "child_process",
          "imports": [
            "execSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "CLIPBOARD_ERROR_MESSAGE",
          "type": "named"
        },
        {
          "name": "getImageFromClipboard",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [],
      "comments": {},
      "functions": [
        {
          "name": "getImageFromClipboard",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string | null",
          "lineNumber": 9
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "SCREENSHOT_PATH",
        "CLIPBOARD_ERROR_MESSAGE",
        "imageBuffer",
        "base64Image"
      ],
      "lineCount": 39,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\json.ts",
      "relativePath": "src/utils/json.ts",
      "name": "json.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "safeParseJSON",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands/terminalSetup.ts",
        "src/services/mcpClient.ts",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/utils/config.ts",
        "src/utils/terminal.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "safeParseJSON",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "json: string | null | undefined"
          ],
          "returnType": "unknown",
          "lineNumber": 3
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [],
      "lineCount": 14,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\log.ts",
      "relativePath": "src/utils/log.ts",
      "name": "log.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "writeFileSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/sentry",
          "imports": [
            "captureException"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "env-paths",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "fsPromises"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/logs",
          "imports": [
            "LogOption",
            "SerializedMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SESSION_ID",
          "type": "named"
        },
        {
          "name": "CACHE_PATHS",
          "type": "named"
        },
        {
          "name": "dateToFilename",
          "type": "named"
        },
        {
          "name": "getMessagesPath",
          "type": "named"
        },
        {
          "name": "logError",
          "type": "named"
        },
        {
          "name": "getErrorsLog",
          "type": "named"
        },
        {
          "name": "getInMemoryErrors",
          "type": "named"
        },
        {
          "name": "overwriteLog",
          "type": "named"
        },
        {
          "name": "loadLogList",
          "type": "named"
        },
        {
          "name": "parseLogFilename",
          "type": "named"
        },
        {
          "name": "getNextAvailableLogForkNumber",
          "type": "named"
        },
        {
          "name": "getNextAvailableLogSidechainNumber",
          "type": "named"
        },
        {
          "name": "getForkNumberFromFilename",
          "type": "named"
        },
        {
          "name": "sortLogs",
          "type": "named"
        },
        {
          "name": "formatDate",
          "type": "named"
        },
        {
          "name": "parseISOString",
          "type": "named"
        },
        {
          "name": "logMCPError",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/sentry.ts",
        "src/types/logs.ts",
        "src/constants/macros.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/listen.ts",
        "src/commands/resume.tsx",
        "src/commands/terminalSetup.ts",
        "src/components/Bug.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/HighlightedCode.tsx",
        "src/components/LogSelector.tsx",
        "src/components/Message.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/messages/UserPromptMessage.tsx",
        "src/context.ts",
        "src/cost-tracker.ts",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useCanUseTool.ts",
        "src/hooks/useLogMessages.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/screens/LogList.tsx",
        "src/screens/REPL.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/services/claude.ts",
        "src/services/mcpClient.ts",
        "src/services/oauth.ts",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/utils/ask.tsx",
        "src/utils/autoUpdater.ts",
        "src/utils/cleanup.ts",
        "src/utils/conversationRecovery.ts",
        "src/utils/debugLogger.ts",
        "src/utils/exampleCommands.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/file.ts",
        "src/utils/json.ts",
        "src/utils/markdown.ts",
        "src/utils/messages.tsx",
        "src/utils/model.ts",
        "src/utils/PersistentShell.ts",
        "src/utils/ripgrep.ts",
        "src/utils/terminal.ts",
        "src/utils/user.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getProjectDir",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "cwd: string"
          ],
          "returnType": "string",
          "lineNumber": 21
        },
        {
          "name": "dateToFilename",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "date: Date"
          ],
          "returnType": "string",
          "lineNumber": 32
        },
        {
          "name": "getErrorsPath",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "lineNumber": 38
        },
        {
          "name": "getMessagesPath",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "messageLogName: string",
            "forkNumber: number",
            "sidechainNumber: number"
          ],
          "returnType": "string",
          "lineNumber": 42
        },
        {
          "name": "logError",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "error: unknown"
          ],
          "returnType": "void",
          "lineNumber": 55
        },
        {
          "name": "getErrorsLog",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "object[]",
          "lineNumber": 84
        },
        {
          "name": "getInMemoryErrors",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "object[]",
          "lineNumber": 88
        },
        {
          "name": "readLog",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "path: string"
          ],
          "returnType": "object[]",
          "lineNumber": 92
        },
        {
          "name": "appendToLog",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "path: string",
            "message: object"
          ],
          "returnType": "void",
          "lineNumber": 103
        },
        {
          "name": "overwriteLog",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "path: string",
            "messages: object[]"
          ],
          "returnType": "void",
          "lineNumber": 132
        },
        {
          "name": "loadLogList",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "path"
          ],
          "returnType": "Promise<LogOption[]>",
          "lineNumber": 158
        },
        {
          "name": "parseLogFilename",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filename: string"
          ],
          "returnType": "{\n  date: string\n  forkNumber: number | undefined\n  sidechainNumber: number | undefined\n}",
          "lineNumber": 206
        },
        {
          "name": "getNextAvailableLogForkNumber",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "date: string",
            "forkNumber: number",
            "sidechainNumber: number"
          ],
          "returnType": "number",
          "lineNumber": 243
        },
        {
          "name": "getNextAvailableLogSidechainNumber",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "date: string",
            "forkNumber: number"
          ],
          "returnType": "number",
          "lineNumber": 255
        },
        {
          "name": "getForkNumberFromFilename",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "filename: string"
          ],
          "returnType": "number | undefined",
          "lineNumber": 266
        },
        {
          "name": "sortLogs",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "logs: LogOption[]"
          ],
          "returnType": "LogOption[]",
          "lineNumber": 288
        },
        {
          "name": "formatDate",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "date: Date"
          ],
          "returnType": "string",
          "lineNumber": 307
        },
        {
          "name": "parseISOString",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "s: string"
          ],
          "returnType": "Date",
          "lineNumber": 337
        },
        {
          "name": "logMCPError",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "serverName: string",
            "error: unknown"
          ],
          "returnType": "void",
          "lineNumber": 352
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "IN_MEMORY_ERROR_LOG",
        "MAX_IN_MEMORY_ERRORS",
        "SESSION_ID",
        "paths",
        "CACHE_PATHS",
        "DATE",
        "errorStr",
        "errorInfo",
        "dir",
        "messages",
        "messageWithTimestamp",
        "dir",
        "messagesWithMetadata",
        "files",
        "logData",
        "fullPath",
        "content",
        "messages",
        "firstMessage",
        "lastMessage",
        "firstPrompt",
        "base",
        "segments",
        "hasSidechain",
        "sidechainIndex",
        "lastSegment",
        "base",
        "segments",
        "hasSidechain",
        "sidechainIndex",
        "lastNumber",
        "modifiedDiff",
        "createdDiff",
        "now",
        "yesterday",
        "isToday",
        "isYesterday",
        "timeStr",
        "b",
        "logDir",
        "errorStr",
        "timestamp",
        "logFile",
        "errorInfo",
        "messages"
      ],
      "lineCount": 383,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\markdown.ts",
      "relativePath": "src/utils/markdown.ts",
      "name": "markdown.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "marked",
          "imports": [
            "marked",
            "Token"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages",
          "imports": [
            "stripSystemMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "cli-highlight",
          "imports": [
            "highlight",
            "supportsLanguage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "applyMarkdown",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/messages.tsx",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/AssistantThinkingMessage.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "applyMarkdown",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "content: string"
          ],
          "returnType": "string",
          "lineNumber": 8
        },
        {
          "name": "format",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "token: Token",
            "listDepth",
            "orderedListNumber: number | null",
            "parent: Token | null"
          ],
          "returnType": "string",
          "lineNumber": 16
        },
        {
          "name": "getListNumber",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "listDepth: number",
            "orderedListNumber: number"
          ],
          "returnType": "string",
          "lineNumber": 201
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "DEPTH_1_LIST_NUMBERS",
        "DEPTH_2_LIST_NUMBERS"
      ],
      "lineCount": 214,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\messageContextManager.ts",
      "relativePath": "src/utils/messageContextManager.ts",
      "name": "messageContextManager.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/common",
          "imports": [
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./tokens",
          "imports": [
            "countTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MessageRetentionStrategy",
          "type": "named"
        },
        {
          "name": "MessageTruncationResult",
          "type": "named"
        },
        {
          "name": "MessageContextManager",
          "type": "named"
        },
        {
          "name": "createRetentionStrategy",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/tokens.ts"
      ],
      "dependents": [
        "src/services/claude.ts"
      ],
      "comments": {
        "fileHeader": "🎯 消息上下文管理器 - 智能对话上下文窗口管理系统🏗️ 核心功能：\n- 实现多策略的消息截断和压缩算法\n- 提供智能的对话上下文保留机制\n- 管理 AI 模型的上下文窗口限制\n- 支持重要消息的优先保留策略\n- 集成对话历史的智能摘要生成🔄 依赖关系：\n- 上游：被查询系统和 AI 服务使用\n- 下游：依赖 token 计算和消息类型定义📊 使用场景：\n- 长对话的上下文窗口管理\n- AI 模型 token 限制的智能处理\n- 重要信息的自动保留和压缩\n- 对话历史的结构化管理🔧 技术实现：\n- 策略模式：多种截断策略的动态选择\n- 智能压缩：基于内容重要性的压缩算法\n- 摘要生成：对话历史的自动摘要创建\n- Token 管理：精确的上下文窗口控制🎯 支持的截断策略：\n- preserve_recent: 保留最近消息策略\n- preserve_important: 保留重要消息策略\n- smart_compression: 智能压缩摘要策略\n- auto_compact: 自动紧凑压缩策略💡 设计原则：\n- 上下文连续性：确保对话逻辑的连贯性\n- 信息重要性：优先保留关键和错误信息\n- 性能优化：高效的截断和压缩算法\n- 用户体验：透明的策略选择和结果反馈"
      },
      "functions": [
        {
          "name": "createRetentionStrategy",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "targetContextLength: number",
            "currentTokens: number",
            "userPreference: 'aggressive' | 'balanced' | 'conservative'"
          ],
          "returnType": "MessageRetentionStrategy",
          "description": "创建保留策略工厂函数 - 智能生成适合的消息保留策略根据上下文长度、当前 token 数量和用户偏好，",
          "lineNumber": 434
        }
      ],
      "classes": [
        {
          "name": "MessageContextManager",
          "isExported": true,
          "methods": [
            "truncateMessages",
            "preserveRecentMessages",
            "preserveImportantMessages",
            "smartCompressionStrategy",
            "autoCompactStrategy",
            "estimateMessageCount",
            "isImportantMessage",
            "messagesEqual",
            "createMessagesSummary"
          ],
          "description": "消息上下文管理器 - 智能对话上下文截断的核心实现为有上下文限制的 AI 模型实现多种智能截断策略，",
          "lineNumber": 102
        }
      ],
      "interfaces": [
        "MessageRetentionStrategy",
        "MessageTruncationResult"
      ],
      "types": [],
      "constants": [
        "preserveCount",
        "truncatedMessages",
        "removedCount",
        "importantMessages",
        "recentMessages",
        "recentCount",
        "message",
        "combinedMessages",
        "truncatedMessages",
        "aIndex",
        "bIndex",
        "removedCount",
        "recentCount",
        "recentMessages",
        "olderMessages",
        "summary",
        "summaryMessage",
        "truncatedMessages",
        "avgTokensPerMessage",
        "content",
        "textContent",
        "userMessages",
        "assistantMessages",
        "toolUses",
        "topics",
        "text",
        "uniqueTopics",
        "maxTokens"
      ],
      "lineCount": 462,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\messages.tsx",
      "relativePath": "src/utils/messages.tsx",
      "name": "messages.tsx",
      "extension": ".tsx",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "randomUUID",
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query.js",
          "imports": [
            "AssistantMessage",
            "Message",
            "ProgressMessage",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "getCommand",
            "hasCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./errors",
          "imports": [
            "MalformedCommandError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "last",
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "SetToolJSXFn",
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/generators",
          "imports": [
            "lastX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "NO_CONTENT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ImageBlockParam",
            "TextBlockParam",
            "ToolResultBlockParam",
            "ToolUseBlockParam",
            "APIMessage",
            "ContentBlockParam",
            "ContentBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "setCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/messages/UserBashInputMessage",
          "imports": [
            "UserBashInputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Spinner",
          "imports": [
            "Spinner"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/customCommands",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../services/mentionProcessor",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "INTERRUPT_MESSAGE",
          "type": "named"
        },
        {
          "name": "INTERRUPT_MESSAGE_FOR_TOOL_USE",
          "type": "named"
        },
        {
          "name": "CANCEL_MESSAGE",
          "type": "named"
        },
        {
          "name": "REJECT_MESSAGE",
          "type": "named"
        },
        {
          "name": "NO_RESPONSE_REQUESTED",
          "type": "named"
        },
        {
          "name": "SYNTHETIC_ASSISTANT_MESSAGES",
          "type": "named"
        },
        {
          "name": "createAssistantMessage",
          "type": "named"
        },
        {
          "name": "createAssistantAPIErrorMessage",
          "type": "named"
        },
        {
          "name": "createUserMessage",
          "type": "named"
        },
        {
          "name": "createProgressMessage",
          "type": "named"
        },
        {
          "name": "createToolResultStopMessage",
          "type": "named"
        },
        {
          "name": "processUserInput",
          "type": "named"
        },
        {
          "name": "extractTagFromMessage",
          "type": "named"
        },
        {
          "name": "extractTag",
          "type": "named"
        },
        {
          "name": "isNotEmptyMessage",
          "type": "named"
        },
        {
          "name": "normalizeMessages",
          "type": "named"
        },
        {
          "name": "reorderMessages",
          "type": "named"
        },
        {
          "name": "getUnresolvedToolUseIDs",
          "type": "named"
        },
        {
          "name": "getInProgressToolUseIDs",
          "type": "named"
        },
        {
          "name": "getErroredToolUseMessages",
          "type": "named"
        },
        {
          "name": "normalizeMessagesForAPI",
          "type": "named"
        },
        {
          "name": "normalizeContentFromAPI",
          "type": "named"
        },
        {
          "name": "isEmptyMessageText",
          "type": "named"
        },
        {
          "name": "stripSystemMessages",
          "type": "named"
        },
        {
          "name": "getToolUseID",
          "type": "named"
        },
        {
          "name": "getLastAssistantMessageId",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/errors.ts",
        "src/utils/log.ts",
        "src/Tool.ts",
        "src/utils/generators.ts",
        "src/services/claude.ts",
        "src/utils/state.ts",
        "src/components/messages/UserBashInputMessage.tsx",
        "src/components/Spinner.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/services/customCommands.ts",
        "src/services/mentionProcessor.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Message.tsx",
        "src/components/messages/AssistantBashOutputMessage.tsx",
        "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
        "src/components/messages/UserBashInputMessage.tsx",
        "src/components/messages/UserCommandMessage.tsx",
        "src/components/messages/UserKodingInputMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
        "src/components/PromptInput.tsx",
        "src/hooks/useCanUseTool.ts",
        "src/services/claude.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/utils.ts",
        "src/utils/ask.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/markdown.ts",
        "src/utils/thinking.ts",
        "src/utils/tokens.ts"
      ],
      "comments": {
        "fileHeader": "消息处理系统核心模块 - 处理用户输入、AI响应和工具使用的消息流转"
      },
      "functions": [
        {
          "name": "baseCreateAssistantMessage",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "content: ContentBlock[]",
            "extra: Partial<AssistantMessage>"
          ],
          "returnType": "AssistantMessage",
          "lineNumber": 63
        },
        {
          "name": "createAssistantMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "content: string"
          ],
          "returnType": "AssistantMessage",
          "lineNumber": 91
        },
        {
          "name": "createAssistantAPIErrorMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "content: string"
          ],
          "returnType": "AssistantMessage",
          "lineNumber": 101
        },
        {
          "name": "createUserMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "content: string | ContentBlockParam[]",
            "toolUseResult: FullToolUseResult"
          ],
          "returnType": "UserMessage",
          "lineNumber": 121
        },
        {
          "name": "createProgressMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "toolUseID: string",
            "siblingToolUseIDs: Set<string>",
            "content: AssistantMessage",
            "normalizedMessages: NormalizedMessage[]",
            "tools: Tool[]"
          ],
          "returnType": "ProgressMessage",
          "lineNumber": 137
        },
        {
          "name": "createToolResultStopMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "toolUseID: string"
          ],
          "returnType": "ToolResultBlockParam",
          "lineNumber": 155
        },
        {
          "name": "processUserInput",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "input: string",
            "mode: 'bash' | 'prompt' | 'koding'",
            "setToolJSX: SetToolJSXFn",
            "context: ToolUseContext & {\n    setForkConvoWithMessagesOnTheNextRender: (\n      forkConvoWithMessages: Message[],\n    ) => void\n    options?: {\n      isKodingRequest?: boolean\n      kodingContext?: string\n    }\n  }",
            "pastedImage: string | null"
          ],
          "returnType": "Promise<Message[]>",
          "description": "处理用户输入的主要函数",
          "lineNumber": 176
        },
        {
          "name": "getMessagesForSlashCommand",
          "isExported": false,
          "isAsync": true,
          "parameters": [
            "commandName: string",
            "args: string",
            "setToolJSX: SetToolJSXFn",
            "context: ToolUseContext & {\n    setForkConvoWithMessagesOnTheNextRender: (\n      forkConvoWithMessages: Message[],\n    ) => void\n  }"
          ],
          "returnType": "Promise<Message[]>",
          "lineNumber": 408
        },
        {
          "name": "extractTagFromMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "message: Message",
            "tagName: string"
          ],
          "returnType": "string | null",
          "lineNumber": 509
        },
        {
          "name": "extractTag",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "html: string",
            "tagName: string"
          ],
          "returnType": "string | null",
          "lineNumber": 522
        },
        {
          "name": "isNotEmptyMessage",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "message: Message"
          ],
          "returnType": "boolean",
          "lineNumber": 579
        },
        {
          "name": "normalizeMessages",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "messages: Message[]"
          ],
          "returnType": "NormalizedMessage[]",
          "description": "消息标准化函数",
          "lineNumber": 635
        },
        {
          "name": "isToolUseRequestMessage",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "message: Message"
          ],
          "returnType": "message is ToolUseRequestMessage",
          "lineNumber": 680
        },
        {
          "name": "reorderMessages",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "messages: NormalizedMessage[]"
          ],
          "returnType": "NormalizedMessage[]",
          "description": "消息重排序函数",
          "lineNumber": 698
        },
        {
          "name": "getUnresolvedToolUseIDs",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "normalizedMessages: NormalizedMessage[]"
          ],
          "returnType": "Set<string>",
          "lineNumber": 783
        },
        {
          "name": "getInProgressToolUseIDs",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "normalizedMessages: NormalizedMessage[]"
          ],
          "returnType": "Set<string>",
          "description": "获取正在执行中的工具使用ID集合",
          "lineNumber": 819
        },
        {
          "name": "getErroredToolUseMessages",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "normalizedMessages: NormalizedMessage[]"
          ],
          "returnType": "AssistantMessage[]",
          "lineNumber": 853
        },
        {
          "name": "normalizeMessagesForAPI",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "messages: Message[]"
          ],
          "returnType": "(UserMessage | AssistantMessage)[]",
          "description": "为API调用标准化消息",
          "lineNumber": 873
        },
        {
          "name": "normalizeContentFromAPI",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "content: APIMessage['content']"
          ],
          "returnType": "APIMessage['content']",
          "description": "otherwise they will give an API error when we send them to the API next time we call query().",
          "lineNumber": 926
        },
        {
          "name": "isEmptyMessageText",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "text: string"
          ],
          "returnType": "boolean",
          "lineNumber": 940
        },
        {
          "name": "stripSystemMessages",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "content: string"
          ],
          "returnType": "string",
          "lineNumber": 953
        },
        {
          "name": "getToolUseID",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "message: NormalizedMessage"
          ],
          "returnType": "string | null",
          "lineNumber": 958
        },
        {
          "name": "getLastAssistantMessageId",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "messages: Message[]"
          ],
          "returnType": "string | undefined",
          "lineNumber": 975
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "FullToolUseResult",
        "NormalizedUserMessage",
        "NormalizedMessage",
        "ToolUseRequestMessage"
      ],
      "constants": [
        "INTERRUPT_MESSAGE",
        "INTERRUPT_MESSAGE_FOR_TOOL_USE",
        "CANCEL_MESSAGE",
        "REJECT_MESSAGE",
        "NO_RESPONSE_REQUESTED",
        "SYNTHETIC_ASSISTANT_MESSAGES",
        "m",
        "userMessage",
        "oldCwd",
        "newCwd",
        "validationResult",
        "userMessage",
        "words",
        "args",
        "newMessages",
        "isKodingRequest",
        "kodingContextInfo",
        "command",
        "userMessage",
        "result",
        "prompt",
        "userMessage",
        "escapedTag",
        "pattern",
        "openingTag",
        "closingTag",
        "content",
        "beforeMatch",
        "ms",
        "toolUseMessages",
        "existingProgressMessage",
        "toolUseMessage",
        "toolUseID",
        "lastProgressMessage",
        "toolUseMessage",
        "getToolResultIDs",
        "toolResults",
        "unresolvedToolUseIDs",
        "toolUseIDsThatHaveProgressMessages",
        "toolUseID",
        "toolResults",
        "result",
        "lastMessage",
        "filteredContent",
        "STRIPPED_TAGS",
        "regex",
        "message"
      ],
      "lineCount": 987,
      "complexity": "high"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\model.ts",
      "relativePath": "src/utils/model.ts",
      "name": "model.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig",
            "ModelProfile",
            "ModelPointerType",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "USE_BEDROCK",
          "type": "named"
        },
        {
          "name": "USE_VERTEX",
          "type": "named"
        },
        {
          "name": "ModelConfig",
          "type": "named"
        },
        {
          "name": "getSlowAndCapableModel",
          "type": "named"
        },
        {
          "name": "isDefaultSlowAndCapableModel",
          "type": "named"
        },
        {
          "name": "getVertexRegionForModel",
          "type": "named"
        },
        {
          "name": "ModelManager",
          "type": "named"
        },
        {
          "name": "getModelManager",
          "type": "named"
        },
        {
          "name": "reloadModelManager",
          "type": "named"
        },
        {
          "name": "getQuickModel",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/model.tsx",
        "src/components/Config.tsx",
        "src/components/Logo.tsx",
        "src/components/ModelConfig.tsx",
        "src/components/ModelListManager.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/ModelStatusDisplay.tsx",
        "src/components/PromptInput.tsx",
        "src/context.ts",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useUnifiedCompletion.ts",
        "src/screens/REPL.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/services/claude.ts",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/utils/ask.tsx",
        "src/utils/auth.ts",
        "src/utils/autoCompactCore.ts",
        "src/utils/config.ts",
        "src/utils/thinking.ts"
      ],
      "comments": {
        "fileHeader": "🎯 模型管理核心系统 - Kode 多 AI 模型的统一管理层🏗️ 核心功能：\n- 实现多 AI 模型配置和动态切换管理\n- 提供模型指针系统的统一分发机制\n- 管理上下文窗口和模型兼容性检查\n- 支持动态模型切换和配置热更新🔄 依赖关系：\n- 上游：被查询处理和 AI 服务使用\n- 下游：依赖配置管理和日志系统📊 使用场景：\n- AI 模型的动态选择和切换\n- 不同任务场景的模型优化\n- 上下文溢出的自动处理\n- 模型配置的生命周期管理🔧 技术实现：\n- 单例模式避免配置竞争冲突\n- 支持多种部署方式（Bedrock、Vertex、官方 API）\n- 模型指针抽象适配不同使用场景\n- 上下文溢出自动处理和回退机制🔄 模型指针系统：\n- main: 主对话模型（用户交互）\n- task: 任务工具模型（工具调用）\n- reasoning: 推理模型（复杂逻辑）\n- quick: 快速模型（简单操作）"
      },
      "functions": [
        {
          "name": "getModelConfig",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<ModelConfig>",
          "description": "获取模型配置的助手函数",
          "lineNumber": 91
        },
        {
          "name": "isDefaultSlowAndCapableModel",
          "isExported": true,
          "isAsync": true,
          "parameters": [],
          "returnType": "Promise<boolean>",
          "description": "检查是否使用默认的慢速强大模型 - 模型配置验证检查当前使用的模型是否为系统默认的慢速但功能强大的模型，",
          "lineNumber": 129
        },
        {
          "name": "getVertexRegionForModel",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "model: string | undefined"
          ],
          "returnType": "string | undefined",
          "description": "获取特定 Vertex 模型的部署区域 - 区域化部署配置根据模型类型检查对应的环境变量，获取最适合的",
          "lineNumber": 145
        }
      ],
      "classes": [
        {
          "name": "ModelManager",
          "isExported": true,
          "methods": [
            "getCurrentModel",
            "getMainAgentModel",
            "getTaskToolModel",
            "switchToNextModelWithContextCheck",
            "switchToNextModel",
            "revertToPreviousModel",
            "analyzeContextCompatibility",
            "switchToNextModelWithAnalysis",
            "canModelHandleContext",
            "findModelWithSufficientContext",
            "getModelForContext",
            "getActiveModelProfiles",
            "hasConfiguredModels",
            "getModel",
            "getModelName",
            "getReasoningModel",
            "getQuickModel",
            "addModel",
            "setPointer",
            "getAvailableModels",
            "getAllConfiguredModels",
            "getAllAvailableModelNames",
            "getAllConfiguredModelNames",
            "getModelSwitchingDebugInfo",
            "removeModel",
            "getDefaultModel",
            "saveConfig",
            "getFallbackModel",
            "resolveModel",
            "resolveModelWithInfo",
            "findModelProfile",
            "findModelProfileByModelName",
            "findModelProfileByName",
            "updateLastUsed"
          ],
          "description": "综合模型管理器类 - 中央化模型选择和管理的核心",
          "lineNumber": 178
        }
      ],
      "interfaces": [
        "ModelConfig"
      ],
      "types": [],
      "constants": [
        "USE_BEDROCK",
        "USE_VERTEX",
        "DEFAULT_MODEL_CONFIG",
        "getSlowAndCapableModel",
        "config",
        "modelManager",
        "model",
        "modelConfig",
        "mainModelName",
        "profile",
        "mainModelName",
        "profile",
        "activeProfile",
        "taskModelName",
        "profile",
        "allProfiles",
        "currentMainModelName",
        "currentModel",
        "previousModelName",
        "firstModel",
        "analysis",
        "currentIndex",
        "firstModel",
        "analysis",
        "nextIndex",
        "nextModel",
        "wasInactive",
        "analysis",
        "result",
        "allModels",
        "currentModel",
        "allModels",
        "currentIndex",
        "totalModels",
        "previousModel",
        "usableContext",
        "usagePercentage",
        "result",
        "newModel",
        "analysis",
        "analysis",
        "pointerId",
        "profile",
        "profile",
        "existingByModelName",
        "existingByName",
        "newModel",
        "availableModels",
        "currentMainModelName",
        "profile",
        "updatedConfig",
        "modelConfig",
        "pointerId",
        "isPointer",
        "pointerId",
        "profile",
        "getModelManager",
        "config",
        "reloadModelManager",
        "getQuickModel",
        "manager",
        "quickModel"
      ],
      "lineCount": 1174,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\permissions\\filesystem.ts",
      "relativePath": "src/utils/permissions/filesystem.ts",
      "name": "filesystem.ts",
      "extension": ".ts",
      "directory": "src/utils/permissions",
      "level": 2,
      "imports": [
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "resolve",
            "relative",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../state",
          "imports": [
            "getCwd",
            "getOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "toAbsolutePath",
          "type": "named"
        },
        {
          "name": "pathInOriginalCwd",
          "type": "named"
        },
        {
          "name": "hasReadPermission",
          "type": "named"
        },
        {
          "name": "hasWritePermission",
          "type": "named"
        },
        {
          "name": "saveReadPermissionForTest",
          "type": "named"
        },
        {
          "name": "grantReadPermissionForOriginalDir",
          "type": "named"
        },
        {
          "name": "grantWritePermissionForOriginalDir",
          "type": "named"
        },
        {
          "name": "clearFilePermissions",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/entrypoints/cli.tsx",
        "src/permissions.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "toAbsolutePath",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "path: string"
          ],
          "returnType": "string",
          "description": "Ensures a path is absolute by resolving it relative to cwd if necessary",
          "lineNumber": 14
        },
        {
          "name": "normalizeForCompare",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "p: string"
          ],
          "returnType": "string",
          "lineNumber": 19
        },
        {
          "name": "isSubpath",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "base: string",
            "target: string"
          ],
          "returnType": "boolean",
          "lineNumber": 26
        },
        {
          "name": "pathInOriginalCwd",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "path: string"
          ],
          "returnType": "boolean",
          "description": "Ensures a path is in the original cwd path",
          "lineNumber": 42
        },
        {
          "name": "hasReadPermission",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "directory: string"
          ],
          "returnType": "boolean",
          "description": "Check if read permission exists for the specified directory",
          "lineNumber": 53
        },
        {
          "name": "hasWritePermission",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "directory: string"
          ],
          "returnType": "boolean",
          "description": "Check if write permission exists for the specified directory",
          "lineNumber": 66
        },
        {
          "name": "saveReadPermission",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "directory: string"
          ],
          "returnType": "void",
          "description": "Save read permission for a directory",
          "lineNumber": 78
        },
        {
          "name": "grantReadPermissionForOriginalDir",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "Grants read permission for the original project directory.",
          "lineNumber": 95
        },
        {
          "name": "saveWritePermission",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "directory: string"
          ],
          "returnType": "void",
          "description": "Save write permission for a directory",
          "lineNumber": 104
        },
        {
          "name": "grantWritePermissionForOriginalDir",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "Grants write permission for the original project directory.",
          "lineNumber": 118
        },
        {
          "name": "clearFilePermissions",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "description": "For testing purposes",
          "lineNumber": 124
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "readFileAllowedDirectories",
        "writeFileAllowedDirectories",
        "abs",
        "norm",
        "rel",
        "absolutePath",
        "base",
        "absolutePath",
        "absolutePath",
        "absolutePath",
        "saveReadPermissionForTest",
        "originalProjectDir",
        "absolutePath",
        "originalProjectDir"
      ],
      "lineCount": 128,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\PersistentShell.ts",
      "relativePath": "src/utils/PersistentShell.ts",
      "name": "PersistentShell.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "shell-quote",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "spawn",
            "execSync",
            "ChildProcess"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "resolve",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "PersistentShell",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/state.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "quoteForBash",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "str: string"
          ],
          "returnType": "string",
          "lineNumber": 45
        },
        {
          "name": "toBashPath",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "pathStr: string",
            "type: 'posix' | 'msys' | 'wsl'"
          ],
          "returnType": "string",
          "lineNumber": 49
        },
        {
          "name": "fileExists",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "p: string | undefined"
          ],
          "returnType": "p is string",
          "lineNumber": 70
        },
        {
          "name": "splitPathEntries",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "pathEnv: string",
            "platform: NodeJS.Platform"
          ],
          "returnType": "string[]",
          "description": "Robust PATH splitter for Windows and POSIX",
          "lineNumber": 75
        },
        {
          "name": "detectShell",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "DetectedShell",
          "lineNumber": 124
        }
      ],
      "classes": [
        {
          "name": "PersistentShell",
          "isExported": true,
          "methods": [
            "restart",
            "getInstance",
            "killChildren",
            "processQueue",
            "exec",
            "exec_",
            "sendToShell",
            "pwd",
            "setCwd",
            "close"
          ],
          "lineNumber": 198
        }
      ],
      "interfaces": [],
      "types": [
        "ExecResult",
        "QueuedCommand",
        "DetectedShell"
      ],
      "constants": [
        "TEMPFILE_PREFIX",
        "DEFAULT_TIMEOUT",
        "SIGTERM_CODE",
        "FILE_SUFFIXES",
        "SHELL_CONFIGS",
        "normalized",
        "driveMatch",
        "drive",
        "rest",
        "entries",
        "pushCurrent",
        "cleaned",
        "ch",
        "segmentLength",
        "firstChar",
        "isDriveLetterPrefix",
        "isWin",
        "bin",
        "programFiles",
        "localAppData",
        "candidates",
        "pathEnv",
        "pathEntries",
        "candidate",
        "hint",
        "id",
        "parentPid",
        "childPids",
        "killChildren",
        "result",
        "quotedCommand",
        "errorStr",
        "commandTimeout",
        "commandParts",
        "start",
        "checkCompletion",
        "stdout",
        "errorString",
        "newCwd",
        "resolved",
        "bashPath"
      ],
      "lineCount": 531,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\responseState.ts",
      "relativePath": "src/utils/responseState.ts",
      "name": "responseState.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "getLastResponseId",
          "type": "named"
        },
        {
          "name": "setLastResponseId",
          "type": "named"
        },
        {
          "name": "clearResponseId",
          "type": "named"
        },
        {
          "name": "clearAllResponseIds",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [],
      "comments": {
        "fileHeader": "Response state management for Responses API\nTracks previous_response_id for conversation chaining"
      },
      "functions": [
        {
          "name": "getLastResponseId",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "conversationId: string"
          ],
          "returnType": "string | undefined",
          "lineNumber": 9
        },
        {
          "name": "setLastResponseId",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "conversationId: string",
            "responseId: string"
          ],
          "returnType": "void",
          "lineNumber": 13
        },
        {
          "name": "clearResponseId",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "conversationId: string"
          ],
          "returnType": "void",
          "lineNumber": 17
        },
        {
          "name": "clearAllResponseIds",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 21
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "responseIdCache"
      ],
      "lineCount": 23,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\ripgrep.ts",
      "relativePath": "src/utils/ripgrep.ts",
      "name": "ripgrep.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "spawn-rx",
          "imports": [
            "findActualExecutable"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:url",
          "imports": [
            "fileURLToPath",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "execFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "debug",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ripGrep",
          "type": "named"
        },
        {
          "name": "listAllContentFiles",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/utils/execFileNoThrow.ts"
      ],
      "dependents": [
        "src/context.ts",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/utils/file.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "ripGrep",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "args: string[]",
            "target: string",
            "abortSignal: AbortSignal"
          ],
          "returnType": "Promise<string[]>",
          "lineNumber": 50
        },
        {
          "name": "listAllContentFiles",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "path: string",
            "abortSignal: AbortSignal",
            "limit: number"
          ],
          "returnType": "Promise<string[]>",
          "description": "all non-empty files",
          "lineNumber": 91
        },
        {
          "name": "codesignRipgrepIfNecessary",
          "isExported": false,
          "isAsync": true,
          "parameters": [],
          "lineNumber": 108
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "__filename",
        "__dirname",
        "d",
        "useBuiltinRipgrep",
        "ripgrepPath",
        "rgRoot",
        "ret",
        "rg",
        "lines",
        "needsSigned",
        "signResult",
        "quarantineResult"
      ],
      "lineCount": 168,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\secureFile.ts",
      "relativePath": "src/utils/secureFile.ts",
      "name": "secureFile.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "node:fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync",
            "mkdirSync",
            "statSync",
            "unlinkSync",
            "renameSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:path",
          "imports": [
            "join",
            "dirname",
            "normalize",
            "resolve",
            "extname",
            "relative",
            "isAbsolute"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SecureFileService",
          "type": "named"
        },
        {
          "name": "secureFileService",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/FileReadTool/FileReadTool.tsx"
      ],
      "comments": {},
      "functions": [],
      "classes": [
        {
          "name": "SecureFileService",
          "isExported": true,
          "methods": [
            "getInstance",
            "validateFilePath",
            "safeExists",
            "safeReadFile",
            "safeWriteFile",
            "safeDeleteFile",
            "safeCreateDirectory",
            "safeGetFileInfo",
            "addAllowedBasePath",
            "setMaxFileSize",
            "addAllowedExtensions",
            "isPathAllowed",
            "validateFileName"
          ],
          "description": "安全文件系统操作服务",
          "lineNumber": 9
        }
      ],
      "interfaces": [],
      "types": [],
      "constants": [
        "normalizedPath",
        "suspiciousPatterns",
        "absolutePath",
        "isInAllowedPath",
        "base",
        "rel",
        "validation",
        "validation",
        "normalizedPath",
        "ext",
        "allowedExts",
        "stats",
        "maxSize",
        "content",
        "validation",
        "normalizedPath",
        "ext",
        "allowedExts",
        "contentSize",
        "maxSize",
        "dir",
        "tempPath",
        "validation",
        "normalizedPath",
        "stats",
        "validation",
        "normalizedPath",
        "stats",
        "validation",
        "normalizedPath",
        "stats",
        "normalized",
        "validation",
        "invalidChars",
        "reservedNames",
        "baseName",
        "secureFileService"
      ],
      "lineCount": 565,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\sessionState.ts",
      "relativePath": "src/utils/sessionState.ts",
      "name": "sessionState.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "SessionState",
          "type": "named"
        },
        {
          "name": "setSessionState",
          "type": "named"
        },
        {
          "name": "getSessionState",
          "type": "named"
        },
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/Spinner.tsx",
        "src/services/openai.ts",
        "src/utils/config.ts",
        "src/utils/todoStorage.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "setSessionState",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "key: K",
            "value: SessionState[K]"
          ],
          "returnType": "void",
          "lineNumber": 17
        },
        {
          "name": "setSessionState",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "partialState: Partial<SessionState>"
          ],
          "returnType": "void",
          "lineNumber": 21
        },
        {
          "name": "setSessionState",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "keyOrState: keyof SessionState | Partial<SessionState>",
            "value: any"
          ],
          "returnType": "void",
          "lineNumber": 22
        },
        {
          "name": "getSessionState",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "SessionState",
          "lineNumber": 33
        },
        {
          "name": "getSessionState",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "key: K"
          ],
          "returnType": "SessionState[K]",
          "lineNumber": 34
        },
        {
          "name": "getSessionState",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "key: K"
          ],
          "lineNumber": 35
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "SessionState"
      ],
      "constants": [
        "isDebug",
        "sessionState"
      ],
      "lineCount": 42,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\state.ts",
      "relativePath": "src/utils/state.ts",
      "name": "state.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "process",
          "imports": [
            "cwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PersistentShell",
          "imports": [
            "PersistentShell"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "setCwd",
          "type": "named"
        },
        {
          "name": "setOriginalCwd",
          "type": "named"
        },
        {
          "name": "getOriginalCwd",
          "type": "named"
        },
        {
          "name": "getCwd",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/PersistentShell.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/clear.ts",
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/Logo.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/components/permissions/toolUseOptions.ts",
        "src/components/TrustDialog.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useUnifiedCompletion.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/screens/REPL.tsx",
        "src/services/customCommands.ts",
        "src/services/mcpClient.ts",
        "src/services/mentionProcessor.ts",
        "src/services/vcr.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileEditTool/utils.ts",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/utils/agentLoader.ts",
        "src/utils/ask.tsx",
        "src/utils/config.ts",
        "src/utils/exampleCommands.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/file.ts",
        "src/utils/messages.tsx",
        "src/utils/permissions/filesystem.ts",
        "src/utils/style.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "setCwd",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "cwd: string"
          ],
          "returnType": "Promise<void>",
          "lineNumber": 11
        },
        {
          "name": "setOriginalCwd",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "cwd: string"
          ],
          "returnType": "void",
          "lineNumber": 15
        },
        {
          "name": "getOriginalCwd",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "lineNumber": 19
        },
        {
          "name": "getCwd",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "string",
          "lineNumber": 23
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "STATE"
      ],
      "lineCount": 26,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\style.ts",
      "relativePath": "src/utils/style.ts",
      "name": "style.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join",
            "parse",
            "dirname"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getCodeStyle",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/context.ts",
        "src/utils/autoCompactCore.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "STYLE_PROMPT",
        "getCodeStyle",
        "styles",
        "stylePath"
      ],
      "lineCount": 30,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\terminal.ts",
      "relativePath": "src/utils/terminal.ts",
      "name": "terminal.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "setTerminalTitle",
          "type": "named"
        },
        {
          "name": "updateTerminalTitle",
          "type": "named"
        },
        {
          "name": "clearTerminal",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/json.ts",
        "src/utils/log.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/login.tsx",
        "src/commands/logout.tsx",
        "src/commands/onboarding.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/Onboarding.tsx",
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx",
        "src/screens/REPL.tsx",
        "src/utils/autoCompactCore.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "setTerminalTitle",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "title: string"
          ],
          "returnType": "void",
          "lineNumber": 5
        },
        {
          "name": "updateTerminalTitle",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "message: string"
          ],
          "returnType": "Promise<void>",
          "lineNumber": 13
        },
        {
          "name": "clearTerminal",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "Promise<void>",
          "lineNumber": 44
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "result",
        "content",
        "response"
      ],
      "lineCount": 51,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\theme.ts",
      "relativePath": "src/utils/theme.ts",
      "name": "theme.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Theme",
          "type": "named"
        },
        {
          "name": "getTheme",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/mcp.ts",
        "src/commands/terminalSetup.ts",
        "src/components/ApproveApiKey.tsx",
        "src/components/AsciiLogo.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Bug.tsx",
        "src/components/Config.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/CostThresholdDialog.tsx",
        "src/components/CustomSelect/select-option.tsx",
        "src/components/CustomSelect/select.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/Help.tsx",
        "src/components/InvalidConfigDialog.tsx",
        "src/components/Logo.tsx",
        "src/components/LogSelector.tsx",
        "src/components/MCPServerApprovalDialog.tsx",
        "src/components/MCPServerMultiselectDialog.tsx",
        "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
        "src/components/messages/AssistantRedactedThinkingMessage.tsx",
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/AssistantThinkingMessage.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/messages/TaskProgressMessage.tsx",
        "src/components/messages/TaskToolMessage.tsx",
        "src/components/messages/UserBashInputMessage.tsx",
        "src/components/messages/UserCommandMessage.tsx",
        "src/components/messages/UserKodingInputMessage.tsx",
        "src/components/messages/UserPromptMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/ModeIndicator.tsx",
        "src/components/ModelConfig.tsx",
        "src/components/ModelListManager.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/ModelStatusDisplay.tsx",
        "src/components/Onboarding.tsx",
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/components/permissions/PermissionRequestTitle.tsx",
        "src/components/permissions/toolUseOptions.ts",
        "src/components/PressEnterToContinue.tsx",
        "src/components/PromptInput.tsx",
        "src/components/Spinner.tsx",
        "src/components/StructuredDiff.tsx",
        "src/components/TextInput.tsx",
        "src/components/TokenWarning.tsx",
        "src/components/ToolUseLoader.tsx",
        "src/components/TrustDialog.tsx",
        "src/entrypoints/cli.tsx",
        "src/ProjectOnboarding.tsx",
        "src/screens/Doctor.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/tools/BashTool/OutputLine.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MCPTool/MCPTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/StickerRequestTool/StickerRequestTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/utils/config.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getTheme",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "overrideTheme: ThemeNames"
          ],
          "returnType": "Theme",
          "lineNumber": 115
        }
      ],
      "classes": [],
      "interfaces": [
        "Theme"
      ],
      "types": [
        "ThemeNames"
      ],
      "constants": [
        "lightTheme",
        "lightDaltonizedTheme",
        "darkTheme",
        "darkDaltonizedTheme",
        "config"
      ],
      "lineCount": 128,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\thinking.ts",
      "relativePath": "src/utils/thinking.ts",
      "name": "thinking.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "last"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./messages",
          "imports": [
            "getLastAssistantMessageId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/ThinkTool/ThinkTool",
          "imports": [
            "ThinkTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./model",
          "imports": [
            "USE_BEDROCK",
            "USE_VERTEX",
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getMaxThinkingTokens",
          "type": "named"
        },
        {
          "name": "getReasoningEffort",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/messages.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "getMaxThinkingTokens",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "messages: Message[]"
          ],
          "returnType": "Promise<number>",
          "lineNumber": 7
        },
        {
          "name": "getReasoningEffort",
          "isExported": true,
          "isAsync": true,
          "parameters": [
            "modelProfile: any",
            "messages: Message[]"
          ],
          "returnType": "Promise<'low' | 'medium' | 'high' | null>",
          "lineNumber": 57
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "tokens",
        "lastMessage",
        "content",
        "thinkingTokens",
        "modelManager",
        "fallbackProfile",
        "maxEffort"
      ],
      "lineCount": 101,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\todoStorage.ts",
      "relativePath": "src/utils/todoStorage.ts",
      "name": "todoStorage.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./sessionState",
          "imports": [
            "setSessionState",
            "getSessionState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./agentStorage",
          "imports": [
            "readAgentData",
            "writeAgentData",
            "resolveAgentId"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TodoItem",
          "type": "named"
        },
        {
          "name": "TodoQuery",
          "type": "named"
        },
        {
          "name": "TodoStorageConfig",
          "type": "named"
        },
        {
          "name": "TodoMetrics",
          "type": "named"
        },
        {
          "name": "getTodoMetrics",
          "type": "named"
        },
        {
          "name": "getTodos",
          "type": "named"
        },
        {
          "name": "setTodos",
          "type": "named"
        },
        {
          "name": "getTodoConfig",
          "type": "named"
        },
        {
          "name": "setTodoConfig",
          "type": "named"
        },
        {
          "name": "addTodo",
          "type": "named"
        },
        {
          "name": "updateTodo",
          "type": "named"
        },
        {
          "name": "deleteTodo",
          "type": "named"
        },
        {
          "name": "clearTodos",
          "type": "named"
        },
        {
          "name": "getTodoById",
          "type": "named"
        },
        {
          "name": "getTodosByStatus",
          "type": "named"
        },
        {
          "name": "getTodosByPriority",
          "type": "named"
        },
        {
          "name": "queryTodos",
          "type": "named"
        },
        {
          "name": "getTodoStatistics",
          "type": "named"
        },
        {
          "name": "optimizeTodoStorage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/sessionState.ts",
        "src/utils/agentStorage.ts"
      ],
      "dependents": [
        "src/components/TodoItem.tsx",
        "src/services/systemReminder.ts",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx"
      ],
      "comments": {},
      "functions": [
        {
          "name": "invalidateCache",
          "isExported": false,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 56
        },
        {
          "name": "updateMetrics",
          "isExported": false,
          "isAsync": false,
          "parameters": [
            "operation: string",
            "cacheHit: boolean"
          ],
          "returnType": "void",
          "lineNumber": 61
        },
        {
          "name": "getTodoMetrics",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "TodoMetrics",
          "lineNumber": 85
        },
        {
          "name": "getTodos",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "agentId: string"
          ],
          "returnType": "TodoItem[]",
          "lineNumber": 97
        },
        {
          "name": "setTodos",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "todos: TodoItem[]",
            "agentId: string"
          ],
          "returnType": "void",
          "lineNumber": 131
        },
        {
          "name": "getTodoConfig",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "TodoStorageConfig",
          "lineNumber": 249
        },
        {
          "name": "setTodoConfig",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "config: Partial<TodoStorageConfig>"
          ],
          "returnType": "void",
          "lineNumber": 254
        },
        {
          "name": "addTodo",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "todo: Omit<TodoItem, 'createdAt' | 'updatedAt'>"
          ],
          "returnType": "TodoItem[]",
          "lineNumber": 270
        },
        {
          "name": "updateTodo",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "id: string",
            "updates: Partial<TodoItem>"
          ],
          "returnType": "TodoItem[]",
          "lineNumber": 292
        },
        {
          "name": "deleteTodo",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "id: string"
          ],
          "returnType": "TodoItem[]",
          "lineNumber": 309
        },
        {
          "name": "clearTodos",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 323
        },
        {
          "name": "getTodoById",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "id: string"
          ],
          "returnType": "TodoItem | undefined",
          "lineNumber": 328
        },
        {
          "name": "getTodosByStatus",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "status: TodoItem['status']"
          ],
          "returnType": "TodoItem[]",
          "lineNumber": 334
        },
        {
          "name": "getTodosByPriority",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "priority: TodoItem['priority']"
          ],
          "returnType": "TodoItem[]",
          "lineNumber": 340
        },
        {
          "name": "queryTodos",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "query: TodoQuery"
          ],
          "returnType": "TodoItem[]",
          "description": "Advanced query function",
          "lineNumber": 347
        },
        {
          "name": "getTodoStatistics",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "description": "Utility functions",
          "lineNumber": 388
        },
        {
          "name": "optimizeTodoStorage",
          "isExported": true,
          "isAsync": false,
          "parameters": [],
          "returnType": "void",
          "lineNumber": 412
        }
      ],
      "classes": [],
      "interfaces": [
        "TodoItem",
        "TodoQuery",
        "TodoStorageConfig",
        "TodoMetrics"
      ],
      "types": [],
      "constants": [
        "TODO_STORAGE_KEY",
        "TODO_CONFIG_KEY",
        "TODO_CACHE_KEY",
        "DEFAULT_CONFIG",
        "CACHE_TTL",
        "sessionState",
        "metrics",
        "sessionState",
        "resolvedAgentId",
        "now",
        "agentTodos",
        "agentCacheKey",
        "sessionState",
        "todos",
        "resolvedAgentId",
        "config",
        "existingTodos",
        "updatedTodos",
        "existingTodo",
        "statusOrder",
        "statusDiff",
        "priorityOrder",
        "priorityDiff",
        "aTime",
        "bTime",
        "updatedTodos",
        "existingTodo",
        "statusOrder",
        "statusDiff",
        "priorityOrder",
        "priorityDiff",
        "aTime",
        "bTime",
        "sessionState",
        "currentConfig",
        "newConfig",
        "todos",
        "todos",
        "newTodo",
        "updatedTodos",
        "todos",
        "existingTodo",
        "updatedTodos",
        "todos",
        "todoExists",
        "updatedTodos",
        "todos",
        "todos",
        "todos",
        "todos",
        "hasMatchingTag",
        "todoDate",
        "todos",
        "metrics",
        "todos",
        "validTodos"
      ],
      "lineCount": 432,
      "complexity": "medium"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\tokens.ts",
      "relativePath": "src/utils/tokens.ts",
      "name": "tokens.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages",
          "imports": [
            "SYNTHETIC_ASSISTANT_MESSAGES"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "countTokens",
          "type": "named"
        },
        {
          "name": "countCachedTokens",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/messages.tsx"
      ],
      "dependents": [
        "src/components/PromptInput.tsx",
        "src/services/claude.ts",
        "src/utils/autoCompactCore.ts",
        "src/utils/messageContextManager.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "countTokens",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "messages: Message[]"
          ],
          "returnType": "number",
          "lineNumber": 4
        },
        {
          "name": "countCachedTokens",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "messages: Message[]"
          ],
          "returnType": "number",
          "lineNumber": 29
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [],
      "constants": [
        "message",
        "message"
      ],
      "lineCount": 44,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\toolExecutionController.ts",
      "relativePath": "src/utils/toolExecutionController.ts",
      "name": "toolExecutionController.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "ToolExecutionGroup",
          "type": "named"
        },
        {
          "name": "ToolExecutionController",
          "type": "named"
        },
        {
          "name": "createToolExecutionController",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts"
      ],
      "dependents": [
        "src/query.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "createToolExecutionController",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "tools: Tool[]"
          ],
          "returnType": "ToolExecutionController",
          "description": "Create a tool execution controller for the given tools",
          "lineNumber": 159
        }
      ],
      "classes": [
        {
          "name": "ToolExecutionController",
          "isExported": true,
          "methods": [
            "groupToolsForExecution",
            "canExecuteConcurrently",
            "getToolConcurrencyInfo",
            "analyzeExecutionPlan",
            "findTool",
            "flushCurrentGroup"
          ],
          "description": "Tool Execution Controller",
          "lineNumber": 13
        }
      ],
      "interfaces": [
        "ToolExecutionGroup"
      ],
      "types": [],
      "constants": [
        "groups",
        "tool",
        "tool",
        "tool",
        "groups",
        "concurrentCount",
        "sequentialCount",
        "recommendations"
      ],
      "lineCount": 164,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\unaryLogging.ts",
      "relativePath": "src/utils/unaryLogging.ts",
      "name": "unaryLogging.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "logUnaryEvent",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/permissions/hooks.ts",
        "src/components/permissions/utils.ts",
        "src/hooks/usePermissionRequestLogging.ts"
      ],
      "comments": {},
      "functions": [
        {
          "name": "logUnaryEvent",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "event: LogEvent"
          ],
          "returnType": "void",
          "lineNumber": 17
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "CompletionType",
        "LogEvent"
      ],
      "constants": [],
      "lineCount": 20,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\user.ts",
      "relativePath": "src/utils/user.ts",
      "name": "user.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig",
            "getOrCreateUserID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError",
            "SESSION_ID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getGitEmail",
          "type": "named"
        },
        {
          "name": "getUser",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts",
        "src/utils/env.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/log.ts",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/context.ts"
      ],
      "comments": {},
      "functions": [],
      "classes": [],
      "interfaces": [],
      "types": [
        "SimpleUser"
      ],
      "constants": [
        "getGitEmail",
        "result",
        "getUser",
        "userID",
        "config",
        "email"
      ],
      "lineCount": 46,
      "complexity": "low"
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\validate.ts",
      "relativePath": "src/utils/validate.ts",
      "name": "validate.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "validateField",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [],
      "comments": {},
      "functions": [
        {
          "name": "validateField",
          "isExported": true,
          "isAsync": false,
          "parameters": [
            "field: keyof FormData",
            "value: string"
          ],
          "returnType": "ValidationError | null",
          "lineNumber": 17
        }
      ],
      "classes": [],
      "interfaces": [],
      "types": [
        "FormData",
        "ValidationError"
      ],
      "constants": [
        "trimmed",
        "emailRegex",
        "isPOBox",
        "hasNumber",
        "states",
        "stateCode",
        "normalized"
      ],
      "lineCount": 166,
      "complexity": "low"
    }
  ],
  "totalFiles": 274,
  "directories": [
    "src",
    "src/commands",
    "src/components",
    "src/components/CustomSelect",
    "src/components/binary-feedback",
    "src/components/messages",
    "src/components/messages/UserToolResultMessage",
    "src/components/permissions",
    "src/components/permissions/BashPermissionRequest",
    "src/components/permissions/FileEditPermissionRequest",
    "src/components/permissions/FileWritePermissionRequest",
    "src/components/permissions/FilesystemPermissionRequest",
    "src/constants",
    "src/context",
    "src/entrypoints",
    "src/hooks",
    "src/screens",
    "src/services",
    "src/services/adapters",
    "src/test",
    "src/tools",
    "src/tools/ArchitectTool",
    "src/tools/AskExpertModelTool",
    "src/tools/BashTool",
    "src/tools/FileEditTool",
    "src/tools/FileReadTool",
    "src/tools/FileWriteTool",
    "src/tools/GlobTool",
    "src/tools/GrepTool",
    "src/tools/MCPTool",
    "src/tools/MemoryReadTool",
    "src/tools/MemoryWriteTool",
    "src/tools/MultiEditTool",
    "src/tools/NotebookEditTool",
    "src/tools/NotebookReadTool",
    "src/tools/StickerRequestTool",
    "src/tools/TaskTool",
    "src/tools/ThinkTool",
    "src/tools/TodoWriteTool",
    "src/tools/URLFetcherTool",
    "src/tools/WebSearchTool",
    "src/tools/lsTool",
    "src/types",
    "src/utils",
    "src/utils/permissions"
  ],
  "entryPoints": [
    "src/commands/approvedTools.ts",
    "src/components/Cost.tsx",
    "src/components/CustomSelect/theme.ts",
    "src/components/MessageResponse.tsx",
    "src/components/StickerRequestForm.tsx",
    "src/constants/claude-asterisk-ascii-art.tsx",
    "src/constants/macros.ts",
    "src/constants/models.ts",
    "src/constants/oauth.ts",
    "src/constants/product.ts",
    "src/constants/releaseNotes.ts",
    "src/history.ts",
    "src/hooks/useDoublePress.ts",
    "src/hooks/useInterval.ts",
    "src/hooks/useLogStartupTime.ts",
    "src/hooks/useTerminalSize.ts",
    "src/index.ts",
    "src/services/browserMocks.ts",
    "src/services/responseStateManager.ts",
    "src/services/sentry.ts",
    "src/Tool.ts",
    "src/tools/ArchitectTool/prompt.ts",
    "src/tools/FileWriteTool/prompt.ts",
    "src/tools/GlobTool/prompt.ts",
    "src/tools/GrepTool/prompt.ts",
    "src/tools/lsTool/prompt.ts",
    "src/tools/MCPTool/prompt.ts",
    "src/tools/MemoryReadTool/prompt.ts",
    "src/tools/MemoryWriteTool/prompt.ts",
    "src/tools/NotebookEditTool/prompt.ts",
    "src/tools/NotebookReadTool/prompt.ts",
    "src/tools/StickerRequestTool/prompt.ts",
    "src/tools/TaskTool/constants.ts",
    "src/tools/ThinkTool/prompt.ts",
    "src/tools/TodoWriteTool/prompt.ts",
    "src/tools/URLFetcherTool/cache.ts",
    "src/tools/URLFetcherTool/htmlToMarkdown.ts",
    "src/tools/URLFetcherTool/prompt.ts",
    "src/tools/WebSearchTool/prompt.ts",
    "src/tools/WebSearchTool/searchProviders.ts",
    "src/types/common.d.ts",
    "src/types/conversation.ts",
    "src/types/logs.ts",
    "src/types/modelCapabilities.ts",
    "src/types/notebook.ts",
    "src/types/PermissionMode.ts",
    "src/types/RequestContext.ts",
    "src/utils/advancedFuzzyMatcher.ts",
    "src/utils/agentStorage.ts",
    "src/utils/array.ts",
    "src/utils/commonUnixCommands.ts",
    "src/utils/Cursor.ts",
    "src/utils/diff.ts",
    "src/utils/errors.ts",
    "src/utils/expertChatStorage.ts",
    "src/utils/format.tsx",
    "src/utils/generators.ts",
    "src/utils/globalLogger.ts",
    "src/utils/imagePaste.ts",
    "src/utils/responseState.ts",
    "src/utils/secureFile.ts",
    "src/utils/sessionState.ts",
    "src/utils/unaryLogging.ts",
    "src/utils/validate.ts",
    "src/components/SentryErrorBoundary.ts",
    "src/entrypoints/cli.tsx",
    "src/entrypoints/mcp.ts"
  ],
  "coreModules": [
    "src/utils/theme.ts",
    "src/Tool.ts",
    "src/utils/log.ts",
    "src/utils/state.ts",
    "src/constants/product.ts",
    "src/commands.ts",
    "src/query.ts",
    "src/utils/model.ts",
    "src/utils/config.ts",
    "src/utils/env.ts",
    "src/utils/messages.tsx",
    "src/components/FallbackToolUseRejectedMessage.tsx",
    "src/services/claude.ts",
    "src/components/CustomSelect/select.tsx",
    "src/hooks/useExitOnCtrlCD.ts",
    "src/tools/BashTool/BashTool.tsx",
    "src/constants/macros.ts",
    "src/hooks/useTerminalSize.ts",
    "src/services/systemReminder.ts",
    "src/utils/permissions/filesystem.ts",
    "src/services/fileFreshness.ts",
    "src/utils/terminal.ts",
    "src/context.ts",
    "src/tools/NotebookEditTool/NotebookEditTool.tsx",
    "src/utils/execFileNoThrow.ts",
    "src/permissions.ts",
    "src/services/mcpClient.ts",
    "src/tools/FileWriteTool/FileWriteTool.tsx",
    "src/utils/debugLogger.ts",
    "src/utils/file.ts",
    "src/components/StructuredDiff.tsx",
    "src/messages.ts",
    "src/tools/FileEditTool/FileEditTool.tsx",
    "src/tools/FileReadTool/FileReadTool.tsx",
    "src/tools/GlobTool/GlobTool.tsx",
    "src/tools/lsTool/lsTool.tsx",
    "src/utils/agentLoader.ts",
    "src/utils/unaryLogging.ts",
    "src/components/Cost.tsx",
    "src/tools/GrepTool/GrepTool.tsx",
    "src/types/modelCapabilities.ts",
    "src/utils/array.ts",
    "src/utils/errors.ts",
    "src/components/HighlightedCode.tsx",
    "src/components/permissions/PermissionRequest.tsx",
    "src/constants/prompts.ts",
    "src/utils/agentStorage.ts",
    "src/utils/commands.ts",
    "src/utils/diff.ts",
    "src/utils/generators.ts",
    "src/utils/git.ts",
    "src/utils/json.ts",
    "src/commands/terminalSetup.ts"
  ],
  "utilityModules": [
    "src/constants/figures.ts",
    "src/constants/macros.ts",
    "src/constants/modelCapabilities.ts",
    "src/constants/models.ts",
    "src/constants/product.ts",
    "src/constants/prompts.ts",
    "src/constants/releaseNotes.ts",
    "src/utils/agentLoader.ts",
    "src/utils/agentStorage.ts",
    "src/utils/array.ts",
    "src/utils/auth.ts",
    "src/utils/browser.ts",
    "src/utils/commands.ts",
    "src/utils/config.ts",
    "src/utils/conversationRecovery.ts",
    "src/utils/debugLogger.ts",
    "src/utils/diff.ts",
    "src/utils/env.ts",
    "src/utils/errors.ts",
    "src/utils/exampleCommands.ts",
    "src/utils/execFileNoThrow.ts",
    "src/utils/file.ts",
    "src/utils/format.tsx",
    "src/utils/generators.ts",
    "src/utils/git.ts",
    "src/utils/http.ts",
    "src/utils/json.ts",
    "src/utils/log.ts",
    "src/utils/markdown.ts",
    "src/utils/messages.tsx",
    "src/utils/model.ts",
    "src/utils/permissions/filesystem.ts",
    "src/utils/PersistentShell.ts",
    "src/utils/ripgrep.ts",
    "src/utils/sessionState.ts",
    "src/utils/state.ts",
    "src/utils/style.ts",
    "src/utils/terminal.ts",
    "src/utils/theme.ts",
    "src/utils/thinking.ts",
    "src/utils/todoStorage.ts",
    "src/utils/tokens.ts",
    "src/utils/unaryLogging.ts"
  ],
  "leafModules": [
    "src/components/messages/TaskProgressMessage.tsx",
    "src/test/testAdapters.ts",
    "src/tools/StickerRequestTool/StickerRequestTool.tsx"
  ],
  "readingOrder": [
    "src/index.ts",
    "src/services/sentry.ts",
    "src/constants/product.ts",
    "src/history.ts",
    "src/types/logs.ts",
    "src/constants/macros.ts",
    "src/utils/log.ts",
    "src/utils/PersistentShell.ts",
    "src/utils/state.ts",
    "src/utils/style.ts",
    "src/utils/execFileNoThrow.ts",
    "src/utils/env.ts",
    "src/utils/json.ts",
    "src/utils/errors.ts",
    "src/types/conversation.ts",
    "src/utils/debugLogger.ts",
    "src/utils/sessionState.ts",
    "src/utils/model.ts",
    "src/utils/config.ts",
    "src/utils/theme.ts",
    "src/components/FallbackToolUseRejectedMessage.tsx",
    "src/Tool.ts",
    "src/tools/lsTool/prompt.ts",
    "src/utils/permissions/filesystem.ts",
    "src/tools/lsTool/lsTool.tsx",
    "src/utils/git.ts",
    "src/utils/ripgrep.ts",
    "src/utils/generators.ts",
    "src/utils/user.ts",
    "src/context.ts",
    "src/utils/format.tsx",
    "src/cost-tracker.ts",
    "src/constants/models.ts",
    "src/utils/http.ts",
    "src/components/messages/UserBashInputMessage.tsx",
    "src/components/Spinner.tsx",
    "src/services/customCommands.ts",
    "src/utils/agentStorage.ts",
    "src/utils/todoStorage.ts",
    "src/services/systemReminder.ts",
    "src/utils/agentLoader.ts",
    "src/services/mentionProcessor.ts",
    "src/utils/messages.tsx",
    "src/utils/tokens.ts",
    "src/services/vcr.ts",
    "src/utils/messageContextManager.ts",
    "src/types/modelCapabilities.ts",
    "src/services/adapters/base.ts",
    "src/services/adapters/responsesAPI.ts",
    "src/services/adapters/chatCompletions.ts",
    "src/constants/modelCapabilities.ts",
    "src/services/modelAdapterFactory.ts",
    "src/services/responseStateManager.ts",
    "src/constants/prompts.ts",
    "src/services/openai.ts",
    "src/tools/ThinkTool/prompt.ts",
    "src/components/MessageResponse.tsx",
    "src/tools/ThinkTool/ThinkTool.tsx",
    "src/utils/thinking.ts",
    "src/services/claude.ts",
    "src/utils/commands.ts",
    "src/utils/file.ts",
    "src/tools/TaskTool/constants.ts",
    "src/components/HighlightedCode.tsx",
    "src/services/fileFreshness.ts",
    "src/types/notebook.ts",
    "src/tools/BashTool/utils.ts",
    "src/tools/NotebookReadTool/prompt.ts",
    "src/tools/NotebookReadTool/NotebookReadTool.tsx",
    "src/tools/FileReadTool/prompt.ts",
    "src/utils/secureFile.ts",
    "src/tools/FileReadTool/FileReadTool.tsx",
    "src/tools/GlobTool/prompt.ts",
    "src/tools/GrepTool/prompt.ts",
    "src/tools/BashTool/prompt.ts",
    "src/tools/BashTool/OutputLine.tsx",
    "src/tools/BashTool/BashToolResultMessage.tsx",
    "src/tools/BashTool/BashTool.tsx",
    "src/utils/array.ts",
    "src/components/StructuredDiff.tsx",
    "src/hooks/useTerminalSize.ts",
    "src/components/FileEditToolUpdatedMessage.tsx",
    "src/tools/NotebookEditTool/prompt.ts",
    "src/tools/NotebookEditTool/NotebookEditTool.tsx",
    "src/tools/FileEditTool/prompt.ts",
    "src/utils/diff.ts",
    "src/tools/FileEditTool/utils.ts",
    "src/tools/FileEditTool/FileEditTool.tsx",
    "src/tools/FileWriteTool/prompt.ts",
    "src/tools/FileWriteTool/FileWriteTool.tsx",
    "src/permissions.ts",
    "src/components/CustomSelect/theme.ts",
    "src/components/CustomSelect/select-option.tsx",
    "src/components/CustomSelect/option-map.ts",
    "src/components/CustomSelect/use-select-state.ts",
    "src/components/CustomSelect/use-select.ts",
    "src/components/CustomSelect/select.tsx",
    "src/utils/unaryLogging.ts",
    "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
    "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
    "src/hooks/usePermissionRequestLogging.ts",
    "src/components/permissions/hooks.ts",
    "src/components/permissions/PermissionRequestTitle.tsx",
    "src/components/permissions/utils.ts",
    "src/components/permissions/toolUseOptions.ts",
    "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
    "src/components/permissions/FallbackPermissionRequest.tsx",
    "src/services/notifier.ts",
    "src/hooks/useNotifyAfterTimeout.ts",
    "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
    "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
    "src/components/Cost.tsx",
    "src/tools/GrepTool/GrepTool.tsx",
    "src/tools/GlobTool/GlobTool.tsx",
    "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
    "src/components/permissions/PermissionRequest.tsx",
    "src/hooks/useCanUseTool.ts",
    "src/utils/toolExecutionController.ts",
    "src/utils/terminal.ts",
    "src/utils/fileRecoveryCore.ts",
    "src/utils/autoCompactCore.ts",
    "src/query.ts",
    "src/messages.ts",
    "src/hooks/useDoublePress.ts",
    "src/utils/Cursor.ts",
    "src/hooks/useTextInput.ts",
    "src/components/TextInput.tsx",
    "src/utils/browser.ts",
    "src/hooks/useExitOnCtrlCD.ts",
    "src/components/Bug.tsx",
    "src/commands/bug.tsx",
    "src/commands/clear.ts",
    "src/commands/compact.ts",
    "src/components/Config.tsx",
    "src/commands/config.tsx",
    "src/commands/cost.ts",
    "src/commands/ctx_viz.ts",
    "src/components/PressEnterToContinue.tsx",
    "src/screens/Doctor.tsx",
    "src/commands/doctor.ts",
    "src/components/Help.tsx",
    "src/commands/help.tsx",
    "src/commands/terminalSetup.ts",
    "src/constants/releaseNotes.ts",
    "src/ProjectOnboarding.tsx",
    "src/commands/init.ts",
    "src/commands/listen.ts",
    "src/constants/oauth.ts",
    "src/services/oauth.ts",
    "src/components/AsciiLogo.tsx",
    "src/tools/MCPTool/prompt.ts",
    "src/tools/MCPTool/MCPTool.tsx",
    "src/services/mcpClient.ts",
    "src/components/Logo.tsx",
    "src/services/gpt5ConnectionTest.ts",
    "src/components/ModelSelector.tsx",
    "src/components/Onboarding.tsx",
    "src/components/ConsoleOAuthFlow.tsx",
    "src/utils/auth.ts",
    "src/commands/login.tsx",
    "src/commands/logout.tsx",
    "src/commands/mcp.ts",
    "src/components/ModelListManager.tsx",
    "src/components/ModelConfig.tsx",
    "src/commands/model.tsx",
    "src/components/ModelStatusDisplay.tsx",
    "src/commands/modelstatus.tsx",
    "src/commands/onboarding.tsx",
    "src/commands/pr_comments.ts",
    "src/commands/refreshCommands.ts",
    "src/commands/release-notes.ts",
    "src/commands/review.ts",
    "src/components/Link.tsx",
    "src/components/CostThresholdDialog.tsx",
    "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
    "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
    "src/components/messages/UserToolResultMessage/utils.tsx",
    "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
    "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx",
    "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
    "src/hooks/useInterval.ts",
    "src/constants/figures.ts",
    "src/components/ToolUseLoader.tsx",
    "src/utils/markdown.ts",
    "src/components/messages/AssistantThinkingMessage.tsx",
    "src/components/messages/TaskToolMessage.tsx",
    "src/components/messages/AssistantToolUseMessage.tsx",
    "src/components/messages/AssistantBashOutputMessage.tsx",
    "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
    "src/components/messages/AssistantTextMessage.tsx",
    "src/components/messages/UserKodingInputMessage.tsx",
    "src/components/messages/UserCommandMessage.tsx",
    "src/components/messages/UserPromptMessage.tsx",
    "src/components/messages/UserTextMessage.tsx",
    "src/components/messages/AssistantRedactedThinkingMessage.tsx",
    "src/components/Message.tsx",
    "src/components/MessageSelector.tsx",
    "src/utils/exampleCommands.ts",
    "src/hooks/useArrowKeyHistory.ts",
    "src/utils/advancedFuzzyMatcher.ts",
    "src/utils/fuzzyMatcher.ts",
    "src/utils/commonUnixCommands.ts",
    "src/hooks/useUnifiedCompletion.ts",
    "src/components/SentryErrorBoundary.ts",
    "src/components/TokenWarning.tsx",
    "src/types/PermissionMode.ts",
    "src/context/PermissionContext.tsx",
    "src/components/PromptInput.tsx",
    "src/hooks/useLogStartupTime.ts",
    "src/hooks/useApiKeyVerification.ts",
    "src/hooks/useCancelRequest.ts",
    "src/hooks/useLogMessages.ts",
    "src/components/ModeIndicator.tsx",
    "src/components/binary-feedback/BinaryFeedbackOption.tsx",
    "src/components/binary-feedback/utils.ts",
    "src/components/binary-feedback/BinaryFeedbackView.tsx",
    "src/components/binary-feedback/BinaryFeedback.tsx",
    "src/screens/REPL.tsx",
    "src/utils/conversationRecovery.ts",
    "src/components/LogSelector.tsx",
    "src/screens/ResumeConversation.tsx",
    "src/commands/resume.tsx",
    "src/commands/agents.tsx",
    "src/commands.ts",
    "src/utils/ask.tsx",
    "src/tools/TaskTool/prompt.ts",
    "src/tools/TaskTool/TaskTool.tsx",
    "src/tools/ArchitectTool/prompt.ts",
    "src/tools/ArchitectTool/ArchitectTool.tsx",
    "src/utils/expertChatStorage.ts",
    "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
    "src/tools/MultiEditTool/prompt.ts",
    "src/tools/MultiEditTool/MultiEditTool.tsx",
    "src/tools/MemoryReadTool/prompt.ts",
    "src/tools/MemoryReadTool/MemoryReadTool.tsx",
    "src/tools/MemoryWriteTool/prompt.ts",
    "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
    "src/components/TodoItem.tsx",
    "src/tools/TodoWriteTool/prompt.ts",
    "src/tools/TodoWriteTool/TodoWriteTool.tsx",
    "src/tools/WebSearchTool/prompt.ts",
    "src/tools/WebSearchTool/searchProviders.ts",
    "src/tools/WebSearchTool/WebSearchTool.tsx",
    "src/tools/URLFetcherTool/prompt.ts",
    "src/tools/URLFetcherTool/htmlToMarkdown.ts",
    "src/tools/URLFetcherTool/cache.ts",
    "src/tools/URLFetcherTool/URLFetcherTool.tsx",
    "src/tools.ts",
    "src/components/ApproveApiKey.tsx",
    "src/components/TrustDialog.tsx",
    "src/screens/LogList.tsx",
    "src/entrypoints/mcp.ts",
    "src/utils/cleanup.ts",
    "src/commands/approvedTools.ts",
    "src/components/MCPServerDialogCopy.tsx",
    "src/components/MCPServerMultiselectDialog.tsx",
    "src/components/MCPServerApprovalDialog.tsx",
    "src/services/mcpServerApproval.tsx",
    "src/utils/autoUpdater.ts",
    "src/components/InvalidConfigDialog.tsx",
    "src/entrypoints/cli.tsx",
    "src/components/StickerRequestForm.tsx",
    "src/constants/claude-asterisk-ascii-art.tsx",
    "src/services/browserMocks.ts",
    "src/tools/StickerRequestTool/prompt.ts",
    "src/types/common.d.ts",
    "src/types/RequestContext.ts",
    "src/utils/globalLogger.ts",
    "src/utils/imagePaste.ts",
    "src/utils/responseState.ts",
    "src/utils/validate.ts",
    "src/components/messages/TaskProgressMessage.tsx",
    "src/tools/StickerRequestTool/StickerRequestTool.tsx",
    "src/test/testAdapters.ts"
  ],
  "dependencyGraph": {
    "src/commands/agents.tsx": [
      "src/utils/agentLoader.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/services/mcpClient.ts",
      "src/utils/model.ts",
      "src/services/claude.ts"
    ],
    "src/commands/approvedTools.ts": [],
    "src/commands/bug.tsx": [
      "src/commands.ts",
      "src/components/Bug.tsx",
      "src/constants/product.ts"
    ],
    "src/commands/clear.ts": [
      "src/commands.ts",
      "src/messages.ts",
      "src/context.ts",
      "src/utils/style.ts",
      "src/utils/terminal.ts",
      "src/utils/state.ts",
      "src/query.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/commands/compact.ts": [
      "src/commands.ts",
      "src/context.ts",
      "src/messages.ts",
      "src/services/claude.ts",
      "src/utils/style.ts",
      "src/utils/terminal.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/commands/config.tsx": [
      "src/commands.ts",
      "src/components/Config.tsx"
    ],
    "src/commands/cost.ts": [
      "src/commands.ts",
      "src/cost-tracker.ts"
    ],
    "src/commands/ctx_viz.ts": [
      "src/commands.ts",
      "src/Tool.ts",
      "src/constants/prompts.ts",
      "src/context.ts",
      "src/messages.ts",
      "src/constants/product.ts"
    ],
    "src/commands/doctor.ts": [
      "src/commands.ts",
      "src/screens/Doctor.tsx",
      "src/constants/product.ts"
    ],
    "src/commands/help.tsx": [
      "src/commands.ts",
      "src/components/Help.tsx"
    ],
    "src/commands/init.ts": [
      "src/commands.ts",
      "src/ProjectOnboarding.tsx",
      "src/constants/product.ts"
    ],
    "src/commands/listen.ts": [
      "src/commands.ts",
      "src/utils/log.ts",
      "src/utils/execFileNoThrow.ts"
    ],
    "src/commands/login.tsx": [
      "src/commands.ts",
      "src/components/ConsoleOAuthFlow.tsx",
      "src/utils/terminal.ts",
      "src/utils/auth.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/commands/clear.ts"
    ],
    "src/commands/logout.tsx": [
      "src/commands.ts",
      "src/utils/config.ts",
      "src/utils/terminal.ts"
    ],
    "src/commands/mcp.ts": [
      "src/commands.ts",
      "src/services/mcpClient.ts",
      "src/constants/product.ts",
      "src/utils/theme.ts"
    ],
    "src/commands/model.tsx": [
      "src/components/ModelConfig.tsx",
      "src/utils/config.ts",
      "src/messages.ts",
      "src/utils/model.ts"
    ],
    "src/commands/modelstatus.tsx": [
      "src/commands.ts",
      "src/components/ModelStatusDisplay.tsx"
    ],
    "src/commands/onboarding.tsx": [
      "src/commands.ts",
      "src/components/Onboarding.tsx",
      "src/utils/terminal.ts",
      "src/utils/config.ts",
      "src/commands/clear.ts"
    ],
    "src/commands/pr_comments.ts": [
      "src/commands.ts"
    ],
    "src/commands/refreshCommands.ts": [
      "src/commands.ts",
      "src/services/customCommands.ts"
    ],
    "src/commands/release-notes.ts": [
      "src/commands.ts",
      "src/constants/releaseNotes.ts"
    ],
    "src/commands/resume.tsx": [
      "src/commands.ts",
      "src/screens/ResumeConversation.tsx",
      "src/utils/log.ts"
    ],
    "src/commands/review.ts": [
      "src/commands.ts",
      "src/tools/BashTool/BashTool.tsx"
    ],
    "src/commands/terminalSetup.ts": [
      "src/commands.ts",
      "src/utils/execFileNoThrow.ts",
      "src/utils/theme.ts",
      "src/utils/env.ts",
      "src/utils/config.ts",
      "src/ProjectOnboarding.tsx",
      "src/utils/json.ts",
      "src/utils/log.ts"
    ],
    "src/commands.ts": [
      "src/commands/bug.tsx",
      "src/commands/clear.ts",
      "src/commands/compact.ts",
      "src/commands/config.tsx",
      "src/commands/cost.ts",
      "src/commands/ctx_viz.ts",
      "src/commands/doctor.ts",
      "src/commands/help.tsx",
      "src/commands/init.ts",
      "src/commands/listen.ts",
      "src/commands/login.tsx",
      "src/commands/logout.tsx",
      "src/commands/mcp.ts",
      "src/commands/model.tsx",
      "src/commands/modelstatus.tsx",
      "src/commands/onboarding.tsx",
      "src/commands/pr_comments.ts",
      "src/commands/refreshCommands.ts",
      "src/commands/release-notes.ts",
      "src/commands/review.ts",
      "src/commands/terminalSetup.ts",
      "src/Tool.ts",
      "src/commands/resume.tsx",
      "src/commands/agents.tsx",
      "src/services/mcpClient.ts",
      "src/services/customCommands.ts",
      "src/query.ts",
      "src/utils/auth.ts"
    ],
    "src/components/ApproveApiKey.tsx": [
      "src/utils/config.ts",
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/AsciiLogo.tsx": [
      "src/utils/theme.ts",
      "src/constants/product.ts"
    ],
    "src/components/binary-feedback/BinaryFeedback.tsx": [
      "src/hooks/useNotifyAfterTimeout.ts",
      "src/query.ts",
      "src/Tool.ts",
      "src/utils/messages.tsx",
      "src/components/binary-feedback/BinaryFeedbackView.tsx",
      "src/constants/product.ts"
    ],
    "src/components/binary-feedback/BinaryFeedbackOption.tsx": [
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
      "src/components/Message.tsx",
      "src/Tool.ts",
      "src/hooks/useTerminalSize.ts",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
      "src/query.ts"
    ],
    "src/components/binary-feedback/BinaryFeedbackView.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/Tool.ts",
      "src/utils/messages.tsx",
      "src/components/binary-feedback/BinaryFeedbackOption.tsx",
      "src/query.ts",
      "src/components/binary-feedback/utils.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/constants/product.ts"
    ],
    "src/components/binary-feedback/utils.ts": [
      "src/query.ts",
      "src/services/claude.ts",
      "src/utils/git.ts"
    ],
    "src/components/Bug.tsx": [
      "src/utils/theme.ts",
      "src/messages.ts",
      "src/query.ts",
      "src/components/TextInput.tsx",
      "src/utils/log.ts",
      "src/utils/env.ts",
      "src/utils/git.ts",
      "src/hooks/useTerminalSize.ts",
      "src/utils/config.ts",
      "src/utils/http.ts",
      "src/constants/product.ts",
      "src/services/claude.ts",
      "src/utils/browser.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/constants/macros.ts"
    ],
    "src/components/Config.tsx": [
      "src/utils/theme.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/utils/model.ts"
    ],
    "src/components/ConsoleOAuthFlow.tsx": [
      "src/components/TextInput.tsx",
      "src/services/oauth.ts",
      "src/utils/theme.ts",
      "src/components/AsciiLogo.tsx",
      "src/hooks/useTerminalSize.ts",
      "src/utils/log.ts",
      "src/utils/terminal.ts",
      "src/components/Spinner.tsx",
      "src/components/Onboarding.tsx",
      "src/constants/product.ts",
      "src/services/notifier.ts"
    ],
    "src/components/Cost.tsx": [],
    "src/components/CostThresholdDialog.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/utils/theme.ts",
      "src/components/Link.tsx"
    ],
    "src/components/CustomSelect/option-map.ts": [
      "src/components/CustomSelect/select.tsx"
    ],
    "src/components/CustomSelect/select-option.tsx": [
      "src/components/CustomSelect/theme.ts",
      "src/utils/theme.ts"
    ],
    "src/components/CustomSelect/select.tsx": [
      "src/components/CustomSelect/select-option.tsx",
      "src/components/CustomSelect/theme.ts",
      "src/components/CustomSelect/use-select-state.ts",
      "src/components/CustomSelect/use-select.ts",
      "src/utils/theme.ts"
    ],
    "src/components/CustomSelect/theme.ts": [],
    "src/components/CustomSelect/use-select-state.ts": [
      "src/components/CustomSelect/option-map.ts",
      "src/components/CustomSelect/select.tsx"
    ],
    "src/components/CustomSelect/use-select.ts": [
      "src/components/CustomSelect/use-select-state.ts"
    ],
    "src/components/FallbackToolUseRejectedMessage.tsx": [
      "src/utils/theme.ts",
      "src/constants/product.ts"
    ],
    "src/components/FileEditToolUpdatedMessage.tsx": [
      "src/utils/array.ts",
      "src/components/StructuredDiff.tsx",
      "src/utils/theme.ts",
      "src/utils/state.ts",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/Help.tsx": [
      "src/commands.ts",
      "src/constants/product.ts",
      "src/services/customCommands.ts",
      "src/utils/theme.ts",
      "src/components/PressEnterToContinue.tsx",
      "src/constants/macros.ts"
    ],
    "src/components/HighlightedCode.tsx": [
      "src/utils/log.ts"
    ],
    "src/components/InvalidConfigDialog.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/utils/errors.ts",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/Link.tsx": [
      "src/utils/env.ts"
    ],
    "src/components/Logo.tsx": [
      "src/utils/theme.ts",
      "src/constants/product.ts",
      "src/utils/config.ts",
      "src/utils/state.ts",
      "src/components/AsciiLogo.tsx",
      "src/services/mcpClient.ts",
      "src/utils/model.ts",
      "src/constants/macros.ts"
    ],
    "src/components/LogSelector.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/types/logs.ts",
      "src/utils/theme.ts",
      "src/hooks/useTerminalSize.ts",
      "src/utils/log.ts"
    ],
    "src/components/MCPServerApprovalDialog.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/components/MCPServerDialogCopy.tsx",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/MCPServerDialogCopy.tsx": [
      "src/constants/product.ts"
    ],
    "src/components/MCPServerMultiselectDialog.tsx": [
      "src/utils/theme.ts",
      "src/components/MCPServerDialogCopy.tsx",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/Message.tsx": [
      "src/query.ts",
      "src/Tool.ts",
      "src/utils/log.ts",
      "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
      "src/components/messages/AssistantToolUseMessage.tsx",
      "src/components/messages/AssistantTextMessage.tsx",
      "src/components/messages/UserTextMessage.tsx",
      "src/utils/messages.tsx",
      "src/components/messages/AssistantThinkingMessage.tsx",
      "src/components/messages/AssistantRedactedThinkingMessage.tsx",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/MessageResponse.tsx": [],
    "src/components/messages/AssistantBashOutputMessage.tsx": [
      "src/tools/BashTool/BashToolResultMessage.tsx",
      "src/utils/messages.tsx"
    ],
    "src/components/messages/AssistantLocalCommandOutputMessage.tsx": [
      "src/utils/messages.tsx",
      "src/utils/theme.ts"
    ],
    "src/components/messages/AssistantRedactedThinkingMessage.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/messages/AssistantTextMessage.tsx": [
      "src/components/messages/AssistantBashOutputMessage.tsx",
      "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
      "src/utils/theme.ts",
      "src/components/Cost.tsx",
      "src/constants/figures.ts",
      "src/utils/markdown.ts",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/messages/AssistantThinkingMessage.tsx": [
      "src/utils/theme.ts",
      "src/utils/markdown.ts"
    ],
    "src/components/messages/AssistantToolUseMessage.tsx": [
      "src/utils/log.ts",
      "src/Tool.ts",
      "src/components/Cost.tsx",
      "src/components/ToolUseLoader.tsx",
      "src/utils/theme.ts",
      "src/constants/figures.ts",
      "src/tools/ThinkTool/ThinkTool.tsx",
      "src/components/messages/AssistantThinkingMessage.tsx",
      "src/components/messages/TaskToolMessage.tsx"
    ],
    "src/components/messages/TaskProgressMessage.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/messages/TaskToolMessage.tsx": [
      "src/utils/agentLoader.ts",
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserBashInputMessage.tsx": [
      "src/utils/messages.tsx",
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserCommandMessage.tsx": [
      "src/utils/theme.ts",
      "src/utils/messages.tsx"
    ],
    "src/components/messages/UserKodingInputMessage.tsx": [
      "src/utils/messages.tsx",
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserPromptMessage.tsx": [
      "src/utils/theme.ts",
      "src/utils/log.ts",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/messages/UserTextMessage.tsx": [
      "src/components/messages/UserBashInputMessage.tsx",
      "src/components/messages/UserKodingInputMessage.tsx",
      "src/components/messages/UserCommandMessage.tsx",
      "src/components/messages/UserPromptMessage.tsx",
      "src/services/claude.ts"
    ],
    "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx": [
      "src/Tool.ts",
      "src/query.ts",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/messages/UserToolResultMessage/utils.tsx",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx": [
      "src/Tool.ts",
      "src/query.ts",
      "src/utils/messages.tsx",
      "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
      "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
      "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
      "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx"
    ],
    "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx": [
      "src/Tool.ts",
      "src/query.ts",
      "src/components/messages/UserToolResultMessage/utils.tsx"
    ],
    "src/components/messages/UserToolResultMessage/utils.tsx": [
      "src/query.ts",
      "src/Tool.ts",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx"
    ],
    "src/components/MessageSelector.tsx": [
      "src/utils/theme.ts",
      "src/components/Message.tsx",
      "src/Tool.ts",
      "src/query.ts",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/ModeIndicator.tsx": [
      "src/context/PermissionContext.tsx",
      "src/utils/theme.ts"
    ],
    "src/components/ModelConfig.tsx": [
      "src/utils/theme.ts",
      "src/utils/model.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/components/ModelSelector.tsx",
      "src/components/ModelListManager.tsx"
    ],
    "src/components/ModelListManager.tsx": [
      "src/utils/theme.ts",
      "src/utils/model.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/components/ModelSelector.tsx"
    ],
    "src/components/ModelSelector.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/utils/model.ts",
      "src/constants/product.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/constants/models.ts",
      "src/components/TextInput.tsx",
      "src/services/claude.ts",
      "src/services/openai.ts",
      "src/services/gpt5ConnectionTest.ts"
    ],
    "src/components/ModelStatusDisplay.tsx": [
      "src/utils/model.ts",
      "src/utils/config.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/utils/theme.ts"
    ],
    "src/components/Onboarding.tsx": [
      "src/constants/product.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/components/Logo.tsx",
      "src/components/CustomSelect/select.tsx",
      "src/components/StructuredDiff.tsx",
      "src/utils/theme.ts",
      "src/utils/terminal.ts",
      "src/components/PressEnterToContinue.tsx",
      "src/components/ModelSelector.tsx"
    ],
    "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx": [
      "src/hooks/usePermissionRequestLogging.ts",
      "src/permissions.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/utils/theme.ts",
      "src/components/permissions/hooks.ts",
      "src/components/permissions/PermissionRequestTitle.tsx",
      "src/components/permissions/utils.ts",
      "src/components/CustomSelect/select.tsx",
      "src/components/permissions/toolUseOptions.ts"
    ],
    "src/components/permissions/FallbackPermissionRequest.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/utils/theme.ts",
      "src/utils/unaryLogging.ts",
      "src/utils/env.ts",
      "src/utils/state.ts",
      "src/permissions.ts"
    ],
    "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/permissions.ts",
      "src/utils/env.ts",
      "src/utils/theme.ts",
      "src/utils/unaryLogging.ts",
      "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
      "src/hooks/useTerminalSize.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx": [
      "src/components/StructuredDiff.tsx",
      "src/utils/theme.ts",
      "src/utils/array.ts",
      "src/utils/state.ts",
      "src/utils/diff.ts"
    ],
    "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/utils/theme.ts",
      "src/utils/unaryLogging.ts",
      "src/utils/env.ts",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/NotebookReadTool/NotebookReadTool.tsx",
      "src/components/permissions/FallbackPermissionRequest.tsx",
      "src/utils/state.ts"
    ],
    "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/utils/theme.ts",
      "src/utils/unaryLogging.ts",
      "src/utils/env.ts",
      "src/permissions.ts",
      "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx": [
      "src/components/StructuredDiff.tsx",
      "src/utils/theme.ts",
      "src/utils/array.ts",
      "src/utils/state.ts",
      "src/utils/file.ts",
      "src/components/HighlightedCode.tsx",
      "src/utils/diff.ts"
    ],
    "src/components/permissions/hooks.ts": [
      "src/utils/unaryLogging.ts",
      "src/components/permissions/PermissionRequest.tsx",
      "src/utils/env.ts"
    ],
    "src/components/permissions/PermissionRequest.tsx": [
      "src/Tool.ts",
      "src/query.ts",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
      "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
      "src/components/permissions/FallbackPermissionRequest.tsx",
      "src/hooks/useNotifyAfterTimeout.ts",
      "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
      "src/utils/commands.ts",
      "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/NotebookReadTool/NotebookReadTool.tsx",
      "src/constants/product.ts"
    ],
    "src/components/permissions/PermissionRequestTitle.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/permissions/toolUseOptions.ts": [
      "src/utils/commands.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx"
    ],
    "src/components/permissions/utils.ts": [
      "src/utils/env.ts",
      "src/utils/unaryLogging.ts",
      "src/components/permissions/PermissionRequest.tsx"
    ],
    "src/components/PressEnterToContinue.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/PromptInput.tsx": [
      "src/utils/exampleCommands.ts",
      "src/query.ts",
      "src/utils/messages.tsx",
      "src/hooks/useArrowKeyHistory.ts",
      "src/hooks/useUnifiedCompletion.ts",
      "src/history.ts",
      "src/components/TextInput.tsx",
      "src/utils/tokens.ts",
      "src/components/SentryErrorBoundary.ts",
      "src/commands.ts",
      "src/Tool.ts",
      "src/components/TokenWarning.tsx",
      "src/hooks/useTerminalSize.ts",
      "src/utils/theme.ts",
      "src/utils/model.ts",
      "src/utils/config.ts",
      "src/utils/terminal.ts",
      "src/commands/terminalSetup.ts",
      "src/context/PermissionContext.tsx",
      "src/services/claude.ts"
    ],
    "src/components/SentryErrorBoundary.ts": [
      "src/services/sentry.ts"
    ],
    "src/components/Spinner.tsx": [
      "src/utils/theme.ts",
      "src/utils/sessionState.ts"
    ],
    "src/components/StickerRequestForm.tsx": [],
    "src/components/StructuredDiff.tsx": [
      "src/utils/theme.ts",
      "src/utils/format.tsx"
    ],
    "src/components/TextInput.tsx": [
      "src/hooks/useTextInput.ts",
      "src/utils/theme.ts"
    ],
    "src/components/TodoItem.tsx": [
      "src/utils/todoStorage.ts"
    ],
    "src/components/TokenWarning.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/ToolUseLoader.tsx": [
      "src/hooks/useInterval.ts",
      "src/utils/theme.ts",
      "src/constants/figures.ts"
    ],
    "src/components/TrustDialog.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/constants/product.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/utils/state.ts",
      "src/components/Link.tsx"
    ],
    "src/constants/claude-asterisk-ascii-art.tsx": [],
    "src/constants/figures.ts": [
      "src/utils/env.ts"
    ],
    "src/constants/macros.ts": [],
    "src/constants/modelCapabilities.ts": [
      "src/types/modelCapabilities.ts"
    ],
    "src/constants/models.ts": [],
    "src/constants/oauth.ts": [],
    "src/constants/product.ts": [],
    "src/constants/prompts.ts": [
      "src/utils/env.ts",
      "src/utils/git.ts",
      "src/utils/state.ts",
      "src/constants/product.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/constants/macros.ts"
    ],
    "src/constants/releaseNotes.ts": [],
    "src/context/PermissionContext.tsx": [
      "src/types/PermissionMode.ts"
    ],
    "src/context.ts": [
      "src/utils/log.ts",
      "src/utils/style.ts",
      "src/utils/state.ts",
      "src/tools/lsTool/lsTool.tsx",
      "src/utils/git.ts",
      "src/utils/ripgrep.ts",
      "src/utils/execFileNoThrow.ts",
      "src/utils/model.ts",
      "src/utils/generators.ts",
      "src/utils/user.ts",
      "src/constants/product.ts"
    ],
    "src/cost-tracker.ts": [
      "src/utils/format.tsx",
      "src/utils/log.ts"
    ],
    "src/entrypoints/cli.tsx": [
      "src/services/sentry.ts",
      "src/constants/product.ts",
      "src/history.ts",
      "src/context.ts",
      "src/utils/ask.tsx",
      "src/permissions.ts",
      "src/tools.ts",
      "src/utils/config.ts",
      "src/utils/log.ts",
      "src/utils/debugLogger.ts",
      "src/components/Onboarding.tsx",
      "src/screens/Doctor.tsx",
      "src/components/ApproveApiKey.tsx",
      "src/components/TrustDialog.tsx",
      "src/screens/LogList.tsx",
      "src/screens/ResumeConversation.tsx",
      "src/utils/model.ts",
      "src/entrypoints/mcp.ts",
      "src/utils/env.ts",
      "src/utils/state.ts",
      "src/commands.ts",
      "src/utils/conversationRecovery.ts",
      "src/utils/cleanup.ts",
      "src/commands/approvedTools.ts",
      "src/services/mcpClient.ts",
      "src/services/mcpServerApproval.tsx",
      "src/utils/exampleCommands.ts",
      "src/utils/autoUpdater.ts",
      "src/utils/PersistentShell.ts",
      "src/utils/terminal.ts",
      "src/components/InvalidConfigDialog.tsx",
      "src/utils/errors.ts",
      "src/utils/permissions/filesystem.ts",
      "src/constants/macros.ts",
      "src/utils/agentLoader.ts",
      "src/screens/REPL.tsx",
      "src/utils/theme.ts"
    ],
    "src/entrypoints/mcp.ts": [
      "src/tools/TaskTool/TaskTool.tsx",
      "src/permissions.ts",
      "src/utils/state.ts",
      "src/utils/model.ts",
      "src/utils/log.ts",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/Tool.ts",
      "src/commands.ts",
      "src/commands/review.ts",
      "src/utils/generators.ts",
      "src/constants/macros.ts"
    ],
    "src/history.ts": [],
    "src/hooks/useApiKeyVerification.ts": [
      "src/services/claude.ts",
      "src/utils/config.ts"
    ],
    "src/hooks/useArrowKeyHistory.ts": [
      "src/history.ts"
    ],
    "src/hooks/useCancelRequest.ts": [
      "src/components/permissions/PermissionRequest.tsx",
      "src/screens/REPL.tsx",
      "src/Tool.ts"
    ],
    "src/hooks/useCanUseTool.ts": [
      "src/permissions.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/utils/commands.ts",
      "src/utils/messages.tsx",
      "src/Tool.ts",
      "src/query.ts",
      "src/components/permissions/PermissionRequest.tsx",
      "src/utils/errors.ts",
      "src/utils/log.ts"
    ],
    "src/hooks/useDoublePress.ts": [],
    "src/hooks/useExitOnCtrlCD.ts": [
      "src/hooks/useDoublePress.ts"
    ],
    "src/hooks/useInterval.ts": [],
    "src/hooks/useLogMessages.ts": [
      "src/query.ts",
      "src/utils/log.ts"
    ],
    "src/hooks/useLogStartupTime.ts": [],
    "src/hooks/useNotifyAfterTimeout.ts": [
      "src/services/notifier.ts"
    ],
    "src/hooks/usePermissionRequestLogging.ts": [
      "src/utils/unaryLogging.ts",
      "src/components/permissions/PermissionRequest.tsx",
      "src/utils/env.ts"
    ],
    "src/hooks/useTerminalSize.ts": [],
    "src/hooks/useTextInput.ts": [
      "src/hooks/useDoublePress.ts",
      "src/utils/Cursor.ts"
    ],
    "src/hooks/useUnifiedCompletion.ts": [
      "src/utils/state.ts",
      "src/commands.ts",
      "src/utils/agentLoader.ts",
      "src/utils/model.ts",
      "src/utils/fuzzyMatcher.ts",
      "src/utils/commonUnixCommands.ts"
    ],
    "src/index.ts": [],
    "src/messages.ts": [
      "src/query.ts"
    ],
    "src/permissions.ts": [
      "src/hooks/useCanUseTool.ts",
      "src/Tool.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/utils/commands.ts",
      "src/utils/errors.ts",
      "src/utils/log.ts",
      "src/utils/permissions/filesystem.ts",
      "src/utils/state.ts",
      "src/constants/product.ts"
    ],
    "src/ProjectOnboarding.tsx": [
      "src/commands/terminalSetup.ts",
      "src/utils/theme.ts",
      "src/constants/releaseNotes.ts",
      "src/utils/file.ts",
      "src/constants/macros.ts",
      "src/constants/product.ts"
    ],
    "src/query.ts": [
      "src/Tool.ts",
      "src/hooks/useCanUseTool.ts",
      "src/services/systemReminder.ts",
      "src/utils/generators.ts",
      "src/utils/log.ts",
      "src/utils/debugLogger.ts",
      "src/utils/toolExecutionController.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/utils/state.ts",
      "src/utils/autoCompactCore.ts"
    ],
    "src/screens/Doctor.tsx": [
      "src/utils/theme.ts",
      "src/components/PressEnterToContinue.tsx"
    ],
    "src/screens/LogList.tsx": [
      "src/utils/log.ts",
      "src/components/LogSelector.tsx",
      "src/types/logs.ts"
    ],
    "src/screens/REPL.tsx": [
      "src/components/CostThresholdDialog.tsx",
      "src/commands.ts",
      "src/components/Logo.tsx",
      "src/components/Message.tsx",
      "src/components/MessageResponse.tsx",
      "src/components/MessageSelector.tsx",
      "src/components/PromptInput.tsx",
      "src/components/Spinner.tsx",
      "src/constants/prompts.ts",
      "src/context.ts",
      "src/cost-tracker.ts",
      "src/hooks/useLogStartupTime.ts",
      "src/history.ts",
      "src/hooks/useApiKeyVerification.ts",
      "src/hooks/useCancelRequest.ts",
      "src/hooks/useCanUseTool.ts",
      "src/hooks/useLogMessages.ts",
      "src/context/PermissionContext.tsx",
      "src/components/ModeIndicator.tsx",
      "src/messages.ts",
      "src/services/mcpClient.ts",
      "src/Tool.ts",
      "src/utils/config.ts",
      "src/constants/macros.ts",
      "src/utils/log.ts",
      "src/utils/model.ts",
      "src/utils/terminal.ts",
      "src/components/binary-feedback/BinaryFeedback.tsx",
      "src/utils/thinking.ts",
      "src/utils/state.ts",
      "src/commands/terminalSetup.ts",
      "src/utils/debugLogger.ts"
    ],
    "src/screens/ResumeConversation.tsx": [
      "src/screens/REPL.tsx",
      "src/utils/conversationRecovery.ts",
      "src/components/LogSelector.tsx",
      "src/types/logs.ts",
      "src/utils/log.ts",
      "src/Tool.ts",
      "src/commands.ts",
      "src/utils/model.ts"
    ],
    "src/services/adapters/base.ts": [
      "src/types/modelCapabilities.ts",
      "src/utils/config.ts",
      "src/Tool.ts"
    ],
    "src/services/adapters/chatCompletions.ts": [
      "src/services/adapters/base.ts",
      "src/types/modelCapabilities.ts",
      "src/Tool.ts"
    ],
    "src/services/adapters/responsesAPI.ts": [
      "src/services/adapters/base.ts",
      "src/types/modelCapabilities.ts",
      "src/Tool.ts"
    ],
    "src/services/browserMocks.ts": [],
    "src/services/claude.ts": [
      "src/cost-tracker.ts",
      "src/constants/models.ts",
      "src/query.ts",
      "src/Tool.ts",
      "src/utils/config.ts",
      "src/context.ts",
      "src/utils/log.ts",
      "src/utils/http.ts",
      "src/utils/messages.tsx",
      "src/utils/tokens.ts",
      "src/services/vcr.ts",
      "src/utils/debugLogger.ts",
      "src/utils/messageContextManager.ts",
      "src/utils/model.ts",
      "src/services/modelAdapterFactory.ts",
      "src/types/modelCapabilities.ts",
      "src/services/responseStateManager.ts",
      "src/constants/prompts.ts",
      "src/services/openai.ts",
      "src/utils/thinking.ts",
      "src/services/systemReminder.ts"
    ],
    "src/services/customCommands.ts": [
      "src/commands.ts",
      "src/utils/state.ts"
    ],
    "src/services/fileFreshness.ts": [
      "src/services/systemReminder.ts",
      "src/utils/agentStorage.ts"
    ],
    "src/services/gpt5ConnectionTest.ts": [
      "src/services/openai.ts"
    ],
    "src/services/mcpClient.ts": [
      "src/utils/state.ts",
      "src/utils/json.ts",
      "src/Tool.ts",
      "src/tools/MCPTool/MCPTool.tsx",
      "src/utils/log.ts",
      "src/commands.ts"
    ],
    "src/services/mcpServerApproval.tsx": [
      "src/components/MCPServerMultiselectDialog.tsx",
      "src/components/MCPServerApprovalDialog.tsx",
      "src/services/mcpClient.ts",
      "src/utils/config.ts"
    ],
    "src/services/mentionProcessor.ts": [
      "src/services/systemReminder.ts",
      "src/utils/agentLoader.ts",
      "src/utils/state.ts"
    ],
    "src/services/modelAdapterFactory.ts": [
      "src/services/adapters/base.ts",
      "src/services/adapters/responsesAPI.ts",
      "src/services/adapters/chatCompletions.ts",
      "src/constants/modelCapabilities.ts",
      "src/utils/config.ts",
      "src/types/modelCapabilities.ts"
    ],
    "src/services/notifier.ts": [
      "src/utils/config.ts"
    ],
    "src/services/oauth.ts": [
      "src/constants/oauth.ts",
      "src/utils/browser.ts",
      "src/utils/log.ts",
      "src/services/claude.ts"
    ],
    "src/services/openai.ts": [
      "src/utils/config.ts",
      "src/utils/sessionState.ts",
      "src/utils/debugLogger.ts"
    ],
    "src/services/responseStateManager.ts": [],
    "src/services/sentry.ts": [],
    "src/services/systemReminder.ts": [
      "src/utils/todoStorage.ts"
    ],
    "src/services/vcr.ts": [
      "src/query.ts",
      "src/utils/env.ts",
      "src/utils/state.ts"
    ],
    "src/test/testAdapters.ts": [
      "src/services/modelAdapterFactory.ts",
      "src/constants/modelCapabilities.ts",
      "src/utils/config.ts"
    ],
    "src/Tool.ts": [],
    "src/tools/ArchitectTool/ArchitectTool.tsx": [
      "src/Tool.ts",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/HighlightedCode.tsx",
      "src/context.ts",
      "src/query.ts",
      "src/utils/generators.ts",
      "src/utils/messages.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/ArchitectTool/prompt.ts"
    ],
    "src/tools/ArchitectTool/prompt.ts": [],
    "src/tools/AskExpertModelTool/AskExpertModelTool.tsx": [
      "src/Tool.ts",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/utils/model.ts",
      "src/utils/theme.ts",
      "src/utils/messages.tsx",
      "src/utils/log.ts",
      "src/utils/expertChatStorage.ts",
      "src/services/claude.ts",
      "src/utils/debugLogger.ts",
      "src/utils/markdown.ts"
    ],
    "src/tools/BashTool/BashTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/constants/product.ts",
      "src/services/claude.ts",
      "src/Tool.ts",
      "src/utils/commands.ts",
      "src/utils/file.ts",
      "src/utils/log.ts",
      "src/utils/PersistentShell.ts",
      "src/utils/state.ts",
      "src/utils/config.ts",
      "src/utils/model.ts",
      "src/tools/BashTool/BashToolResultMessage.tsx",
      "src/tools/BashTool/prompt.ts",
      "src/tools/BashTool/utils.ts"
    ],
    "src/tools/BashTool/BashToolResultMessage.tsx": [
      "src/tools/BashTool/OutputLine.tsx",
      "src/utils/theme.ts",
      "src/tools/BashTool/BashTool.tsx"
    ],
    "src/tools/BashTool/OutputLine.tsx": [
      "src/utils/theme.ts",
      "src/tools/BashTool/prompt.ts"
    ],
    "src/tools/BashTool/prompt.ts": [
      "src/constants/product.ts",
      "src/tools/TaskTool/constants.ts",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/GlobTool/prompt.ts",
      "src/tools/GrepTool/prompt.ts",
      "src/tools/lsTool/lsTool.tsx"
    ],
    "src/tools/BashTool/utils.ts": [
      "src/services/claude.ts",
      "src/utils/messages.tsx",
      "src/tools/BashTool/prompt.ts"
    ],
    "src/tools/FileEditTool/FileEditTool.tsx": [
      "src/components/FileEditToolUpdatedMessage.tsx",
      "src/components/StructuredDiff.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/array.ts",
      "src/utils/log.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/FileEditTool/prompt.ts",
      "src/tools/FileEditTool/utils.ts",
      "src/utils/permissions/filesystem.ts",
      "src/constants/product.ts"
    ],
    "src/tools/FileEditTool/prompt.ts": [
      "src/tools/NotebookEditTool/NotebookEditTool.tsx"
    ],
    "src/tools/FileEditTool/utils.ts": [
      "src/utils/state.ts",
      "src/utils/file.ts",
      "src/utils/diff.ts"
    ],
    "src/tools/FileReadTool/FileReadTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/HighlightedCode.tsx",
      "src/Tool.ts",
      "src/utils/state.ts",
      "src/utils/log.ts",
      "src/utils/theme.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts",
      "src/tools/FileReadTool/prompt.ts",
      "src/utils/permissions/filesystem.ts",
      "src/utils/secureFile.ts"
    ],
    "src/tools/FileReadTool/prompt.ts": [
      "src/tools/NotebookReadTool/NotebookReadTool.tsx"
    ],
    "src/tools/FileWriteTool/FileWriteTool.tsx": [
      "src/components/FileEditToolUpdatedMessage.tsx",
      "src/components/HighlightedCode.tsx",
      "src/components/StructuredDiff.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/array.ts",
      "src/utils/log.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/tools/FileWriteTool/prompt.ts",
      "src/utils/permissions/filesystem.ts",
      "src/utils/diff.ts",
      "src/constants/product.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/tools/FileWriteTool/prompt.ts": [],
    "src/tools/GlobTool/GlobTool.tsx": [
      "src/components/Cost.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/state.ts",
      "src/utils/file.ts",
      "src/tools/GlobTool/prompt.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/tools/GlobTool/prompt.ts": [],
    "src/tools/GrepTool/GrepTool.tsx": [
      "src/components/Cost.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/state.ts",
      "src/utils/ripgrep.ts",
      "src/tools/GrepTool/prompt.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/tools/GrepTool/prompt.ts": [],
    "src/tools/lsTool/lsTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/log.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/tools/lsTool/prompt.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/tools/lsTool/prompt.ts": [],
    "src/tools/MCPTool/MCPTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/theme.ts",
      "src/tools/MCPTool/prompt.ts",
      "src/tools/BashTool/OutputLine.tsx"
    ],
    "src/tools/MCPTool/prompt.ts": [],
    "src/tools/MemoryReadTool/MemoryReadTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/env.ts",
      "src/utils/agentStorage.ts",
      "src/tools/MemoryReadTool/prompt.ts"
    ],
    "src/tools/MemoryReadTool/prompt.ts": [],
    "src/tools/MemoryWriteTool/MemoryWriteTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/env.ts",
      "src/utils/agentStorage.ts",
      "src/services/fileFreshness.ts",
      "src/tools/MemoryWriteTool/prompt.ts"
    ],
    "src/tools/MemoryWriteTool/prompt.ts": [],
    "src/tools/MultiEditTool/MultiEditTool.tsx": [
      "src/components/FileEditToolUpdatedMessage.tsx",
      "src/components/StructuredDiff.tsx",
      "src/Tool.ts",
      "src/utils/array.ts",
      "src/utils/log.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/utils/permissions/filesystem.ts",
      "src/constants/product.ts",
      "src/tools/MultiEditTool/prompt.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts",
      "src/utils/diff.ts"
    ],
    "src/tools/MultiEditTool/prompt.ts": [
      "src/tools/NotebookEditTool/NotebookEditTool.tsx"
    ],
    "src/tools/NotebookEditTool/NotebookEditTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/HighlightedCode.tsx",
      "src/Tool.ts",
      "src/types/notebook.ts",
      "src/utils/json.ts",
      "src/utils/state.ts",
      "src/tools/NotebookEditTool/prompt.ts",
      "src/utils/permissions/filesystem.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/tools/NotebookEditTool/prompt.ts": [],
    "src/tools/NotebookReadTool/NotebookReadTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/types/notebook.ts",
      "src/tools/BashTool/utils.ts",
      "src/utils/state.ts",
      "src/utils/file.ts",
      "src/tools/NotebookReadTool/prompt.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/tools/NotebookReadTool/prompt.ts": [],
    "src/tools/StickerRequestTool/prompt.ts": [],
    "src/tools/StickerRequestTool/StickerRequestTool.tsx": [
      "src/Tool.ts",
      "src/tools/StickerRequestTool/prompt.ts",
      "src/components/StickerRequestForm.tsx",
      "src/utils/theme.ts"
    ],
    "src/tools/TaskTool/constants.ts": [],
    "src/tools/TaskTool/prompt.ts": [
      "src/Tool.ts",
      "src/tools.ts",
      "src/tools/TaskTool/TaskTool.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/utils/model.ts",
      "src/utils/agentLoader.ts"
    ],
    "src/tools/TaskTool/TaskTool.tsx": [
      "src/Tool.ts",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/constants/prompts.ts",
      "src/context.ts",
      "src/permissions.ts",
      "src/query.ts",
      "src/utils/format.tsx",
      "src/utils/markdown.ts",
      "src/utils/model.ts",
      "src/utils/thinking.ts",
      "src/utils/theme.ts",
      "src/utils/agentStorage.ts",
      "src/utils/debugLogger.ts",
      "src/tools/TaskTool/prompt.ts",
      "src/tools/TaskTool/constants.ts",
      "src/utils/agentLoader.ts"
    ],
    "src/tools/ThinkTool/prompt.ts": [],
    "src/tools/ThinkTool/ThinkTool.tsx": [
      "src/Tool.ts",
      "src/tools/ThinkTool/prompt.ts",
      "src/utils/theme.ts",
      "src/components/MessageResponse.tsx",
      "src/utils/model.ts"
    ],
    "src/tools/TodoWriteTool/prompt.ts": [],
    "src/tools/TodoWriteTool/TodoWriteTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/TodoItem.tsx",
      "src/Tool.ts",
      "src/utils/todoStorage.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts",
      "src/tools/TodoWriteTool/prompt.ts",
      "src/utils/theme.ts"
    ],
    "src/tools/URLFetcherTool/cache.ts": [],
    "src/tools/URLFetcherTool/htmlToMarkdown.ts": [],
    "src/tools/URLFetcherTool/prompt.ts": [],
    "src/tools/URLFetcherTool/URLFetcherTool.tsx": [
      "src/components/Cost.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/tools/URLFetcherTool/prompt.ts",
      "src/tools/URLFetcherTool/htmlToMarkdown.ts",
      "src/tools/URLFetcherTool/cache.ts",
      "src/services/claude.ts"
    ],
    "src/tools/WebSearchTool/prompt.ts": [],
    "src/tools/WebSearchTool/searchProviders.ts": [],
    "src/tools/WebSearchTool/WebSearchTool.tsx": [
      "src/components/Cost.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/tools/WebSearchTool/prompt.ts",
      "src/tools/WebSearchTool/searchProviders.ts"
    ],
    "src/tools.ts": [
      "src/Tool.ts",
      "src/tools/TaskTool/TaskTool.tsx",
      "src/tools/ArchitectTool/ArchitectTool.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/MultiEditTool/MultiEditTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/NotebookReadTool/NotebookReadTool.tsx",
      "src/tools/MemoryReadTool/MemoryReadTool.tsx",
      "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
      "src/tools/ThinkTool/ThinkTool.tsx",
      "src/tools/TodoWriteTool/TodoWriteTool.tsx",
      "src/tools/WebSearchTool/WebSearchTool.tsx",
      "src/tools/URLFetcherTool/URLFetcherTool.tsx",
      "src/services/mcpClient.ts"
    ],
    "src/types/common.d.ts": [],
    "src/types/conversation.ts": [],
    "src/types/logs.ts": [],
    "src/types/modelCapabilities.ts": [],
    "src/types/notebook.ts": [],
    "src/types/PermissionMode.ts": [],
    "src/types/RequestContext.ts": [],
    "src/utils/advancedFuzzyMatcher.ts": [],
    "src/utils/agentLoader.ts": [
      "src/utils/state.ts"
    ],
    "src/utils/agentStorage.ts": [],
    "src/utils/array.ts": [],
    "src/utils/ask.tsx": [
      "src/commands.ts",
      "src/constants/prompts.ts",
      "src/context.ts",
      "src/cost-tracker.ts",
      "src/query.ts",
      "src/hooks/useCanUseTool.ts",
      "src/Tool.ts",
      "src/utils/model.ts",
      "src/utils/state.ts",
      "src/utils/log.ts",
      "src/utils/messages.tsx"
    ],
    "src/utils/auth.ts": [
      "src/utils/model.ts",
      "src/utils/config.ts"
    ],
    "src/utils/autoCompactCore.ts": [
      "src/query.ts",
      "src/utils/tokens.ts",
      "src/messages.ts",
      "src/context.ts",
      "src/utils/style.ts",
      "src/utils/terminal.ts",
      "src/services/fileFreshness.ts",
      "src/utils/messages.tsx",
      "src/services/claude.ts",
      "src/utils/fileRecoveryCore.ts",
      "src/utils/file.ts",
      "src/utils/model.ts"
    ],
    "src/utils/autoUpdater.ts": [
      "src/utils/execFileNoThrow.ts",
      "src/utils/log.ts",
      "src/constants/macros.ts",
      "src/constants/product.ts",
      "src/utils/config.ts",
      "src/utils/env.ts"
    ],
    "src/utils/browser.ts": [
      "src/utils/execFileNoThrow.ts"
    ],
    "src/utils/cleanup.ts": [
      "src/utils/log.ts"
    ],
    "src/utils/commands.ts": [
      "src/services/claude.ts",
      "src/constants/product.ts"
    ],
    "src/utils/commonUnixCommands.ts": [],
    "src/utils/config.ts": [
      "src/utils/env.ts",
      "src/utils/state.ts",
      "src/utils/json.ts",
      "src/utils/errors.ts",
      "src/utils/theme.ts",
      "src/utils/debugLogger.ts",
      "src/utils/sessionState.ts",
      "src/utils/model.ts"
    ],
    "src/utils/conversationRecovery.ts": [
      "src/utils/log.ts",
      "src/Tool.ts"
    ],
    "src/utils/Cursor.ts": [],
    "src/utils/debugLogger.ts": [
      "src/constants/product.ts",
      "src/utils/log.ts",
      "src/types/conversation.ts"
    ],
    "src/utils/diff.ts": [],
    "src/utils/env.ts": [
      "src/utils/execFileNoThrow.ts",
      "src/constants/product.ts"
    ],
    "src/utils/errors.ts": [],
    "src/utils/exampleCommands.ts": [
      "src/utils/env.ts",
      "src/utils/state.ts",
      "src/utils/log.ts",
      "src/utils/git.ts",
      "src/services/claude.ts"
    ],
    "src/utils/execFileNoThrow.ts": [
      "src/utils/state.ts",
      "src/utils/log.ts"
    ],
    "src/utils/expertChatStorage.ts": [],
    "src/utils/file.ts": [
      "src/utils/log.ts",
      "src/utils/ripgrep.ts",
      "src/utils/state.ts"
    ],
    "src/utils/fileRecoveryCore.ts": [
      "src/utils/file.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/utils/format.tsx": [],
    "src/utils/fuzzyMatcher.ts": [
      "src/utils/advancedFuzzyMatcher.ts"
    ],
    "src/utils/generators.ts": [],
    "src/utils/git.ts": [
      "src/utils/execFileNoThrow.ts"
    ],
    "src/utils/globalLogger.ts": [],
    "src/utils/http.ts": [
      "src/constants/macros.ts",
      "src/constants/product.ts"
    ],
    "src/utils/imagePaste.ts": [],
    "src/utils/json.ts": [
      "src/utils/log.ts"
    ],
    "src/utils/log.ts": [
      "src/services/sentry.ts",
      "src/types/logs.ts",
      "src/constants/macros.ts",
      "src/constants/product.ts"
    ],
    "src/utils/markdown.ts": [
      "src/utils/messages.tsx",
      "src/utils/log.ts"
    ],
    "src/utils/messageContextManager.ts": [
      "src/query.ts",
      "src/utils/tokens.ts"
    ],
    "src/utils/messages.tsx": [
      "src/commands.ts",
      "src/utils/errors.ts",
      "src/utils/log.ts",
      "src/Tool.ts",
      "src/utils/generators.ts",
      "src/services/claude.ts",
      "src/utils/state.ts",
      "src/components/messages/UserBashInputMessage.tsx",
      "src/components/Spinner.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/services/customCommands.ts",
      "src/services/mentionProcessor.ts"
    ],
    "src/utils/model.ts": [
      "src/utils/log.ts",
      "src/utils/config.ts"
    ],
    "src/utils/permissions/filesystem.ts": [
      "src/utils/state.ts"
    ],
    "src/utils/PersistentShell.ts": [
      "src/utils/log.ts",
      "src/constants/product.ts"
    ],
    "src/utils/responseState.ts": [],
    "src/utils/ripgrep.ts": [
      "src/utils/log.ts",
      "src/utils/execFileNoThrow.ts"
    ],
    "src/utils/secureFile.ts": [],
    "src/utils/sessionState.ts": [],
    "src/utils/state.ts": [
      "src/utils/PersistentShell.ts"
    ],
    "src/utils/style.ts": [
      "src/utils/state.ts",
      "src/constants/product.ts"
    ],
    "src/utils/terminal.ts": [
      "src/utils/json.ts",
      "src/utils/log.ts",
      "src/services/claude.ts"
    ],
    "src/utils/theme.ts": [
      "src/utils/config.ts"
    ],
    "src/utils/thinking.ts": [
      "src/query.ts",
      "src/utils/messages.tsx",
      "src/tools/ThinkTool/ThinkTool.tsx",
      "src/utils/model.ts"
    ],
    "src/utils/todoStorage.ts": [
      "src/utils/sessionState.ts",
      "src/utils/agentStorage.ts"
    ],
    "src/utils/tokens.ts": [
      "src/query.ts",
      "src/utils/messages.tsx"
    ],
    "src/utils/toolExecutionController.ts": [
      "src/Tool.ts"
    ],
    "src/utils/unaryLogging.ts": [],
    "src/utils/user.ts": [
      "src/utils/config.ts",
      "src/utils/env.ts",
      "src/utils/execFileNoThrow.ts",
      "src/utils/log.ts",
      "src/constants/macros.ts"
    ],
    "src/utils/validate.ts": []
  },
  "moduleAnalysis": {
    "entryPoints": [
      "src/commands/approvedTools.ts",
      "src/components/Cost.tsx",
      "src/components/CustomSelect/theme.ts",
      "src/components/MessageResponse.tsx",
      "src/components/StickerRequestForm.tsx",
      "src/constants/claude-asterisk-ascii-art.tsx",
      "src/constants/macros.ts",
      "src/constants/models.ts",
      "src/constants/oauth.ts",
      "src/constants/product.ts",
      "src/constants/releaseNotes.ts",
      "src/history.ts",
      "src/hooks/useDoublePress.ts",
      "src/hooks/useInterval.ts",
      "src/hooks/useLogStartupTime.ts",
      "src/hooks/useTerminalSize.ts",
      "src/index.ts",
      "src/services/browserMocks.ts",
      "src/services/responseStateManager.ts",
      "src/services/sentry.ts",
      "src/Tool.ts",
      "src/tools/ArchitectTool/prompt.ts",
      "src/tools/FileWriteTool/prompt.ts",
      "src/tools/GlobTool/prompt.ts",
      "src/tools/GrepTool/prompt.ts",
      "src/tools/lsTool/prompt.ts",
      "src/tools/MCPTool/prompt.ts",
      "src/tools/MemoryReadTool/prompt.ts",
      "src/tools/MemoryWriteTool/prompt.ts",
      "src/tools/NotebookEditTool/prompt.ts",
      "src/tools/NotebookReadTool/prompt.ts",
      "src/tools/StickerRequestTool/prompt.ts",
      "src/tools/TaskTool/constants.ts",
      "src/tools/ThinkTool/prompt.ts",
      "src/tools/TodoWriteTool/prompt.ts",
      "src/tools/URLFetcherTool/cache.ts",
      "src/tools/URLFetcherTool/htmlToMarkdown.ts",
      "src/tools/URLFetcherTool/prompt.ts",
      "src/tools/WebSearchTool/prompt.ts",
      "src/tools/WebSearchTool/searchProviders.ts",
      "src/types/common.d.ts",
      "src/types/conversation.ts",
      "src/types/logs.ts",
      "src/types/modelCapabilities.ts",
      "src/types/notebook.ts",
      "src/types/PermissionMode.ts",
      "src/types/RequestContext.ts",
      "src/utils/advancedFuzzyMatcher.ts",
      "src/utils/agentStorage.ts",
      "src/utils/array.ts",
      "src/utils/commonUnixCommands.ts",
      "src/utils/Cursor.ts",
      "src/utils/diff.ts",
      "src/utils/errors.ts",
      "src/utils/expertChatStorage.ts",
      "src/utils/format.tsx",
      "src/utils/generators.ts",
      "src/utils/globalLogger.ts",
      "src/utils/imagePaste.ts",
      "src/utils/responseState.ts",
      "src/utils/secureFile.ts",
      "src/utils/sessionState.ts",
      "src/utils/unaryLogging.ts",
      "src/utils/validate.ts",
      "src/components/SentryErrorBoundary.ts",
      "src/entrypoints/cli.tsx",
      "src/entrypoints/mcp.ts"
    ],
    "coreModules": [
      "src/utils/theme.ts",
      "src/Tool.ts",
      "src/utils/log.ts",
      "src/utils/state.ts",
      "src/constants/product.ts",
      "src/commands.ts",
      "src/query.ts",
      "src/utils/model.ts",
      "src/utils/config.ts",
      "src/utils/env.ts",
      "src/utils/messages.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/services/claude.ts",
      "src/components/CustomSelect/select.tsx",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/constants/macros.ts",
      "src/hooks/useTerminalSize.ts",
      "src/services/systemReminder.ts",
      "src/utils/permissions/filesystem.ts",
      "src/services/fileFreshness.ts",
      "src/utils/terminal.ts",
      "src/context.ts",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/utils/execFileNoThrow.ts",
      "src/permissions.ts",
      "src/services/mcpClient.ts",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/utils/debugLogger.ts",
      "src/utils/file.ts",
      "src/components/StructuredDiff.tsx",
      "src/messages.ts",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/lsTool/lsTool.tsx",
      "src/utils/agentLoader.ts",
      "src/utils/unaryLogging.ts",
      "src/components/Cost.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/types/modelCapabilities.ts",
      "src/utils/array.ts",
      "src/utils/errors.ts",
      "src/components/HighlightedCode.tsx",
      "src/components/permissions/PermissionRequest.tsx",
      "src/constants/prompts.ts",
      "src/utils/agentStorage.ts",
      "src/utils/commands.ts",
      "src/utils/diff.ts",
      "src/utils/generators.ts",
      "src/utils/git.ts",
      "src/utils/json.ts",
      "src/commands/terminalSetup.ts"
    ],
    "utilityModules": [
      "src/constants/figures.ts",
      "src/constants/macros.ts",
      "src/constants/modelCapabilities.ts",
      "src/constants/models.ts",
      "src/constants/product.ts",
      "src/constants/prompts.ts",
      "src/constants/releaseNotes.ts",
      "src/utils/agentLoader.ts",
      "src/utils/agentStorage.ts",
      "src/utils/array.ts",
      "src/utils/auth.ts",
      "src/utils/browser.ts",
      "src/utils/commands.ts",
      "src/utils/config.ts",
      "src/utils/conversationRecovery.ts",
      "src/utils/debugLogger.ts",
      "src/utils/diff.ts",
      "src/utils/env.ts",
      "src/utils/errors.ts",
      "src/utils/exampleCommands.ts",
      "src/utils/execFileNoThrow.ts",
      "src/utils/file.ts",
      "src/utils/format.tsx",
      "src/utils/generators.ts",
      "src/utils/git.ts",
      "src/utils/http.ts",
      "src/utils/json.ts",
      "src/utils/log.ts",
      "src/utils/markdown.ts",
      "src/utils/messages.tsx",
      "src/utils/model.ts",
      "src/utils/permissions/filesystem.ts",
      "src/utils/PersistentShell.ts",
      "src/utils/ripgrep.ts",
      "src/utils/sessionState.ts",
      "src/utils/state.ts",
      "src/utils/style.ts",
      "src/utils/terminal.ts",
      "src/utils/theme.ts",
      "src/utils/thinking.ts",
      "src/utils/todoStorage.ts",
      "src/utils/tokens.ts",
      "src/utils/unaryLogging.ts"
    ],
    "leafModules": [
      "src/components/messages/TaskProgressMessage.tsx",
      "src/test/testAdapters.ts",
      "src/tools/StickerRequestTool/StickerRequestTool.tsx"
    ],
    "readingOrder": [
      "src/index.ts",
      "src/services/sentry.ts",
      "src/constants/product.ts",
      "src/history.ts",
      "src/types/logs.ts",
      "src/constants/macros.ts",
      "src/utils/log.ts",
      "src/utils/PersistentShell.ts",
      "src/utils/state.ts",
      "src/utils/style.ts",
      "src/utils/execFileNoThrow.ts",
      "src/utils/env.ts",
      "src/utils/json.ts",
      "src/utils/errors.ts",
      "src/types/conversation.ts",
      "src/utils/debugLogger.ts",
      "src/utils/sessionState.ts",
      "src/utils/model.ts",
      "src/utils/config.ts",
      "src/utils/theme.ts",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/tools/lsTool/prompt.ts",
      "src/utils/permissions/filesystem.ts",
      "src/tools/lsTool/lsTool.tsx",
      "src/utils/git.ts",
      "src/utils/ripgrep.ts",
      "src/utils/generators.ts",
      "src/utils/user.ts",
      "src/context.ts",
      "src/utils/format.tsx",
      "src/cost-tracker.ts",
      "src/constants/models.ts",
      "src/utils/http.ts",
      "src/components/messages/UserBashInputMessage.tsx",
      "src/components/Spinner.tsx",
      "src/services/customCommands.ts",
      "src/utils/agentStorage.ts",
      "src/utils/todoStorage.ts",
      "src/services/systemReminder.ts",
      "src/utils/agentLoader.ts",
      "src/services/mentionProcessor.ts",
      "src/utils/messages.tsx",
      "src/utils/tokens.ts",
      "src/services/vcr.ts",
      "src/utils/messageContextManager.ts",
      "src/types/modelCapabilities.ts",
      "src/services/adapters/base.ts",
      "src/services/adapters/responsesAPI.ts",
      "src/services/adapters/chatCompletions.ts",
      "src/constants/modelCapabilities.ts",
      "src/services/modelAdapterFactory.ts",
      "src/services/responseStateManager.ts",
      "src/constants/prompts.ts",
      "src/services/openai.ts",
      "src/tools/ThinkTool/prompt.ts",
      "src/components/MessageResponse.tsx",
      "src/tools/ThinkTool/ThinkTool.tsx",
      "src/utils/thinking.ts",
      "src/services/claude.ts",
      "src/utils/commands.ts",
      "src/utils/file.ts",
      "src/tools/TaskTool/constants.ts",
      "src/components/HighlightedCode.tsx",
      "src/services/fileFreshness.ts",
      "src/types/notebook.ts",
      "src/tools/BashTool/utils.ts",
      "src/tools/NotebookReadTool/prompt.ts",
      "src/tools/NotebookReadTool/NotebookReadTool.tsx",
      "src/tools/FileReadTool/prompt.ts",
      "src/utils/secureFile.ts",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/GlobTool/prompt.ts",
      "src/tools/GrepTool/prompt.ts",
      "src/tools/BashTool/prompt.ts",
      "src/tools/BashTool/OutputLine.tsx",
      "src/tools/BashTool/BashToolResultMessage.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/utils/array.ts",
      "src/components/StructuredDiff.tsx",
      "src/hooks/useTerminalSize.ts",
      "src/components/FileEditToolUpdatedMessage.tsx",
      "src/tools/NotebookEditTool/prompt.ts",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/FileEditTool/prompt.ts",
      "src/utils/diff.ts",
      "src/tools/FileEditTool/utils.ts",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileWriteTool/prompt.ts",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/permissions.ts",
      "src/components/CustomSelect/theme.ts",
      "src/components/CustomSelect/select-option.tsx",
      "src/components/CustomSelect/option-map.ts",
      "src/components/CustomSelect/use-select-state.ts",
      "src/components/CustomSelect/use-select.ts",
      "src/components/CustomSelect/select.tsx",
      "src/utils/unaryLogging.ts",
      "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
      "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
      "src/hooks/usePermissionRequestLogging.ts",
      "src/components/permissions/hooks.ts",
      "src/components/permissions/PermissionRequestTitle.tsx",
      "src/components/permissions/utils.ts",
      "src/components/permissions/toolUseOptions.ts",
      "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
      "src/components/permissions/FallbackPermissionRequest.tsx",
      "src/services/notifier.ts",
      "src/hooks/useNotifyAfterTimeout.ts",
      "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
      "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
      "src/components/Cost.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
      "src/components/permissions/PermissionRequest.tsx",
      "src/hooks/useCanUseTool.ts",
      "src/utils/toolExecutionController.ts",
      "src/utils/terminal.ts",
      "src/utils/fileRecoveryCore.ts",
      "src/utils/autoCompactCore.ts",
      "src/query.ts",
      "src/messages.ts",
      "src/hooks/useDoublePress.ts",
      "src/utils/Cursor.ts",
      "src/hooks/useTextInput.ts",
      "src/components/TextInput.tsx",
      "src/utils/browser.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/components/Bug.tsx",
      "src/commands/bug.tsx",
      "src/commands/clear.ts",
      "src/commands/compact.ts",
      "src/components/Config.tsx",
      "src/commands/config.tsx",
      "src/commands/cost.ts",
      "src/commands/ctx_viz.ts",
      "src/components/PressEnterToContinue.tsx",
      "src/screens/Doctor.tsx",
      "src/commands/doctor.ts",
      "src/components/Help.tsx",
      "src/commands/help.tsx",
      "src/commands/terminalSetup.ts",
      "src/constants/releaseNotes.ts",
      "src/ProjectOnboarding.tsx",
      "src/commands/init.ts",
      "src/commands/listen.ts",
      "src/constants/oauth.ts",
      "src/services/oauth.ts",
      "src/components/AsciiLogo.tsx",
      "src/tools/MCPTool/prompt.ts",
      "src/tools/MCPTool/MCPTool.tsx",
      "src/services/mcpClient.ts",
      "src/components/Logo.tsx",
      "src/services/gpt5ConnectionTest.ts",
      "src/components/ModelSelector.tsx",
      "src/components/Onboarding.tsx",
      "src/components/ConsoleOAuthFlow.tsx",
      "src/utils/auth.ts",
      "src/commands/login.tsx",
      "src/commands/logout.tsx",
      "src/commands/mcp.ts",
      "src/components/ModelListManager.tsx",
      "src/components/ModelConfig.tsx",
      "src/commands/model.tsx",
      "src/components/ModelStatusDisplay.tsx",
      "src/commands/modelstatus.tsx",
      "src/commands/onboarding.tsx",
      "src/commands/pr_comments.ts",
      "src/commands/refreshCommands.ts",
      "src/commands/release-notes.ts",
      "src/commands/review.ts",
      "src/components/Link.tsx",
      "src/components/CostThresholdDialog.tsx",
      "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
      "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
      "src/components/messages/UserToolResultMessage/utils.tsx",
      "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
      "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx",
      "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
      "src/hooks/useInterval.ts",
      "src/constants/figures.ts",
      "src/components/ToolUseLoader.tsx",
      "src/utils/markdown.ts",
      "src/components/messages/AssistantThinkingMessage.tsx",
      "src/components/messages/TaskToolMessage.tsx",
      "src/components/messages/AssistantToolUseMessage.tsx",
      "src/components/messages/AssistantBashOutputMessage.tsx",
      "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
      "src/components/messages/AssistantTextMessage.tsx",
      "src/components/messages/UserKodingInputMessage.tsx",
      "src/components/messages/UserCommandMessage.tsx",
      "src/components/messages/UserPromptMessage.tsx",
      "src/components/messages/UserTextMessage.tsx",
      "src/components/messages/AssistantRedactedThinkingMessage.tsx",
      "src/components/Message.tsx",
      "src/components/MessageSelector.tsx",
      "src/utils/exampleCommands.ts",
      "src/hooks/useArrowKeyHistory.ts",
      "src/utils/advancedFuzzyMatcher.ts",
      "src/utils/fuzzyMatcher.ts",
      "src/utils/commonUnixCommands.ts",
      "src/hooks/useUnifiedCompletion.ts",
      "src/components/SentryErrorBoundary.ts",
      "src/components/TokenWarning.tsx",
      "src/types/PermissionMode.ts",
      "src/context/PermissionContext.tsx",
      "src/components/PromptInput.tsx",
      "src/hooks/useLogStartupTime.ts",
      "src/hooks/useApiKeyVerification.ts",
      "src/hooks/useCancelRequest.ts",
      "src/hooks/useLogMessages.ts",
      "src/components/ModeIndicator.tsx",
      "src/components/binary-feedback/BinaryFeedbackOption.tsx",
      "src/components/binary-feedback/utils.ts",
      "src/components/binary-feedback/BinaryFeedbackView.tsx",
      "src/components/binary-feedback/BinaryFeedback.tsx",
      "src/screens/REPL.tsx",
      "src/utils/conversationRecovery.ts",
      "src/components/LogSelector.tsx",
      "src/screens/ResumeConversation.tsx",
      "src/commands/resume.tsx",
      "src/commands/agents.tsx",
      "src/commands.ts",
      "src/utils/ask.tsx",
      "src/tools/TaskTool/prompt.ts",
      "src/tools/TaskTool/TaskTool.tsx",
      "src/tools/ArchitectTool/prompt.ts",
      "src/tools/ArchitectTool/ArchitectTool.tsx",
      "src/utils/expertChatStorage.ts",
      "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
      "src/tools/MultiEditTool/prompt.ts",
      "src/tools/MultiEditTool/MultiEditTool.tsx",
      "src/tools/MemoryReadTool/prompt.ts",
      "src/tools/MemoryReadTool/MemoryReadTool.tsx",
      "src/tools/MemoryWriteTool/prompt.ts",
      "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
      "src/components/TodoItem.tsx",
      "src/tools/TodoWriteTool/prompt.ts",
      "src/tools/TodoWriteTool/TodoWriteTool.tsx",
      "src/tools/WebSearchTool/prompt.ts",
      "src/tools/WebSearchTool/searchProviders.ts",
      "src/tools/WebSearchTool/WebSearchTool.tsx",
      "src/tools/URLFetcherTool/prompt.ts",
      "src/tools/URLFetcherTool/htmlToMarkdown.ts",
      "src/tools/URLFetcherTool/cache.ts",
      "src/tools/URLFetcherTool/URLFetcherTool.tsx",
      "src/tools.ts",
      "src/components/ApproveApiKey.tsx",
      "src/components/TrustDialog.tsx",
      "src/screens/LogList.tsx",
      "src/entrypoints/mcp.ts",
      "src/utils/cleanup.ts",
      "src/commands/approvedTools.ts",
      "src/components/MCPServerDialogCopy.tsx",
      "src/components/MCPServerMultiselectDialog.tsx",
      "src/components/MCPServerApprovalDialog.tsx",
      "src/services/mcpServerApproval.tsx",
      "src/utils/autoUpdater.ts",
      "src/components/InvalidConfigDialog.tsx",
      "src/entrypoints/cli.tsx",
      "src/components/StickerRequestForm.tsx",
      "src/constants/claude-asterisk-ascii-art.tsx",
      "src/services/browserMocks.ts",
      "src/tools/StickerRequestTool/prompt.ts",
      "src/types/common.d.ts",
      "src/types/RequestContext.ts",
      "src/utils/globalLogger.ts",
      "src/utils/imagePaste.ts",
      "src/utils/responseState.ts",
      "src/utils/validate.ts",
      "src/components/messages/TaskProgressMessage.tsx",
      "src/tools/StickerRequestTool/StickerRequestTool.tsx",
      "src/test/testAdapters.ts"
    ]
  },
  "scannedAt": "2025-09-17T07:31:30.511Z"
}