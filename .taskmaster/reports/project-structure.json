{
  "files": [
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\agents.tsx",
      "relativePath": "src/commands/agents.tsx",
      "name": "agents.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useState",
            "useEffect",
            "useMemo",
            "useCallback",
            "useReducer",
            "Fragment"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink-text-input",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "getActiveAgents",
            "clearAgentCache"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "AgentConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "writeFileSync",
            "unlinkSync",
            "mkdirSync",
            "existsSync",
            "readFileSync",
            "renameSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "gray-matter",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "exec",
            "spawn"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "util",
          "imports": [
            "promisify"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "watch",
            "FSWatcher"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "getMCPTools"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/utils/agentLoader.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/services/mcpClient.ts",
        "src/utils/model.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\approvedTools.ts",
      "relativePath": "src/commands/approvedTools.ts",
      "name": "approvedTools.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../utils/config.js",
          "imports": [
            "ProjectConfig",
            "getCurrentProjectConfigDefault",
            "saveCurrentProjectConfigDefault"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "handleListApprovedTools",
          "type": "named"
        },
        {
          "name": "handleRemoveApprovedTool",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\bug.tsx",
      "relativePath": "src/commands/bug.tsx",
      "name": "bug.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Bug",
          "imports": [
            "Bug"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/Bug.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\clear.ts",
      "relativePath": "src/commands/clear.ts",
      "name": "clear.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesSetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/style",
          "imports": [
            "getCodeStyle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getOriginalCwd",
            "setCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/systemReminder",
          "imports": [
            "resetReminderSession"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/fileFreshness",
          "imports": [
            "resetFileFreshnessSession"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "clearConversation",
          "type": "named"
        },
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/messages.ts",
        "src/context.ts",
        "src/utils/style.ts",
        "src/utils/terminal.ts",
        "src/utils/state.ts",
        "src/query.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/commands/login.tsx",
        "src/commands/onboarding.tsx",
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\compact.ts",
      "relativePath": "src/commands/compact.ts",
      "name": "compact.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesGetter",
            "getMessagesSetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "API_ERROR_MESSAGE_PREFIX",
            "queryLLM"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages.js",
          "imports": [
            "createUserMessage",
            "normalizeMessagesForAPI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/style",
          "imports": [
            "getCodeStyle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/systemReminder",
          "imports": [
            "resetReminderSession"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/fileFreshness",
          "imports": [
            "resetFileFreshnessSession"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/context.ts",
        "src/messages.ts",
        "src/services/claude.ts",
        "src/utils/style.ts",
        "src/utils/terminal.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\config.tsx",
      "relativePath": "src/commands/config.tsx",
      "name": "config.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Config",
          "imports": [
            "Config"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/Config.tsx"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\cost.ts",
      "relativePath": "src/commands/cost.ts",
      "name": "cost.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../cost-tracker",
          "imports": [
            "formatTotalCost"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/cost-tracker.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\ctx_viz.ts",
      "relativePath": "src/commands/ctx_viz.ts",
      "name": "ctx_viz.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "cli-table3",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/prompts",
          "imports": [
            "getSystemPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesGetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/Tool.ts",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/messages.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\doctor.ts",
      "relativePath": "src/commands/doctor.ts",
      "name": "doctor.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../screens/Doctor",
          "imports": [
            "Doctor"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/screens/Doctor.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\help.tsx",
      "relativePath": "src/commands/help.tsx",
      "name": "help.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Help",
          "imports": [
            "Help"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/Help.tsx"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\init.ts",
      "relativePath": "src/commands/init.ts",
      "name": "init.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../ProjectOnboarding",
          "imports": [
            "markProjectOnboardingComplete"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/ProjectOnboarding.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\listen.ts",
      "relativePath": "src/commands/listen.ts",
      "name": "listen.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/log.ts",
        "src/utils/execFileNoThrow.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\login.tsx",
      "relativePath": "src/commands/login.tsx",
      "name": "login.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../components/ConsoleOAuthFlow",
          "imports": [
            "ConsoleOAuthFlow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/auth",
          "imports": [
            "isLoggedInToAnthropic"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./clear",
          "imports": [
            "clearConversation"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/utils/terminal.ts",
        "src/utils/auth.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/commands/clear.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\logout.tsx",
      "relativePath": "src/commands/logout.tsx",
      "name": "logout.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/config.ts",
        "src/utils/terminal.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\mcp.ts",
      "relativePath": "src/commands/mcp.ts",
      "name": "mcp.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "listMCPServers",
            "getClients"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/services/mcpClient.ts",
        "src/constants/product.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\model.tsx",
      "relativePath": "src/commands/model.tsx",
      "name": "model.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/ModelConfig",
          "imports": [
            "ModelConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "enableConfigs"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "triggerModelConfigChange"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "help",
          "type": "named"
        },
        {
          "name": "description",
          "type": "named"
        },
        {
          "name": "isEnabled",
          "type": "named"
        },
        {
          "name": "isHidden",
          "type": "named"
        },
        {
          "name": "name",
          "type": "named"
        },
        {
          "name": "type",
          "type": "named"
        },
        {
          "name": "userFacingName",
          "type": "named"
        },
        {
          "name": "call",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/ModelConfig.tsx",
        "src/utils/config.ts",
        "src/messages.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\modelstatus.tsx",
      "relativePath": "src/commands/modelstatus.tsx",
      "name": "modelstatus.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../components/ModelStatusDisplay",
          "imports": [
            "ModelStatusDisplay"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/ModelStatusDisplay.tsx"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\onboarding.tsx",
      "relativePath": "src/commands/onboarding.tsx",
      "name": "onboarding.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../components/Onboarding",
          "imports": [
            "Onboarding"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./clear",
          "imports": [
            "clearConversation"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/components/Onboarding.tsx",
        "src/utils/terminal.ts",
        "src/utils/config.ts",
        "src/commands/clear.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\pr_comments.ts",
      "relativePath": "src/commands/pr_comments.ts",
      "name": "pr_comments.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\refreshCommands.ts",
      "relativePath": "src/commands/refreshCommands.ts",
      "name": "refreshCommands.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/customCommands",
          "imports": [
            "reloadCustomCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "getCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/services/customCommands.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\release-notes.ts",
      "relativePath": "src/commands/release-notes.ts",
      "name": "release-notes.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../constants/macros.js",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../constants/releaseNotes",
          "imports": [
            "RELEASE_NOTES"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/constants/releaseNotes.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\resume.tsx",
      "relativePath": "src/commands/resume.tsx",
      "name": "resume.tsx",
      "extension": ".tsx",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../screens/ResumeConversation",
          "imports": [
            "ResumeConversation"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "CACHE_PATHS",
            "loadLogList"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/screens/ResumeConversation.tsx",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\review.ts",
      "relativePath": "src/commands/review.ts",
      "name": "review.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/tools/BashTool/BashTool.tsx"
      ],
      "dependents": [
        "src/commands.ts",
        "src/entrypoints/mcp.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands\\terminalSetup.ts",
      "relativePath": "src/commands/terminalSetup.ts",
      "name": "terminalSetup.ts",
      "extension": ".ts",
      "directory": "src/commands",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL",
            "platform",
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../ProjectOnboarding",
          "imports": [
            "markProjectOnboardingComplete"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "readFileSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "isShiftEnterKeyBindingInstalled",
          "type": "named"
        },
        {
          "name": "handleHashCommand",
          "type": "named"
        },
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/theme.ts",
        "src/utils/env.ts",
        "src/utils/config.ts",
        "src/ProjectOnboarding.tsx",
        "src/utils/json.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands.ts",
        "src/components/PromptInput.tsx",
        "src/ProjectOnboarding.tsx",
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\commands.ts",
      "relativePath": "src/commands.ts",
      "name": "commands.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/bug",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/clear",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/compact",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/config",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/cost",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/ctx_viz",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/doctor",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/help",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/init",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/listen",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/login",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/logout",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/mcp",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/model",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/modelstatus",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/onboarding",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/pr_comments",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/refreshCommands",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/release-notes",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/review",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/terminalSetup",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/resume",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/agents",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/mcpClient",
          "imports": [
            "getMCPCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/customCommands",
          "imports": [
            "loadCustomCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "MessageParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./utils/auth",
          "imports": [
            "isAnthropicAuthEnabled"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getCommands",
          "type": "named"
        },
        {
          "name": "hasCommand",
          "type": "named"
        },
        {
          "name": "getCommand",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands/bug.tsx",
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/config.tsx",
        "src/commands/cost.ts",
        "src/commands/ctx_viz.ts",
        "src/commands/doctor.ts",
        "src/commands/help.tsx",
        "src/commands/init.ts",
        "src/commands/listen.ts",
        "src/commands/login.tsx",
        "src/commands/logout.tsx",
        "src/commands/mcp.ts",
        "src/commands/model.tsx",
        "src/commands/modelstatus.tsx",
        "src/commands/onboarding.tsx",
        "src/commands/pr_comments.ts",
        "src/commands/refreshCommands.ts",
        "src/commands/release-notes.ts",
        "src/commands/review.ts",
        "src/commands/terminalSetup.ts",
        "src/Tool.ts",
        "src/commands/resume.tsx",
        "src/commands/agents.tsx",
        "src/services/mcpClient.ts",
        "src/services/customCommands.ts",
        "src/query.ts",
        "src/utils/auth.ts"
      ],
      "dependents": [
        "src/commands/bug.tsx",
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/config.tsx",
        "src/commands/cost.ts",
        "src/commands/ctx_viz.ts",
        "src/commands/doctor.ts",
        "src/commands/help.tsx",
        "src/commands/init.ts",
        "src/commands/listen.ts",
        "src/commands/login.tsx",
        "src/commands/logout.tsx",
        "src/commands/mcp.ts",
        "src/commands/modelstatus.tsx",
        "src/commands/onboarding.tsx",
        "src/commands/pr_comments.ts",
        "src/commands/refreshCommands.ts",
        "src/commands/release-notes.ts",
        "src/commands/resume.tsx",
        "src/commands/review.ts",
        "src/commands/terminalSetup.ts",
        "src/components/Help.tsx",
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useUnifiedCompletion.ts",
        "src/screens/REPL.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/services/customCommands.ts",
        "src/services/mcpClient.ts",
        "src/utils/ask.tsx",
        "src/utils/messages.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ApproveApiKey.tsx",
      "relativePath": "src/components/ApproveApiKey.tsx",
      "name": "ApproveApiKey.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ApproveApiKey",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts",
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\AsciiLogo.tsx",
      "relativePath": "src/components/AsciiLogo.tsx",
      "name": "AsciiLogo.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "ASCII_LOGO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AsciiLogo",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/Logo.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\binary-feedback\\BinaryFeedback.tsx",
      "relativePath": "src/components/binary-feedback/BinaryFeedback.tsx",
      "name": "BinaryFeedback.tsx",
      "extension": ".tsx",
      "directory": "src/components/binary-feedback",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "React",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/useNotifyAfterTimeout",
          "imports": [
            "useNotifyAfterTimeout"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage",
            "BinaryFeedbackResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "NormalizedMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./BinaryFeedbackView",
          "imports": [
            "BinaryFeedbackView"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils.js",
          "imports": [
            "BinaryFeedbackChoose",
            "getBinaryFeedbackResultForChoice",
            "logBinaryFeedbackEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "BinaryFeedback",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useNotifyAfterTimeout.ts",
        "src/query.ts",
        "src/Tool.ts",
        "src/utils/messages.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\binary-feedback\\BinaryFeedbackOption.tsx",
      "relativePath": "src/components/binary-feedback/BinaryFeedbackOption.tsx",
      "name": "BinaryFeedbackOption.tsx",
      "extension": ".tsx",
      "directory": "src/components/binary-feedback",
      "level": 2,
      "imports": [
        {
          "source": "../../tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions/FileEditPermissionRequest/FileEditToolDiff",
          "imports": [
            "FileEditToolDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Message",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages.js",
          "imports": [
            "normalizeMessages",
            "NormalizedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions/FileWritePermissionRequest/FileWriteToolDiff",
          "imports": [
            "FileWriteToolDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "BinaryFeedbackOption",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/Message.tsx",
        "src/Tool.ts",
        "src/hooks/useTerminalSize.ts",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/query.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackView.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\binary-feedback\\BinaryFeedbackView.tsx",
      "relativePath": "src/components/binary-feedback/BinaryFeedbackView.tsx",
      "name": "BinaryFeedbackView.tsx",
      "extension": ".tsx",
      "directory": "src/components/binary-feedback",
      "level": 2,
      "imports": [
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option",
            "SelectProps"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink-link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "NormalizedMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./BinaryFeedbackOption",
          "imports": [
            "BinaryFeedbackOption"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./utils",
          "imports": [
            "BinaryFeedbackChoose"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "BinaryFeedbackChoice"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getOptions",
          "type": "named"
        },
        {
          "name": "BinaryFeedbackView",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/Tool.ts",
        "src/utils/messages.tsx",
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/query.ts",
        "src/components/binary-feedback/utils.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedback.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\binary-feedback\\utils.ts",
      "relativePath": "src/components/binary-feedback/utils.ts",
      "name": "utils.ts",
      "extension": ".ts",
      "directory": "src/components/binary-feedback",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlock",
            "ToolUseBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage",
            "BinaryFeedbackResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "MAIN_QUERY_TEMPERATURE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "isEqual",
            "zip"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/git",
          "imports": [
            "getGitState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "logBinaryFeedbackEvent",
          "type": "named"
        },
        {
          "name": "logBinaryFeedbackSamplingDecision",
          "type": "named"
        },
        {
          "name": "logBinaryFeedbackDisplayDecision",
          "type": "named"
        },
        {
          "name": "shouldUseBinaryFeedback",
          "type": "named"
        },
        {
          "name": "messagePairValidForBinaryFeedback",
          "type": "named"
        },
        {
          "name": "getBinaryFeedbackResultForChoice",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/services/claude.ts",
        "src/utils/git.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackView.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Bug.tsx",
      "relativePath": "src/components/Bug.tsx",
      "name": "Bug.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState",
            "useCallback",
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesGetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./TextInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError",
            "getInMemoryErrors"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/git",
          "imports": [
            "getGitState",
            "getIsGit",
            "GitRepoState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getAnthropicApiKey",
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/http",
          "imports": [
            "USER_AGENT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "API_ERROR_MESSAGE_PREFIX",
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/browser",
          "imports": [
            "openBrowser"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "GITHUB_ISSUES_REPO_URL"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Bug",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/messages.ts",
        "src/query.ts",
        "src/components/TextInput.tsx",
        "src/utils/log.ts",
        "src/utils/env.ts",
        "src/utils/git.ts",
        "src/hooks/useTerminalSize.ts",
        "src/utils/config.ts",
        "src/utils/http.ts",
        "src/constants/product.ts",
        "src/services/claude.ts",
        "src/utils/browser.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/commands/bug.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Config.tsx",
      "relativePath": "src/components/Config.tsx",
      "name": "Config.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "GlobalConfig",
            "saveGlobalConfig",
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Config",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/commands/config.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ConsoleOAuthFlow.tsx",
      "relativePath": "src/components/ConsoleOAuthFlow.tsx",
      "name": "ConsoleOAuthFlow.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useEffect",
            "useState",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Static",
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TextInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/oauth",
          "imports": [
            "OAuthService",
            "createAndStoreApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AsciiLogo",
          "imports": [
            "AsciiLogo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Spinner",
          "imports": [
            "SimpleSpinner"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Onboarding",
          "imports": [
            "WelcomeBox"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/notifier",
          "imports": [
            "sendNotification"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ConsoleOAuthFlow",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/TextInput.tsx",
        "src/services/oauth.ts",
        "src/utils/theme.ts",
        "src/components/AsciiLogo.tsx",
        "src/hooks/useTerminalSize.ts",
        "src/utils/log.ts",
        "src/utils/terminal.ts",
        "src/components/Spinner.tsx",
        "src/components/Onboarding.tsx",
        "src/constants/product.ts",
        "src/services/notifier.ts"
      ],
      "dependents": [
        "src/commands/login.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Cost.tsx",
      "relativePath": "src/components/Cost.tsx",
      "name": "Cost.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Cost",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/tools/WebSearchTool/WebSearchTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CostThresholdDialog.tsx",
      "relativePath": "src/components/CostThresholdDialog.tsx",
      "name": "CostThresholdDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "CostThresholdDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/utils/theme.ts",
        "src/components/Link.tsx"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\option-map.ts",
      "relativePath": "src/components/CustomSelect/option-map.ts",
      "name": "option-map.ts",
      "extension": ".ts",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./select",
          "imports": [
            "optionHeaderKey",
            "OptionHeader"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "OptionMap",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx"
      ],
      "dependents": [
        "src/components/CustomSelect/use-select-state.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\select-option.tsx",
      "relativePath": "src/components/CustomSelect/select-option.tsx",
      "name": "select-option.tsx",
      "extension": ".tsx",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "ReactNode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./theme",
          "imports": [
            "Theme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SelectOption",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/theme.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/CustomSelect/select.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\select.tsx",
      "relativePath": "src/components/CustomSelect/select.tsx",
      "name": "select.tsx",
      "extension": ".tsx",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "ReactNode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./select-option",
          "imports": [
            "SelectOption"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./theme",
          "imports": [
            "Theme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./use-select-state",
          "imports": [
            "useSelectState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./use-select",
          "imports": [
            "useSelect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "optionHeaderKey",
          "type": "named"
        },
        {
          "name": "Select",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select-option.tsx",
        "src/components/CustomSelect/theme.ts",
        "src/components/CustomSelect/use-select-state.ts",
        "src/components/CustomSelect/use-select.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/ApproveApiKey.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/CostThresholdDialog.tsx",
        "src/components/CustomSelect/option-map.ts",
        "src/components/CustomSelect/use-select-state.ts",
        "src/components/InvalidConfigDialog.tsx",
        "src/components/LogSelector.tsx",
        "src/components/MCPServerApprovalDialog.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/Onboarding.tsx",
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/permissions/toolUseOptions.ts",
        "src/components/TrustDialog.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\theme.ts",
      "relativePath": "src/components/CustomSelect/theme.ts",
      "name": "theme.ts",
      "extension": ".ts",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "BoxProps",
            "TextProps"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "Theme",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/CustomSelect/select-option.tsx",
        "src/components/CustomSelect/select.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\use-select-state.ts",
      "relativePath": "src/components/CustomSelect/use-select-state.ts",
      "name": "use-select-state.ts",
      "extension": ".ts",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "node:util",
          "imports": [
            "isDeepStrictEqual"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useReducer",
            "Reducer",
            "useCallback",
            "useMemo",
            "useState",
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./option-map",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./select",
          "imports": [
            "OptionHeader",
            "OptionSubtree"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "useSelectState",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/option-map.ts",
        "src/components/CustomSelect/select.tsx"
      ],
      "dependents": [
        "src/components/CustomSelect/select.tsx",
        "src/components/CustomSelect/use-select.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\CustomSelect\\use-select.ts",
      "relativePath": "src/components/CustomSelect/use-select.ts",
      "name": "use-select.ts",
      "extension": ".ts",
      "directory": "src/components/CustomSelect",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./use-select-state",
          "imports": [
            "SelectState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useSelect",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/use-select-state.ts"
      ],
      "dependents": [
        "src/components/CustomSelect/select.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\FallbackToolUseRejectedMessage.tsx",
      "relativePath": "src/components/FallbackToolUseRejectedMessage.tsx",
      "name": "FallbackToolUseRejectedMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FallbackToolUseRejectedMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MCPTool/MCPTool.tsx",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/tools/WebSearchTool/WebSearchTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\FileEditToolUpdatedMessage.tsx",
      "relativePath": "src/components/FileEditToolUpdatedMessage.tsx",
      "name": "FileEditToolUpdatedMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "relative"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileEditToolUpdatedMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/array.ts",
        "src/components/StructuredDiff.tsx",
        "src/utils/theme.ts",
        "src/utils/state.ts",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Help.tsx",
      "relativePath": "src/components/Help.tsx",
      "name": "Help.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND",
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/customCommands",
          "imports": [
            "getCustomCommandDirectories",
            "hasCustomCommands",
            "CustomCommandWithScope"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PressEnterToContinue",
          "imports": [
            "PressEnterToContinue"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Help",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/constants/product.ts",
        "src/services/customCommands.ts",
        "src/utils/theme.ts",
        "src/components/PressEnterToContinue.tsx",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/commands/help.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\HighlightedCode.tsx",
      "relativePath": "src/components/HighlightedCode.tsx",
      "name": "HighlightedCode.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "cli-highlight",
          "imports": [
            "highlight",
            "supportsLanguage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "HighlightedCode",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\InvalidConfigDialog.tsx",
      "relativePath": "src/components/InvalidConfigDialog.tsx",
      "name": "InvalidConfigDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Newline",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/errors",
          "imports": [
            "ConfigParseError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "showInvalidConfigDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/utils/errors.ts",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Link.tsx",
      "relativePath": "src/components/Link.tsx",
      "name": "Link.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink-link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Link",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/components/CostThresholdDialog.tsx",
        "src/components/TrustDialog.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Logo.tsx",
      "relativePath": "src/components/Logo.tsx",
      "name": "Logo.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "Newline"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getAnthropicApiKey",
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AsciiLogo",
          "imports": [
            "AsciiLogo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "WrappedClient"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MIN_LOGO_WIDTH",
          "type": "named"
        },
        {
          "name": "Logo",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/constants/product.ts",
        "src/utils/config.ts",
        "src/utils/state.ts",
        "src/components/AsciiLogo.tsx",
        "src/services/mcpClient.ts",
        "src/utils/model.ts",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/components/Onboarding.tsx",
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\LogSelector.tsx",
      "relativePath": "src/components/LogSelector.tsx",
      "name": "LogSelector.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/logs",
          "imports": [
            "LogOption"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "formatDate"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "LogSelector",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/types/logs.ts",
        "src/utils/theme.ts",
        "src/hooks/useTerminalSize.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/screens/LogList.tsx",
        "src/screens/ResumeConversation.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MCPServerApprovalDialog.tsx",
      "relativePath": "src/components/MCPServerApprovalDialog.tsx",
      "name": "MCPServerApprovalDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "saveCurrentProjectConfig",
            "getCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./MCPServerDialogCopy",
          "imports": [
            "MCPServerDialogCopy"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MCPServerApprovalDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/components/MCPServerDialogCopy.tsx",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/services/mcpServerApproval.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MCPServerDialogCopy.tsx",
      "relativePath": "src/components/MCPServerDialogCopy.tsx",
      "name": "MCPServerDialogCopy.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink-link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME",
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MCPServerDialogCopy",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/MCPServerApprovalDialog.tsx",
        "src/components/MCPServerMultiselectDialog.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MCPServerMultiselectDialog.tsx",
      "relativePath": "src/components/MCPServerMultiselectDialog.tsx",
      "name": "MCPServerMultiselectDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "MultiSelect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "saveCurrentProjectConfig",
            "getCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "partition"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./MCPServerDialogCopy",
          "imports": [
            "MCPServerDialogCopy"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MCPServerMultiselectDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/MCPServerDialogCopy.tsx",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/services/mcpServerApproval.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Message.tsx",
      "relativePath": "src/components/Message.tsx",
      "name": "Message.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage",
            "Message",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ContentBlock",
            "DocumentBlockParam",
            "ImageBlockParam",
            "TextBlockParam",
            "ThinkingBlockParam",
            "ToolResultBlockParam",
            "ToolUseBlockParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/UserToolResultMessage/UserToolResultMessage",
          "imports": [
            "UserToolResultMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/AssistantToolUseMessage",
          "imports": [
            "AssistantToolUseMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/AssistantTextMessage",
          "imports": [
            "AssistantTextMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/UserTextMessage",
          "imports": [
            "UserTextMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "NormalizedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/AssistantThinkingMessage",
          "imports": [
            "AssistantThinkingMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages/AssistantRedactedThinkingMessage",
          "imports": [
            "AssistantRedactedThinkingMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Message",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/Tool.ts",
        "src/utils/log.ts",
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/UserTextMessage.tsx",
        "src/utils/messages.tsx",
        "src/components/messages/AssistantThinkingMessage.tsx",
        "src/components/messages/AssistantRedactedThinkingMessage.tsx",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/MessageSelector.tsx",
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MessageResponse.tsx",
      "relativePath": "src/components/MessageResponse.tsx",
      "name": "MessageResponse.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MessageResponse",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/screens/REPL.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantBashOutputMessage.tsx",
      "relativePath": "src/components/messages/AssistantBashOutputMessage.tsx",
      "name": "AssistantBashOutputMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/BashTool/BashToolResultMessage",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantBashOutputMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/utils/messages.tsx"
      ],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantLocalCommandOutputMessage.tsx",
      "relativePath": "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
      "name": "AssistantLocalCommandOutputMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantLocalCommandOutputMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/messages.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantRedactedThinkingMessage.tsx",
      "relativePath": "src/components/messages/AssistantRedactedThinkingMessage.tsx",
      "name": "AssistantRedactedThinkingMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantRedactedThinkingMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantTextMessage.tsx",
      "relativePath": "src/components/messages/AssistantTextMessage.tsx",
      "name": "AssistantTextMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AssistantBashOutputMessage",
          "imports": [
            "AssistantBashOutputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AssistantLocalCommandOutputMessage",
          "imports": [
            "AssistantLocalCommandOutputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude.js",
          "imports": [
            "API_ERROR_MESSAGE_PREFIX",
            "CREDIT_BALANCE_TOO_LOW_ERROR_MESSAGE",
            "INVALID_API_KEY_ERROR_MESSAGE",
            "PROMPT_TOO_LONG_ERROR_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages.js",
          "imports": [
            "CANCEL_MESSAGE",
            "INTERRUPT_MESSAGE",
            "INTERRUPT_MESSAGE_FOR_TOOL_USE",
            "isEmptyMessageText",
            "NO_RESPONSE_REQUESTED"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/figures",
          "imports": [
            "BLACK_CIRCLE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/markdown",
          "imports": [
            "applyMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantTextMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/messages/AssistantBashOutputMessage.tsx",
        "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
        "src/utils/theme.ts",
        "src/components/Cost.tsx",
        "src/constants/figures.ts",
        "src/utils/markdown.ts",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantThinkingMessage.tsx",
      "relativePath": "src/components/messages/AssistantThinkingMessage.tsx",
      "name": "AssistantThinkingMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/markdown",
          "imports": [
            "applyMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ThinkingBlock",
            "ThinkingBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantThinkingMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/markdown.ts"
      ],
      "dependents": [
        "src/components/Message.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\AssistantToolUseMessage.tsx",
      "relativePath": "src/components/messages/AssistantToolUseMessage.tsx",
      "name": "AssistantToolUseMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../ToolUseLoader",
          "imports": [
            "ToolUseLoader"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/figures",
          "imports": [
            "BLACK_CIRCLE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/ThinkTool/ThinkTool",
          "imports": [
            "ThinkTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./AssistantThinkingMessage",
          "imports": [
            "AssistantThinkingMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TaskToolMessage",
          "imports": [
            "TaskToolMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AssistantToolUseMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/Tool.ts",
        "src/components/Cost.tsx",
        "src/components/ToolUseLoader.tsx",
        "src/utils/theme.ts",
        "src/constants/figures.ts",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/components/messages/AssistantThinkingMessage.tsx",
        "src/components/messages/TaskToolMessage.tsx"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\TaskProgressMessage.tsx",
      "relativePath": "src/components/messages/TaskProgressMessage.tsx",
      "name": "TaskProgressMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TaskProgressMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\TaskToolMessage.tsx",
      "relativePath": "src/components/messages/TaskToolMessage.tsx",
      "name": "TaskToolMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useEffect",
            "useState",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentLoader",
          "imports": [
            "getAgentByType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TaskToolMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/agentLoader.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantToolUseMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserBashInputMessage.tsx",
      "relativePath": "src/components/messages/UserBashInputMessage.tsx",
      "name": "UserBashInputMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserBashInputMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/messages.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/UserTextMessage.tsx",
        "src/utils/messages.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserCommandMessage.tsx",
      "relativePath": "src/components/messages/UserCommandMessage.tsx",
      "name": "UserCommandMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserCommandMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/messages.tsx"
      ],
      "dependents": [
        "src/components/messages/UserTextMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserKodingInputMessage.tsx",
      "relativePath": "src/components/messages/UserKodingInputMessage.tsx",
      "name": "UserKodingInputMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserKodingInputMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/messages.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/UserTextMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserPromptMessage.tsx",
      "relativePath": "src/components/messages/UserPromptMessage.tsx",
      "name": "UserPromptMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserPromptMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/log.ts",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/messages/UserTextMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserTextMessage.tsx",
      "relativePath": "src/components/messages/UserTextMessage.tsx",
      "name": "UserTextMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserBashInputMessage",
          "imports": [
            "UserBashInputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserKodingInputMessage",
          "imports": [
            "UserKodingInputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserCommandMessage",
          "imports": [
            "UserCommandMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserPromptMessage",
          "imports": [
            "UserPromptMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "NO_CONTENT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserTextMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/messages/UserBashInputMessage.tsx",
        "src/components/messages/UserKodingInputMessage.tsx",
        "src/components/messages/UserCommandMessage.tsx",
        "src/components/messages/UserPromptMessage.tsx",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolCanceledMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
      "name": "UserToolCanceledMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolCanceledMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolErrorMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
      "name": "UserToolErrorMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolResultBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolErrorMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolRejectMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
      "name": "UserToolRejectMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "useGetToolFromMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolRejectMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/query.ts",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolResultMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
      "name": "UserToolResultMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolResultBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../query",
          "imports": [
            "Message",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/messages",
          "imports": [
            "CANCEL_MESSAGE",
            "REJECT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserToolCanceledMessage",
          "imports": [
            "UserToolCanceledMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserToolErrorMessage",
          "imports": [
            "UserToolErrorMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserToolRejectMessage",
          "imports": [
            "UserToolRejectMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./UserToolSuccessMessage",
          "imports": [
            "UserToolSuccessMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolResultMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/query.ts",
        "src/utils/messages.tsx",
        "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx"
      ],
      "dependents": [
        "src/components/Message.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\UserToolSuccessMessage.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx",
      "name": "UserToolSuccessMessage.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolResultBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../query",
          "imports": [
            "Message",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "useGetToolFromMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UserToolSuccessMessage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/query.ts",
        "src/components/messages/UserToolResultMessage/utils.tsx"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\messages\\UserToolResultMessage\\utils.tsx",
      "relativePath": "src/components/messages/UserToolResultMessage/utils.tsx",
      "name": "utils.tsx",
      "extension": ".tsx",
      "directory": "src/components/messages/UserToolResultMessage",
      "level": 3,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useGetToolFromMessages",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/Tool.ts",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\MessageSelector.tsx",
      "relativePath": "src/components/MessageSelector.tsx",
      "name": "MessageSelector.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo",
            "useState",
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Message",
          "imports": [
            "MessageComponent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages.js",
          "imports": [
            "createUserMessage",
            "isEmptyMessageText",
            "isNotEmptyMessage",
            "normalizeMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MessageSelector",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/Message.tsx",
        "src/Tool.ts",
        "src/query.ts",
        "src/hooks/useExitOnCtrlCD.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModeIndicator.tsx",
      "relativePath": "src/components/ModeIndicator.tsx",
      "name": "ModeIndicator.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context/PermissionContext",
          "imports": [
            "usePermissionContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModeIndicator",
          "type": "named"
        },
        {
          "name": "CompactModeIndicator",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/context/PermissionContext.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModelConfig.tsx",
      "relativePath": "src/components/ModelConfig.tsx",
      "name": "ModelConfig.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState",
            "useCallback",
            "useEffect",
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "ModelPointerType",
            "setModelPointer"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ModelSelector",
          "imports": [
            "ModelSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ModelListManager",
          "imports": [
            "ModelListManager"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelConfig",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/model.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/components/ModelSelector.tsx",
        "src/components/ModelListManager.tsx"
      ],
      "dependents": [
        "src/commands/model.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModelListManager.tsx",
      "relativePath": "src/components/ModelListManager.tsx",
      "name": "ModelListManager.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "figures",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getGlobalConfig",
            "ModelPointerType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ModelSelector",
          "imports": [
            "ModelSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelListManager",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/model.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/components/ModelSelector.tsx"
      ],
      "dependents": [
        "src/components/ModelConfig.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModelSelector.tsx",
      "relativePath": "src/components/ModelSelector.tsx",
      "name": "ModelSelector.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useState",
            "useEffect",
            "useCallback",
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Newline"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "ProviderType",
            "ModelPointerType",
            "setAllPointersToModel",
            "setModelPointer"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/models",
          "imports": [
            "default",
            "providers"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TextInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "openai",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "fetchAnthropicModels",
            "verifyApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/openai",
          "imports": [
            "fetchCustomModels",
            "getModelFeatures"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/gpt5ConnectionTest",
          "imports": [
            "testGPT5Connection",
            "validateGPT5Config"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelSelector",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/utils/model.ts",
        "src/constants/product.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/constants/models.ts",
        "src/components/TextInput.tsx",
        "src/services/claude.ts",
        "src/services/openai.ts",
        "src/services/gpt5ConnectionTest.ts"
      ],
      "dependents": [
        "src/components/ModelConfig.tsx",
        "src/components/ModelListManager.tsx",
        "src/components/Onboarding.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ModelStatusDisplay.tsx",
      "relativePath": "src/components/ModelStatusDisplay.tsx",
      "name": "ModelStatusDisplay.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text",
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelStatusDisplay",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/model.ts",
        "src/utils/config.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/commands/modelstatus.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Onboarding.tsx",
      "relativePath": "src/components/Onboarding.tsx",
      "name": "Onboarding.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Newline",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "DEFAULT_GLOBAL_CONFIG",
            "ProviderType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "OrderedList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Logo",
          "imports": [
            "MIN_LOGO_WIDTH"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme",
            "ThemeNames"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PressEnterToContinue",
          "imports": [
            "PressEnterToContinue"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ModelSelector",
          "imports": [
            "ModelSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Onboarding",
          "type": "named"
        },
        {
          "name": "WelcomeBox",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/product.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/components/Logo.tsx",
        "src/components/CustomSelect/select.tsx",
        "src/components/StructuredDiff.tsx",
        "src/utils/theme.ts",
        "src/utils/terminal.ts",
        "src/components/PressEnterToContinue.tsx",
        "src/components/ModelSelector.tsx"
      ],
      "dependents": [
        "src/commands/onboarding.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\BashPermissionRequest\\BashPermissionRequest.tsx",
      "relativePath": "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
      "name": "BashPermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/BashPermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/usePermissionRequestLogging",
          "imports": [
            "UnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../permissions",
          "imports": [
            "savePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks",
          "imports": [
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequestTitle",
          "imports": [
            "PermissionRequestTitle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils",
          "imports": [
            "logUnaryPermissionEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../toolUseOptions",
          "imports": [
            "toolUseOptions"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "BashPermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/usePermissionRequestLogging.ts",
        "src/permissions.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/theme.ts",
        "src/components/permissions/hooks.ts",
        "src/components/permissions/PermissionRequestTitle.tsx",
        "src/components/permissions/utils.ts",
        "src/components/CustomSelect/select.tsx",
        "src/components/permissions/toolUseOptions.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FallbackPermissionRequest.tsx",
      "relativePath": "src/components/permissions/FallbackPermissionRequest.tsx",
      "name": "FallbackPermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PermissionRequestTitle.js",
          "imports": [
            "PermissionRequestTitle",
            "textColorForRiskScore"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../permissions",
          "imports": [
            "savePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/usePermissionRequestLogging.js",
          "imports": [
            "UnaryEvent",
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FallbackPermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/utils/theme.ts",
        "src/utils/unaryLogging.ts",
        "src/utils/env.ts",
        "src/utils/state.ts",
        "src/permissions.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FileEditPermissionRequest\\FileEditPermissionRequest.tsx",
      "relativePath": "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
      "name": "FileEditPermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FileEditPermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "../../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "basename",
            "extname"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/usePermissionRequestLogging.js",
          "imports": [
            "UnaryEvent",
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../permissions",
          "imports": [
            "savePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequestTitle.js",
          "imports": [
            "PermissionRequestTitle",
            "textColorForRiskScore"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FileEditToolDiff",
          "imports": [
            "FileEditToolDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/permissions/filesystem",
          "imports": [
            "pathInOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "highlight.js",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileEditPermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/permissions.ts",
        "src/utils/env.ts",
        "src/utils/theme.ts",
        "src/utils/unaryLogging.ts",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/hooks/useTerminalSize.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FileEditPermissionRequest\\FileEditToolDiff.tsx",
      "relativePath": "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
      "name": "FileEditToolDiff.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FileEditPermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "relative"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileEditToolDiff",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/StructuredDiff.tsx",
        "src/utils/theme.ts",
        "src/utils/array.ts",
        "src/utils/state.ts",
        "src/utils/diff.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FilesystemPermissionRequest\\FilesystemPermissionRequest.tsx",
      "relativePath": "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
      "name": "FilesystemPermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FilesystemPermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequestTitle.js",
          "imports": [
            "PermissionRequestTitle",
            "textColorForRiskScore"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequest.js",
          "imports": [
            "PermissionRequestProps",
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/usePermissionRequestLogging.js",
          "imports": [
            "UnaryEvent",
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../tools/NotebookReadTool/NotebookReadTool",
          "imports": [
            "NotebookReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FallbackPermissionRequest",
          "imports": [
            "FallbackPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/permissions/filesystem.js",
          "imports": [
            "grantWritePermissionForOriginalDir",
            "pathInOriginalCwd",
            "toAbsolutePath"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FilesystemPermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/utils/theme.ts",
        "src/utils/unaryLogging.ts",
        "src/utils/env.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FileWritePermissionRequest\\FileWritePermissionRequest.tsx",
      "relativePath": "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
      "name": "FileWritePermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FileWritePermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "basename",
            "extname"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequestTitle.js",
          "imports": [
            "PermissionRequestTitle",
            "textColorForRiskScore"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../permissions",
          "imports": [
            "savePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/usePermissionRequestLogging.js",
          "imports": [
            "UnaryEvent",
            "usePermissionRequestLogging"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FileWriteToolDiff",
          "imports": [
            "FileWriteToolDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "highlight.js",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileWritePermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CustomSelect/select.tsx",
        "src/utils/theme.ts",
        "src/utils/unaryLogging.ts",
        "src/utils/env.ts",
        "src/permissions.ts",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/hooks/useTerminalSize.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\FileWritePermissionRequest\\FileWriteToolDiff.tsx",
      "relativePath": "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
      "name": "FileWriteToolDiff.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions/FileWritePermissionRequest",
      "level": 3,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "extname",
            "relative"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/file",
          "imports": [
            "detectFileEncoding"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileWriteToolDiff",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/StructuredDiff.tsx",
        "src/utils/theme.ts",
        "src/utils/array.ts",
        "src/utils/state.ts",
        "src/utils/file.ts",
        "src/components/HighlightedCode.tsx",
        "src/utils/diff.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\hooks.ts",
      "relativePath": "src/components/permissions/hooks.ts",
      "name": "hooks.ts",
      "extension": ".ts",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/unaryLogging",
          "imports": [
            "logUnaryEvent",
            "CompletionType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/permissions/PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "usePermissionRequestLogging",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/unaryLogging.ts",
        "src/components/permissions/PermissionRequest.tsx",
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\PermissionRequest.tsx",
      "relativePath": "src/components/permissions/PermissionRequest.tsx",
      "name": "PermissionRequest.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FileEditPermissionRequest/FileEditPermissionRequest",
          "imports": [
            "FileEditPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./BashPermissionRequest/BashPermissionRequest",
          "imports": [
            "BashPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FallbackPermissionRequest",
          "imports": [
            "FallbackPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../hooks/useNotifyAfterTimeout",
          "imports": [
            "useNotifyAfterTimeout"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FileWritePermissionRequest/FileWritePermissionRequest",
          "imports": [
            "FileWritePermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/commands",
          "imports": [
            "CommandSubcommandPrefixResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./FilesystemPermissionRequest/FilesystemPermissionRequest",
          "imports": [
            "FilesystemPermissionRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools/NotebookReadTool/NotebookReadTool",
          "imports": [
            "NotebookReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "toolUseConfirmGetPrefix",
          "type": "named"
        },
        {
          "name": "PermissionRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/query.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/hooks/useNotifyAfterTimeout.ts",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/utils/commands.ts",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/permissions/hooks.ts",
        "src/components/permissions/utils.ts",
        "src/hooks/useCancelRequest.ts",
        "src/hooks/useCanUseTool.ts",
        "src/hooks/usePermissionRequestLogging.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\PermissionRequestTitle.tsx",
      "relativePath": "src/components/permissions/PermissionRequestTitle.tsx",
      "name": "PermissionRequestTitle.tsx",
      "extension": ".tsx",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "categoryForRiskScore",
          "type": "named"
        },
        {
          "name": "textColorForRiskScore",
          "type": "named"
        },
        {
          "name": "PermissionRiskScore",
          "type": "named"
        },
        {
          "name": "PermissionRequestTitle",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\toolUseOptions.ts",
      "relativePath": "src/components/permissions/toolUseOptions.ts",
      "name": "toolUseOptions.ts",
      "extension": ".ts",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "@inkjs/ui",
          "imports": [
            "Option"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PermissionRequest.js",
          "imports": [
            "ToolUseConfirm",
            "toolUseConfirmGetPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/commands",
          "imports": [
            "isUnsafeCompoundCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../CustomSelect/select",
          "imports": [
            "OptionSubtree"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "toolUseOptions",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/commands.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\permissions\\utils.ts",
      "relativePath": "src/components/permissions/utils.ts",
      "name": "utils.ts",
      "extension": ".ts",
      "directory": "src/components/permissions",
      "level": 2,
      "imports": [
        {
          "source": "../../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/unaryLogging",
          "imports": [
            "CompletionType",
            "logUnaryEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "logUnaryPermissionEvent",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts",
        "src/utils/unaryLogging.ts",
        "src/components/permissions/PermissionRequest.tsx"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\PressEnterToContinue.tsx",
      "relativePath": "src/components/PressEnterToContinue.tsx",
      "name": "PressEnterToContinue.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "PressEnterToContinue",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/Help.tsx",
        "src/components/Onboarding.tsx",
        "src/screens/Doctor.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\PromptInput.tsx",
      "relativePath": "src/components/PromptInput.tsx",
      "name": "PromptInput.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "sample"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/exampleCommands",
          "imports": [
            "getExampleCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "processUserInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useArrowKeyHistory",
          "imports": [
            "useArrowKeyHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useUnifiedCompletion",
          "imports": [
            "useUnifiedCompletion"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../history",
          "imports": [
            "addToHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TextInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "memo",
            "useCallback",
            "useEffect",
            "useMemo",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/tokens",
          "imports": [
            "countTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./SentryErrorBoundary",
          "imports": [
            "SentryErrorBoundary"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "SetToolJSXFn",
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./TokenWarning",
          "imports": [
            "TokenWarning",
            "WARNING_THRESHOLD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTerminalSize",
          "imports": [
            "useTerminalSize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager",
            "reloadModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "setTerminalTitle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands/terminalSetup",
          "imports": [
            "default",
            "isShiftEnterKeyBindingInstalled",
            "handleHashCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context/PermissionContext",
          "imports": [
            "usePermissionContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/utils/exampleCommands.ts",
        "src/query.ts",
        "src/utils/messages.tsx",
        "src/hooks/useArrowKeyHistory.ts",
        "src/hooks/useUnifiedCompletion.ts",
        "src/history.ts",
        "src/components/TextInput.tsx",
        "src/utils/tokens.ts",
        "src/components/SentryErrorBoundary.ts",
        "src/commands.ts",
        "src/Tool.ts",
        "src/components/TokenWarning.tsx",
        "src/hooks/useTerminalSize.ts",
        "src/utils/theme.ts",
        "src/utils/model.ts",
        "src/utils/config.ts",
        "src/utils/terminal.ts",
        "src/commands/terminalSetup.ts",
        "src/context/PermissionContext.tsx",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\SentryErrorBoundary.ts",
      "relativePath": "src/components/SentryErrorBoundary.ts",
      "name": "SentryErrorBoundary.ts",
      "extension": ".ts",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/sentry",
          "imports": [
            "captureException"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SentryErrorBoundary",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/sentry.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\Spinner.tsx",
      "relativePath": "src/components/Spinner.tsx",
      "name": "Spinner.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useEffect",
            "useRef",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "sample"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/sessionState",
          "imports": [
            "getSessionState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Spinner",
          "type": "named"
        },
        {
          "name": "SimpleSpinner",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/sessionState.ts"
      ],
      "dependents": [
        "src/components/ConsoleOAuthFlow.tsx",
        "src/screens/REPL.tsx",
        "src/utils/messages.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\StickerRequestForm.tsx",
      "relativePath": "src/components/StickerRequestForm.tsx",
      "name": "StickerRequestForm.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FormData",
          "type": "named"
        },
        {
          "name": "StickerRequestFormProps",
          "type": "named"
        },
        {
          "name": "StickerRequestForm",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/StickerRequestTool/StickerRequestTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\StructuredDiff.tsx",
      "relativePath": "src/components/StructuredDiff.tsx",
      "name": "StructuredDiff.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme",
            "ThemeNames"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useMemo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/format",
          "imports": [
            "wrapText"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "StructuredDiff",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/utils/format.tsx"
      ],
      "dependents": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/Onboarding.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\TextInput.tsx",
      "relativePath": "src/components/TextInput.tsx",
      "name": "TextInput.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useTextInput",
          "imports": [
            "useTextInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Key"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TextInput",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useTextInput.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/Bug.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/PromptInput.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\TodoItem.tsx",
      "relativePath": "src/components/TodoItem.tsx",
      "name": "TodoItem.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/todoStorage",
          "imports": [
            "TodoItemType"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "TodoItemProps",
          "type": "named"
        },
        {
          "name": "TodoItem",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/todoStorage.ts"
      ],
      "dependents": [
        "src/tools/TodoWriteTool/TodoWriteTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\TokenWarning.tsx",
      "relativePath": "src/components/TokenWarning.tsx",
      "name": "TokenWarning.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "WARNING_THRESHOLD",
          "type": "named"
        },
        {
          "name": "TokenWarning",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\ToolUseLoader.tsx",
      "relativePath": "src/components/ToolUseLoader.tsx",
      "name": "ToolUseLoader.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useInterval",
          "imports": [
            "useInterval"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/figures",
          "imports": [
            "BLACK_CIRCLE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ToolUseLoader",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useInterval.ts",
        "src/utils/theme.ts",
        "src/constants/figures.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantToolUseMessage.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\components\\TrustDialog.tsx",
      "relativePath": "src/components/TrustDialog.tsx",
      "name": "TrustDialog.tsx",
      "extension": ".tsx",
      "directory": "src/components",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./CustomSelect/select",
          "imports": [
            "Select"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "saveCurrentProjectConfig",
            "getCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useExitOnCtrlCD",
          "imports": [
            "useExitOnCtrlCD"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./Link",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TrustDialog",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/CustomSelect/select.tsx",
        "src/constants/product.ts",
        "src/hooks/useExitOnCtrlCD.ts",
        "src/utils/state.ts",
        "src/components/Link.tsx"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\claude-asterisk-ascii-art.tsx",
      "relativePath": "src/constants/claude-asterisk-ascii-art.tsx",
      "name": "claude-asterisk-ascii-art.tsx",
      "extension": ".tsx",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "largeAnimatedAray",
          "type": "named"
        },
        {
          "name": "smallAnimatedArray",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\figures.ts",
      "relativePath": "src/constants/figures.ts",
      "name": "figures.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "BLACK_CIRCLE",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/ToolUseLoader.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\macros.ts",
      "relativePath": "src/constants/macros.ts",
      "name": "macros.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [
        {
          "source": "module",
          "imports": [
            "createRequire"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MACRO",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/Bug.tsx",
        "src/components/Help.tsx",
        "src/components/Logo.tsx",
        "src/constants/prompts.ts",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/ProjectOnboarding.tsx",
        "src/screens/REPL.tsx",
        "src/utils/autoUpdater.ts",
        "src/utils/http.ts",
        "src/utils/log.ts",
        "src/utils/user.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\modelCapabilities.ts",
      "relativePath": "src/constants/modelCapabilities.ts",
      "name": "modelCapabilities.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [
        {
          "source": "../types/modelCapabilities",
          "imports": [
            "ModelCapabilities"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MODEL_CAPABILITIES_REGISTRY",
          "type": "named"
        },
        {
          "name": "inferModelCapabilities",
          "type": "named"
        },
        {
          "name": "getModelCapabilities",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/types/modelCapabilities.ts"
      ],
      "dependents": [
        "src/services/modelAdapterFactory.ts",
        "src/test/testAdapters.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\models.ts",
      "relativePath": "src/constants/models.ts",
      "name": "models.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "default",
          "type": "default"
        },
        {
          "name": "providers",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/ModelSelector.tsx",
        "src/services/claude.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\oauth.ts",
      "relativePath": "src/constants/oauth.ts",
      "name": "oauth.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "OAUTH_CONFIG",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/services/oauth.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\product.ts",
      "relativePath": "src/constants/product.ts",
      "name": "product.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "PRODUCT_NAME",
          "type": "named"
        },
        {
          "name": "PRODUCT_URL",
          "type": "named"
        },
        {
          "name": "PROJECT_FILE",
          "type": "named"
        },
        {
          "name": "PRODUCT_COMMAND",
          "type": "named"
        },
        {
          "name": "CONFIG_BASE_DIR",
          "type": "named"
        },
        {
          "name": "CONFIG_FILE",
          "type": "named"
        },
        {
          "name": "GITHUB_ISSUES_REPO_URL",
          "type": "named"
        },
        {
          "name": "ASCII_LOGO",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/commands/bug.tsx",
        "src/commands/ctx_viz.ts",
        "src/commands/doctor.ts",
        "src/commands/init.ts",
        "src/commands/mcp.ts",
        "src/components/AsciiLogo.tsx",
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Bug.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/Help.tsx",
        "src/components/Logo.tsx",
        "src/components/MCPServerDialogCopy.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/Onboarding.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/components/TrustDialog.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/entrypoints/cli.tsx",
        "src/permissions.ts",
        "src/ProjectOnboarding.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/BashTool/prompt.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/utils/autoUpdater.ts",
        "src/utils/commands.ts",
        "src/utils/debugLogger.ts",
        "src/utils/env.ts",
        "src/utils/http.ts",
        "src/utils/log.ts",
        "src/utils/PersistentShell.ts",
        "src/utils/style.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\prompts.ts",
      "relativePath": "src/constants/prompts.ts",
      "name": "prompts.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/git",
          "imports": [
            "getIsGit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages.js",
          "imports": [
            "INTERRUPT_MESSAGE",
            "INTERRUPT_MESSAGE_FOR_TOOL_USE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./product",
          "imports": [
            "PRODUCT_NAME",
            "PROJECT_FILE",
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getCLISyspromptPrefix",
          "type": "named"
        },
        {
          "name": "getSystemPrompt",
          "type": "named"
        },
        {
          "name": "getEnvInfo",
          "type": "named"
        },
        {
          "name": "getAgentPrompt",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts",
        "src/utils/git.ts",
        "src/utils/state.ts",
        "src/constants/product.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/commands/ctx_viz.ts",
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/ask.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\constants\\releaseNotes.ts",
      "relativePath": "src/constants/releaseNotes.ts",
      "name": "releaseNotes.ts",
      "extension": ".ts",
      "directory": "src/constants",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "RELEASE_NOTES",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/commands/release-notes.ts",
        "src/ProjectOnboarding.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\context\\PermissionContext.tsx",
      "relativePath": "src/context/PermissionContext.tsx",
      "name": "PermissionContext.tsx",
      "extension": ".tsx",
      "directory": "src/context",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "createContext",
            "useContext",
            "useState",
            "useCallback",
            "ReactNode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/PermissionMode",
          "imports": [
            "PermissionMode",
            "IPermissionContext",
            "getNextPermissionMode",
            "MODE_CONFIGS"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "PermissionProvider",
          "type": "named"
        },
        {
          "name": "usePermissionContext",
          "type": "named"
        },
        {
          "name": "usePermissionMode",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/types/PermissionMode.ts"
      ],
      "dependents": [
        "src/components/ModeIndicator.tsx",
        "src/components/PromptInput.tsx",
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\context.ts",
      "relativePath": "src/context.ts",
      "name": "context.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/style",
          "imports": [
            "getCodeStyle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize",
            "omit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/git",
          "imports": [
            "getIsGit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/ripgrep",
          "imports": [
            "ripGrep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs/promises",
          "imports": [
            "readFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/generators",
          "imports": [
            "lastX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/user",
          "imports": [
            "getGitEmail"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getClaudeFiles",
          "type": "named"
        },
        {
          "name": "setContext",
          "type": "named"
        },
        {
          "name": "removeContext",
          "type": "named"
        },
        {
          "name": "getReadme",
          "type": "named"
        },
        {
          "name": "getProjectDocs",
          "type": "named"
        },
        {
          "name": "getGitStatus",
          "type": "named"
        },
        {
          "name": "getContext",
          "type": "named"
        },
        {
          "name": "getDirectoryStructure",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/utils/style.ts",
        "src/utils/state.ts",
        "src/tools/lsTool/lsTool.tsx",
        "src/utils/git.ts",
        "src/utils/ripgrep.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/model.ts",
        "src/utils/generators.ts",
        "src/utils/user.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/ctx_viz.ts",
        "src/entrypoints/cli.tsx",
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/ask.tsx",
        "src/utils/autoCompactCore.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\cost-tracker.ts",
      "relativePath": "src/cost-tracker.ts",
      "name": "cost-tracker.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/format",
          "imports": [
            "formatDuration"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/log",
          "imports": [
            "SESSION_ID"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "addToTotalCost",
          "type": "named"
        },
        {
          "name": "getTotalCost",
          "type": "named"
        },
        {
          "name": "getTotalDuration",
          "type": "named"
        },
        {
          "name": "getTotalAPIDuration",
          "type": "named"
        },
        {
          "name": "formatTotalCost",
          "type": "named"
        },
        {
          "name": "useCostSummary",
          "type": "named"
        },
        {
          "name": "resetStateForTests",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/format.tsx",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands/cost.ts",
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/utils/ask.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\entrypoints\\cli.tsx",
      "relativePath": "src/entrypoints/cli.tsx",
      "name": "cli.tsx",
      "extension": ".tsx",
      "directory": "src/entrypoints",
      "level": 1,
      "imports": [
        {
          "source": "node:url",
          "imports": [
            "fileURLToPath"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:path",
          "imports": [
            "dirname",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/sentry",
          "imports": [
            "initSentry"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND",
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/shims/node",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "tty",
          "imports": [
            "ReadStream"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "openSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "RenderOptions"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../history",
          "imports": [
            "addToHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext",
            "setContext",
            "removeContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@commander-js/extra-typings",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/ask",
          "imports": [
            "ask"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions",
          "imports": [
            "hasPermissionsToUseTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools",
          "imports": [
            "getTools"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "getCurrentProjectConfig",
            "saveGlobalConfig",
            "saveCurrentProjectConfig",
            "getCustomApiKeyStatus",
            "normalizeApiKeyForConfig",
            "setConfigForCLI",
            "deleteConfigForCLI",
            "getConfigForCLI",
            "listConfigForCLI",
            "enableConfigs",
            "validateAndRepairAllGPT5Profiles"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "process",
          "imports": [
            "cwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "dateToFilename",
            "logError",
            "parseLogFilename"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/debugLogger",
          "imports": [
            "initDebugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Onboarding",
          "imports": [
            "Onboarding"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../screens/Doctor",
          "imports": [
            "Doctor"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/ApproveApiKey",
          "imports": [
            "ApproveApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/TrustDialog",
          "imports": [
            "TrustDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../screens/LogList",
          "imports": [
            "LogList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../screens/ResumeConversation",
          "imports": [
            "ResumeConversation"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "checkHasTrustDialogAccepted",
            "McpServerConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "isDefaultSlowAndCapableModel"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./mcp",
          "imports": [
            "startMCPServer"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd",
            "setCwd",
            "setOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "omit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "getCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "getNextAvailableLogForkNumber",
            "loadLogList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/conversationRecovery",
          "imports": [
            "loadMessagesFromLog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/cleanup",
          "imports": [
            "cleanupOldMessageFilesInBackground"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands/approvedTools",
          "imports": [
            "handleListApprovedTools",
            "handleRemoveApprovedTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "addMcpServer",
            "getMcpServer",
            "listMCPServers",
            "parseEnvVars",
            "removeMcpServer",
            "getClients",
            "ensureConfigScope"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpServerApproval",
          "imports": [
            "handleMcprcServerApprovals"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/exampleCommands",
          "imports": [
            "getExampleCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ansi-escapes",
          "imports": [
            "cursorShow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/autoUpdater",
          "imports": [
            "getLatestVersion",
            "assertMinVersion",
            "getUpdateCommandSuggestions"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "semver",
          "imports": [
            "gt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "CACHE_PATHS"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/PersistentShell",
          "imports": [
            "PersistentShell"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/InvalidConfigDialog",
          "imports": [
            "showInvalidConfigDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/errors",
          "imports": [
            "ConfigParseError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/permissions/filesystem",
          "imports": [
            "grantReadPermissionForOriginalDir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader.js",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../screens/REPL",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "readline",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../utils/autoUpdater",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../screens/REPL",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "completeOnboarding",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/sentry.ts",
        "src/constants/product.ts",
        "src/history.ts",
        "src/context.ts",
        "src/utils/ask.tsx",
        "src/permissions.ts",
        "src/tools.ts",
        "src/utils/config.ts",
        "src/utils/log.ts",
        "src/utils/debugLogger.ts",
        "src/components/Onboarding.tsx",
        "src/screens/Doctor.tsx",
        "src/components/ApproveApiKey.tsx",
        "src/components/TrustDialog.tsx",
        "src/screens/LogList.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/utils/model.ts",
        "src/entrypoints/mcp.ts",
        "src/utils/env.ts",
        "src/utils/state.ts",
        "src/commands.ts",
        "src/utils/conversationRecovery.ts",
        "src/utils/cleanup.ts",
        "src/commands/approvedTools.ts",
        "src/services/mcpClient.ts",
        "src/services/mcpServerApproval.tsx",
        "src/utils/exampleCommands.ts",
        "src/utils/autoUpdater.ts",
        "src/utils/PersistentShell.ts",
        "src/utils/terminal.ts",
        "src/components/InvalidConfigDialog.tsx",
        "src/utils/errors.ts",
        "src/utils/permissions/filesystem.ts",
        "src/constants/macros.ts",
        "src/utils/agentLoader.ts",
        "src/screens/REPL.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\entrypoints\\mcp.ts",
      "relativePath": "src/entrypoints/mcp.ts",
      "name": "mcp.ts",
      "extension": ".ts",
      "directory": "src/entrypoints",
      "level": 1,
      "imports": [
        {
          "source": "@modelcontextprotocol/sdk/server/index.js",
          "imports": [
            "Server"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/server/stdio.js",
          "imports": [
            "StdioServerTransport"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/types.js",
          "imports": [
            "CallToolRequestSchema",
            "CallToolResultSchema",
            "ListToolsRequestSchema",
            "ListToolsResultSchema",
            "ToolSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/TaskTool/TaskTool",
          "imports": [
            "TaskTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions",
          "imports": [
            "hasPermissionsToUseTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "setCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands/review",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/generators",
          "imports": [
            "lastX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "startMCPServer",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/TaskTool/TaskTool.tsx",
        "src/permissions.ts",
        "src/utils/state.ts",
        "src/utils/model.ts",
        "src/utils/log.ts",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/Tool.ts",
        "src/commands.ts",
        "src/commands/review.ts",
        "src/utils/generators.ts",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\history.ts",
      "relativePath": "src/history.ts",
      "name": "history.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getHistory",
          "type": "named"
        },
        {
          "name": "addToHistory",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx",
        "src/hooks/useArrowKeyHistory.ts",
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useApiKeyVerification.ts",
      "relativePath": "src/hooks/useApiKeyVerification.ts",
      "name": "useApiKeyVerification.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useCallback",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "verifyApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getAnthropicApiKey"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useApiKeyVerification",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/claude.ts",
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useArrowKeyHistory.ts",
      "relativePath": "src/hooks/useArrowKeyHistory.ts",
      "name": "useArrowKeyHistory.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../history",
          "imports": [
            "getHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useArrowKeyHistory",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/history.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useCancelRequest.ts",
      "relativePath": "src/hooks/useCancelRequest.ts",
      "name": "useCancelRequest.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/permissions/PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../screens/REPL",
          "imports": [
            "BinaryFeedbackContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "SetToolJSXFn"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "useCancelRequest",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/permissions/PermissionRequest.tsx",
        "src/screens/REPL.tsx",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useCanUseTool.ts",
      "relativePath": "src/hooks/useCanUseTool.ts",
      "name": "useCanUseTool.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../permissions",
          "imports": [
            "hasPermissionsToUseTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool",
            "inputSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/commands",
          "imports": [
            "getCommandSubcommandPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "REJECT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "ToolType",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/permissions/PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/errors",
          "imports": [
            "AbortError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/permissions.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/commands.ts",
        "src/utils/messages.tsx",
        "src/Tool.ts",
        "src/query.ts",
        "src/components/permissions/PermissionRequest.tsx",
        "src/utils/errors.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/permissions.ts",
        "src/query.ts",
        "src/screens/REPL.tsx",
        "src/utils/ask.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useDoublePress.ts",
      "relativePath": "src/hooks/useDoublePress.ts",
      "name": "useDoublePress.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "DOUBLE_PRESS_TIMEOUT_MS",
          "type": "named"
        },
        {
          "name": "useDoublePress",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/hooks/useExitOnCtrlCD.ts",
        "src/hooks/useTextInput.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useExitOnCtrlCD.ts",
      "relativePath": "src/hooks/useExitOnCtrlCD.ts",
      "name": "useExitOnCtrlCD.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./useDoublePress",
          "imports": [
            "useDoublePress"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useExitOnCtrlCD",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useDoublePress.ts"
      ],
      "dependents": [
        "src/commands/login.tsx",
        "src/components/ApproveApiKey.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Bug.tsx",
        "src/components/Config.tsx",
        "src/components/InvalidConfigDialog.tsx",
        "src/components/MCPServerApprovalDialog.tsx",
        "src/components/MCPServerMultiselectDialog.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/ModelConfig.tsx",
        "src/components/ModelListManager.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/ModelStatusDisplay.tsx",
        "src/components/Onboarding.tsx",
        "src/components/TrustDialog.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useInterval.ts",
      "relativePath": "src/hooks/useInterval.ts",
      "name": "useInterval.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect",
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useInterval",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/ToolUseLoader.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useLogMessages.ts",
      "relativePath": "src/hooks/useLogMessages.ts",
      "name": "useLogMessages.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "overwriteLog",
            "getMessagesPath"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useLogMessages",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useLogStartupTime.ts",
      "relativePath": "src/hooks/useLogStartupTime.ts",
      "name": "useLogStartupTime.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useLogStartupTime",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/screens/REPL.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useNotifyAfterTimeout.ts",
      "relativePath": "src/hooks/useNotifyAfterTimeout.ts",
      "name": "useNotifyAfterTimeout.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/notifier",
          "imports": [
            "sendNotification"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useNotifyAfterTimeout",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/notifier.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/permissions/PermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\usePermissionRequestLogging.ts",
      "relativePath": "src/hooks/usePermissionRequestLogging.ts",
      "name": "usePermissionRequestLogging.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/unaryLogging",
          "imports": [
            "logUnaryEvent",
            "CompletionType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/permissions/PermissionRequest",
          "imports": [
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "usePermissionRequestLogging",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/unaryLogging.ts",
        "src/components/permissions/PermissionRequest.tsx",
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useTerminalSize.ts",
      "relativePath": "src/hooks/useTerminalSize.ts",
      "name": "useTerminalSize.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useEffect",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useTerminalSize",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/Bug.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/LogSelector.tsx",
        "src/components/Message.tsx",
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/UserPromptMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/PromptInput.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useTextInput.ts",
      "relativePath": "src/hooks/useTextInput.ts",
      "name": "useTextInput.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Key"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./useDoublePress",
          "imports": [
            "useDoublePress"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/Cursor",
          "imports": [
            "Cursor"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/imagePaste.js",
          "imports": [
            "getImageFromClipboard",
            "CLIPBOARD_ERROR_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "useTextInput",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useDoublePress.ts",
        "src/utils/Cursor.ts"
      ],
      "dependents": [
        "src/components/TextInput.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\hooks\\useUnifiedCompletion.ts",
      "relativePath": "src/hooks/useUnifiedCompletion.ts",
      "name": "useUnifiedCompletion.ts",
      "extension": ".ts",
      "directory": "src/hooks",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "useState",
            "useCallback",
            "useEffect",
            "useRef"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "statSync",
            "readdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join",
            "dirname",
            "basename",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "getCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "getActiveAgents"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "glob",
          "imports": [
            "glob"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/fuzzyMatcher",
          "imports": [
            "matchCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/commonUnixCommands",
          "imports": [
            "getCommonSystemCommands",
            "getCommandPriority",
            "getEssentialCommands",
            "getMinimalFallbackCommands"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "fs",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "UnifiedSuggestion",
          "type": "named"
        },
        {
          "name": "useUnifiedCompletion",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/commands.ts",
        "src/utils/agentLoader.ts",
        "src/utils/model.ts",
        "src/utils/fuzzyMatcher.ts",
        "src/utils/commonUnixCommands.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\index.ts",
      "relativePath": "src/index.ts",
      "name": "index.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "module",
          "imports": [
            "createRequire"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./entrypoints/cli.js",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [],
      "dependencies": [],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\messages.ts",
      "relativePath": "src/messages.ts",
      "name": "messages.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "setMessagesGetter",
          "type": "named"
        },
        {
          "name": "getMessagesGetter",
          "type": "named"
        },
        {
          "name": "setMessagesSetter",
          "type": "named"
        },
        {
          "name": "getMessagesSetter",
          "type": "named"
        },
        {
          "name": "setModelConfigChangeHandler",
          "type": "named"
        },
        {
          "name": "triggerModelConfigChange",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/ctx_viz.ts",
        "src/commands/model.tsx",
        "src/components/Bug.tsx",
        "src/screens/REPL.tsx",
        "src/utils/autoCompactCore.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\permissions.ts",
      "relativePath": "src/permissions.ts",
      "name": "permissions.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "./hooks/useCanUseTool",
          "imports": [
            "CanUseToolFn"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/BashTool/BashTool",
          "imports": [
            "BashTool",
            "inputSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/commands",
          "imports": [
            "getCommandSubcommandPrefix",
            "splitCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/errors",
          "imports": [
            "AbortError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/permissions/filesystem",
          "imports": [
            "grantWritePermissionForOriginalDir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "bashToolCommandHasExactMatchPermission",
          "type": "named"
        },
        {
          "name": "bashToolCommandHasPermission",
          "type": "named"
        },
        {
          "name": "bashToolHasPermission",
          "type": "named"
        },
        {
          "name": "hasPermissionsToUseTool",
          "type": "named"
        },
        {
          "name": "savePermission",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/hooks/useCanUseTool.ts",
        "src/Tool.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/utils/commands.ts",
        "src/utils/errors.ts",
        "src/utils/log.ts",
        "src/utils/permissions/filesystem.ts",
        "src/utils/state.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useCanUseTool.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\ProjectOnboarding.tsx",
      "relativePath": "src/ProjectOnboarding.tsx",
      "name": "ProjectOnboarding.tsx",
      "extension": ".tsx",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@inkjs/ui",
          "imports": [
            "OrderedList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "getGlobalConfig",
            "saveCurrentProjectConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./commands/terminalSetup",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/releaseNotes",
          "imports": [
            "RELEASE_NOTES"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "semver",
          "imports": [
            "gt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/file",
          "imports": [
            "isDirEmpty"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants/product",
          "imports": [
            "PROJECT_FILE",
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "markProjectOnboardingComplete",
          "type": "named"
        },
        {
          "name": "ProjectOnboarding",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands/terminalSetup.ts",
        "src/utils/theme.ts",
        "src/constants/releaseNotes.ts",
        "src/utils/file.ts",
        "src/constants/macros.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/init.ts",
        "src/commands/terminalSetup.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\query.ts",
      "relativePath": "src/query.ts",
      "name": "query.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "APIAssistantMessage",
            "MessageParam",
            "ToolUseBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./types/common",
          "imports": [
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./components/binary-feedback/utils.js",
          "imports": [
            "messagePairValidForBinaryFeedback",
            "shouldUseBinaryFeedback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./hooks/useCanUseTool",
          "imports": [
            "CanUseToolFn"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/claude.js",
          "imports": [
            "formatSystemPromptWithContext",
            "queryLLM",
            "queryModel"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/generators",
          "imports": [
            "all"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/debugLogger",
          "imports": [
            "debugLogger",
            "markPhase",
            "getCurrentRequest",
            "logUserFriendly"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/model.js",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/messages.js",
          "imports": [
            "createAssistantMessage",
            "createProgressMessage",
            "createToolResultStopMessage",
            "createUserMessage",
            "FullToolUseResult",
            "INTERRUPT_MESSAGE",
            "INTERRUPT_MESSAGE_FOR_TOOL_USE",
            "NormalizedMessage",
            "normalizeMessagesForAPI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/toolExecutionController",
          "imports": [
            "createToolExecutionController"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils/autoCompactCore",
          "imports": [
            "checkAutoCompact"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "query",
          "type": "named"
        },
        {
          "name": "runToolUse",
          "type": "named"
        },
        {
          "name": "normalizeToolInput",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/hooks/useCanUseTool.ts",
        "src/services/systemReminder.ts",
        "src/utils/generators.ts",
        "src/utils/log.ts",
        "src/utils/debugLogger.ts",
        "src/utils/toolExecutionController.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/state.ts",
        "src/utils/autoCompactCore.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands.ts",
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/binary-feedback/utils.ts",
        "src/components/Bug.tsx",
        "src/components/Message.tsx",
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx",
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/components/PromptInput.tsx",
        "src/hooks/useCanUseTool.ts",
        "src/hooks/useLogMessages.ts",
        "src/messages.ts",
        "src/services/claude.ts",
        "src/services/vcr.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/ask.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/messageContextManager.ts",
        "src/utils/thinking.ts",
        "src/utils/tokens.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\screens\\Doctor.tsx",
      "relativePath": "src/screens/Doctor.tsx",
      "name": "Doctor.tsx",
      "extension": ".tsx",
      "directory": "src/screens",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useEffect",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text",
            "useInput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/PressEnterToContinue",
          "imports": [
            "PressEnterToContinue"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Doctor",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/components/PressEnterToContinue.tsx"
      ],
      "dependents": [
        "src/commands/doctor.ts",
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\screens\\LogList.tsx",
      "relativePath": "src/screens/LogList.tsx",
      "name": "LogList.tsx",
      "extension": ".tsx",
      "directory": "src/screens",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default",
            "useEffect",
            "useState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "CACHE_PATHS"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/LogSelector",
          "imports": [
            "LogSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/logs",
          "imports": [
            "LogOption",
            "LogListProps"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/log",
          "imports": [
            "loadLogList"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "LogList",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/components/LogSelector.tsx",
        "src/types/logs.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\screens\\REPL.tsx",
      "relativePath": "src/screens/REPL.tsx",
      "name": "REPL.tsx",
      "extension": ".tsx",
      "directory": "src/screens",
      "level": 1,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Newline",
            "Static",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../ProjectOnboarding.js",
          "imports": [
            "default",
            "markProjectOnboardingComplete"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/CostThresholdDialog",
          "imports": [
            "CostThresholdDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "useEffect",
            "useMemo",
            "useRef",
            "useState",
            "useCallback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Logo",
          "imports": [
            "Logo"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Message",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/MessageResponse",
          "imports": [
            "MessageResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/MessageSelector",
          "imports": [
            "MessageSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/permissions/PermissionRequest.js",
          "imports": [
            "PermissionRequest",
            "ToolUseConfirm"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/PromptInput",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Spinner",
          "imports": [
            "Spinner"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/prompts",
          "imports": [
            "getSystemPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../cost-tracker",
          "imports": [
            "getTotalCost",
            "useCostSummary"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useLogStartupTime",
          "imports": [
            "useLogStartupTime"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../history",
          "imports": [
            "addToHistory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useApiKeyVerification",
          "imports": [
            "useApiKeyVerification"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useCancelRequest",
          "imports": [
            "useCancelRequest"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useCanUseTool",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useLogMessages",
          "imports": [
            "useLogMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context/PermissionContext",
          "imports": [
            "PermissionProvider"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/ModeIndicator",
          "imports": [
            "ModeIndicator"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "setMessagesGetter",
            "setMessagesSetter",
            "setModelConfigChangeHandler"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query.js",
          "imports": [
            "AssistantMessage",
            "BinaryFeedbackResult",
            "MessageType",
            "ProgressMessage",
            "query"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/mcpClient",
          "imports": [
            "WrappedClient"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "getNextAvailableLogForkNumber"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages.js",
          "imports": [
            "getErroredToolUseMessages",
            "getInProgressToolUseIDs",
            "getLastAssistantMessageId",
            "getToolUseID",
            "getUnresolvedToolUseIDs",
            "INTERRUPT_MESSAGE",
            "isNotEmptyMessage",
            "NormalizedMessage",
            "normalizeMessages",
            "normalizeMessagesForAPI",
            "processUserInput",
            "reorderMessages",
            "extractTag",
            "createAssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager",
            "ModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal",
            "updateTerminalTitle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/binary-feedback/BinaryFeedback",
          "imports": [
            "BinaryFeedback"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/thinking",
          "imports": [
            "getMaxThinkingTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands/terminalSetup",
          "imports": [
            "handleHashCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/debugLogger",
          "imports": [
            "debugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "REPL",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/CostThresholdDialog.tsx",
        "src/commands.ts",
        "src/components/Logo.tsx",
        "src/components/Message.tsx",
        "src/components/MessageResponse.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/PromptInput.tsx",
        "src/components/Spinner.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/cost-tracker.ts",
        "src/hooks/useLogStartupTime.ts",
        "src/history.ts",
        "src/hooks/useApiKeyVerification.ts",
        "src/hooks/useCancelRequest.ts",
        "src/hooks/useCanUseTool.ts",
        "src/hooks/useLogMessages.ts",
        "src/context/PermissionContext.tsx",
        "src/components/ModeIndicator.tsx",
        "src/messages.ts",
        "src/services/mcpClient.ts",
        "src/Tool.ts",
        "src/utils/config.ts",
        "src/constants/macros.ts",
        "src/utils/log.ts",
        "src/utils/model.ts",
        "src/utils/terminal.ts",
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/utils/thinking.ts",
        "src/utils/state.ts",
        "src/commands/terminalSetup.ts",
        "src/utils/debugLogger.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/hooks/useCancelRequest.ts",
        "src/screens/ResumeConversation.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\screens\\ResumeConversation.tsx",
      "relativePath": "src/screens/ResumeConversation.tsx",
      "name": "ResumeConversation.tsx",
      "extension": ".tsx",
      "directory": "src/screens",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./REPL",
          "imports": [
            "REPL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/conversationRecovery",
          "imports": [
            "deserializeMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/LogSelector",
          "imports": [
            "LogSelector"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/logs",
          "imports": [
            "LogOption"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError",
            "getNextAvailableLogForkNumber"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "isDefaultSlowAndCapableModel"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ResumeConversation",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/screens/REPL.tsx",
        "src/utils/conversationRecovery.ts",
        "src/components/LogSelector.tsx",
        "src/types/logs.ts",
        "src/utils/log.ts",
        "src/Tool.ts",
        "src/commands.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/commands/resume.tsx",
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\adapters\\base.ts",
      "relativePath": "src/services/adapters/base.ts",
      "name": "base.ts",
      "extension": ".ts",
      "directory": "src/services/adapters",
      "level": 2,
      "imports": [
        {
          "source": "../../types/modelCapabilities",
          "imports": [
            "ModelCapabilities",
            "UnifiedRequestParams",
            "UnifiedResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/config",
          "imports": [
            "ModelProfile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelAPIAdapter",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/types/modelCapabilities.ts",
        "src/utils/config.ts",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/services/adapters/chatCompletions.ts",
        "src/services/adapters/responsesAPI.ts",
        "src/services/modelAdapterFactory.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\adapters\\chatCompletions.ts",
      "relativePath": "src/services/adapters/chatCompletions.ts",
      "name": "chatCompletions.ts",
      "extension": ".ts",
      "directory": "src/services/adapters",
      "level": 2,
      "imports": [
        {
          "source": "./base",
          "imports": [
            "ModelAPIAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../types/modelCapabilities",
          "imports": [
            "UnifiedRequestParams",
            "UnifiedResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ChatCompletionsAdapter",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/adapters/base.ts",
        "src/types/modelCapabilities.ts",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/services/modelAdapterFactory.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\adapters\\responsesAPI.ts",
      "relativePath": "src/services/adapters/responsesAPI.ts",
      "name": "responsesAPI.ts",
      "extension": ".ts",
      "directory": "src/services/adapters",
      "level": 2,
      "imports": [
        {
          "source": "./base",
          "imports": [
            "ModelAPIAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../types/modelCapabilities",
          "imports": [
            "UnifiedRequestParams",
            "UnifiedResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ResponsesAPIAdapter",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/adapters/base.ts",
        "src/types/modelCapabilities.ts",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/services/modelAdapterFactory.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\browserMocks.ts",
      "relativePath": "src/services/browserMocks.ts",
      "name": "browserMocks.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "mockWindow",
          "type": "named"
        },
        {
          "name": "mockNavigator",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\claude.ts",
      "relativePath": "src/services/claude.ts",
      "name": "claude.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/shims/node",
          "imports": [],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk",
          "imports": [
            "default",
            "APIConnectionError",
            "APIError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/bedrock-sdk",
          "imports": [
            "AnthropicBedrock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/vertex-sdk",
          "imports": [
            "AnthropicVertex"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/beta/messages/messages.mjs",
          "imports": [
            "BetaUsage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "createHash",
            "randomUUID",
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "dotenv/config",
          "imports": [],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../cost-tracker",
          "imports": [
            "addToTotalCost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/models",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getAnthropicApiKey",
            "getOrCreateUserID",
            "getGlobalConfig",
            "ModelProfile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getProjectDocs"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError",
            "SESSION_ID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/http",
          "imports": [
            "USER_AGENT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "createAssistantAPIErrorMessage",
            "normalizeContentFromAPI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/tokens",
          "imports": [
            "countTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./vcr",
          "imports": [
            "withVCR"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/debugLogger",
          "imports": [
            "debugLogger",
            "markPhase",
            "getCurrentRequest",
            "logLLMInteraction",
            "logSystemPromptConstruction",
            "logErrorWithDiagnosis"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messageContextManager",
          "imports": [
            "MessageContextManager",
            "createRetentionStrategy"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod-to-json-schema",
          "imports": [
            "zodToJsonSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/lib/BetaMessageStream.mjs",
          "imports": [
            "BetaMessageStream"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./modelAdapterFactory",
          "imports": [
            "ModelAdapterFactory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/modelCapabilities",
          "imports": [
            "UnifiedRequestParams"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./responseStateManager",
          "imports": [
            "responseStateManager",
            "getConversationId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "APIMessage",
            "MessageParam",
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/model",
          "imports": [
            "USE_BEDROCK",
            "USE_VERTEX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/prompts",
          "imports": [
            "getCLISyspromptPrefix"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getVertexRegionForModel"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "openai",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "openai/lib/ChatCompletionStream",
          "imports": [
            "ChatCompletionStream"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "@anthropic-ai/sdk/resources/messages/messages",
          "imports": [
            "ContentBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "nanoid",
          "imports": [
            "nanoid"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./openai",
          "imports": [
            "getCompletionWithProfile",
            "getGPT5CompletionWithProfile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/thinking",
          "imports": [
            "getReasoningEffort"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./systemReminder",
          "imports": [
            "generateSystemReminders"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./openai",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "generateKodeContext",
          "type": "named"
        },
        {
          "name": "refreshKodeContext",
          "type": "named"
        },
        {
          "name": "API_ERROR_MESSAGE_PREFIX",
          "type": "named"
        },
        {
          "name": "PROMPT_TOO_LONG_ERROR_MESSAGE",
          "type": "named"
        },
        {
          "name": "CREDIT_BALANCE_TOO_LOW_ERROR_MESSAGE",
          "type": "named"
        },
        {
          "name": "INVALID_API_KEY_ERROR_MESSAGE",
          "type": "named"
        },
        {
          "name": "NO_CONTENT_MESSAGE",
          "type": "named"
        },
        {
          "name": "MAIN_QUERY_TEMPERATURE",
          "type": "named"
        },
        {
          "name": "fetchAnthropicModels",
          "type": "named"
        },
        {
          "name": "verifyApiKey",
          "type": "named"
        },
        {
          "name": "getAnthropicClient",
          "type": "named"
        },
        {
          "name": "resetAnthropicClient",
          "type": "named"
        },
        {
          "name": "userMessageToMessageParam",
          "type": "named"
        },
        {
          "name": "assistantMessageToMessageParam",
          "type": "named"
        },
        {
          "name": "queryLLM",
          "type": "named"
        },
        {
          "name": "formatSystemPromptWithContext",
          "type": "named"
        },
        {
          "name": "queryModel",
          "type": "named"
        },
        {
          "name": "queryQuick",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/cost-tracker.ts",
        "src/constants/models.ts",
        "src/query.ts",
        "src/Tool.ts",
        "src/utils/config.ts",
        "src/context.ts",
        "src/utils/log.ts",
        "src/utils/http.ts",
        "src/utils/messages.tsx",
        "src/utils/tokens.ts",
        "src/services/vcr.ts",
        "src/utils/debugLogger.ts",
        "src/utils/messageContextManager.ts",
        "src/utils/model.ts",
        "src/services/modelAdapterFactory.ts",
        "src/types/modelCapabilities.ts",
        "src/services/responseStateManager.ts",
        "src/constants/prompts.ts",
        "src/services/openai.ts",
        "src/utils/thinking.ts",
        "src/services/systemReminder.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/compact.ts",
        "src/components/binary-feedback/utils.ts",
        "src/components/Bug.tsx",
        "src/components/messages/UserTextMessage.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/PromptInput.tsx",
        "src/hooks/useApiKeyVerification.ts",
        "src/services/oauth.ts",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/BashTool/utils.ts",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/commands.ts",
        "src/utils/exampleCommands.ts",
        "src/utils/messages.tsx",
        "src/utils/terminal.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\customCommands.ts",
      "relativePath": "src/services/customCommands.ts",
      "name": "customCommands.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "MessageParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "execFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "util",
          "imports": [
            "promisify"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "executeBashCommands",
          "type": "named"
        },
        {
          "name": "resolveFileReferences",
          "type": "named"
        },
        {
          "name": "CustomCommandFrontmatter",
          "type": "named"
        },
        {
          "name": "CustomCommandWithScope",
          "type": "named"
        },
        {
          "name": "CustomCommandFile",
          "type": "named"
        },
        {
          "name": "parseFrontmatter",
          "type": "named"
        },
        {
          "name": "loadCustomCommands",
          "type": "named"
        },
        {
          "name": "reloadCustomCommands",
          "type": "named"
        },
        {
          "name": "getCustomCommandDirectories",
          "type": "named"
        },
        {
          "name": "hasCustomCommands",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/commands/refreshCommands.ts",
        "src/commands.ts",
        "src/components/Help.tsx",
        "src/utils/messages.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\fileFreshness.ts",
      "relativePath": "src/services/fileFreshness.ts",
      "name": "fileFreshness.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "statSync",
            "existsSync",
            "watchFile",
            "unwatchFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/systemReminder",
          "imports": [
            "emitReminderEvent",
            "systemReminderService"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentStorage",
          "imports": [
            "getAgentFilePath"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "fileFreshnessService",
          "type": "named"
        },
        {
          "name": "recordFileRead",
          "type": "named"
        },
        {
          "name": "recordFileEdit",
          "type": "named"
        },
        {
          "name": "checkFileFreshness",
          "type": "named"
        },
        {
          "name": "generateFileModificationReminder",
          "type": "named"
        },
        {
          "name": "resetFileFreshnessSession",
          "type": "named"
        },
        {
          "name": "startWatchingTodoFile",
          "type": "named"
        },
        {
          "name": "stopWatchingTodoFile",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/systemReminder.ts",
        "src/utils/agentStorage.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/fileRecoveryCore.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\gpt5ConnectionTest.ts",
      "relativePath": "src/services/gpt5ConnectionTest.ts",
      "name": "gpt5ConnectionTest.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "./openai",
          "imports": [
            "getModelFeatures"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ConnectionTestResult",
          "type": "named"
        },
        {
          "name": "GPT5TestConfig",
          "type": "named"
        },
        {
          "name": "testGPT5Connection",
          "type": "named"
        },
        {
          "name": "validateGPT5Config",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/openai.ts"
      ],
      "dependents": [
        "src/components/ModelSelector.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\mcpClient.ts",
      "relativePath": "src/services/mcpClient.ts",
      "name": "mcpClient.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "zipObject"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "getCurrentProjectConfig",
            "McpServerConfig",
            "saveCurrentProjectConfig",
            "getGlobalConfig",
            "saveGlobalConfig",
            "getMcprcConfig",
            "addMcprcServerForTesting",
            "removeMcprcServerForTesting"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ImageBlockParam",
            "MessageParam",
            "ToolResultBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/client/index.js",
          "imports": [
            "Client"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/client/stdio.js",
          "imports": [
            "StdioClientTransport"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/client/sse.js",
          "imports": [
            "SSEClientTransport"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@modelcontextprotocol/sdk/types.js",
          "imports": [
            "CallToolResultSchema",
            "ClientRequest",
            "ListPromptsResult",
            "ListPromptsResultSchema",
            "ListToolsResult",
            "ListToolsResultSchema",
            "Result",
            "ResultSchema"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize",
            "pickBy"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../tools/MCPTool/MCPTool",
          "imports": [
            "MCPTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logMCPError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product.js",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "parseEnvVars",
          "type": "named"
        },
        {
          "name": "ensureConfigScope",
          "type": "named"
        },
        {
          "name": "addMcpServer",
          "type": "named"
        },
        {
          "name": "removeMcpServer",
          "type": "named"
        },
        {
          "name": "listMCPServers",
          "type": "named"
        },
        {
          "name": "getMcpServer",
          "type": "named"
        },
        {
          "name": "getMcprcServerStatus",
          "type": "named"
        },
        {
          "name": "getClients",
          "type": "named"
        },
        {
          "name": "getMCPTools",
          "type": "named"
        },
        {
          "name": "getMCPCommands",
          "type": "named"
        },
        {
          "name": "runCommand",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/utils/json.ts",
        "src/Tool.ts",
        "src/tools/MCPTool/MCPTool.tsx",
        "src/utils/log.ts",
        "src/commands.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/mcp.ts",
        "src/commands.ts",
        "src/components/Logo.tsx",
        "src/entrypoints/cli.tsx",
        "src/screens/REPL.tsx",
        "src/services/mcpServerApproval.tsx",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\mcpServerApproval.tsx",
      "relativePath": "src/services/mcpServerApproval.tsx",
      "name": "mcpServerApproval.tsx",
      "extension": ".tsx",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "render"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/MCPServerMultiselectDialog",
          "imports": [
            "MCPServerMultiselectDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/MCPServerApprovalDialog",
          "imports": [
            "MCPServerApprovalDialog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./mcpClient",
          "imports": [
            "getMcprcServerStatus"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getMcprcConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "handleMcprcServerApprovals",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/MCPServerMultiselectDialog.tsx",
        "src/components/MCPServerApprovalDialog.tsx",
        "src/services/mcpClient.ts",
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\mentionProcessor.ts",
      "relativePath": "src/services/mentionProcessor.ts",
      "name": "mentionProcessor.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "./systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/agentLoader",
          "imports": [
            "getAvailableAgentTypes"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MentionContext",
          "type": "named"
        },
        {
          "name": "ProcessedMentions",
          "type": "named"
        },
        {
          "name": "mentionProcessor",
          "type": "named"
        },
        {
          "name": "processMentions",
          "type": "named"
        },
        {
          "name": "clearMentionCache",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/systemReminder.ts",
        "src/utils/agentLoader.ts",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/utils/messages.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\modelAdapterFactory.ts",
      "relativePath": "src/services/modelAdapterFactory.ts",
      "name": "modelAdapterFactory.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "./adapters/base",
          "imports": [
            "ModelAPIAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./adapters/responsesAPI",
          "imports": [
            "ResponsesAPIAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./adapters/chatCompletions",
          "imports": [
            "ChatCompletionsAdapter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/modelCapabilities",
          "imports": [
            "getModelCapabilities"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "ModelProfile",
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/modelCapabilities",
          "imports": [
            "ModelCapabilities"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ModelAdapterFactory",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/adapters/base.ts",
        "src/services/adapters/responsesAPI.ts",
        "src/services/adapters/chatCompletions.ts",
        "src/constants/modelCapabilities.ts",
        "src/utils/config.ts",
        "src/types/modelCapabilities.ts"
      ],
      "dependents": [
        "src/services/claude.ts",
        "src/test/testAdapters.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\notifier.ts",
      "relativePath": "src/services/notifier.ts",
      "name": "notifier.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "sendNotification",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/components/ConsoleOAuthFlow.tsx",
        "src/hooks/useNotifyAfterTimeout.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\oauth.ts",
      "relativePath": "src/services/oauth.ts",
      "name": "oauth.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "http",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "http",
          "imports": [
            "IncomingMessage",
            "ServerResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "url",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/oauth",
          "imports": [
            "OAUTH_CONFIG"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/browser",
          "imports": [
            "openBrowser"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./claude",
          "imports": [
            "resetAnthropicClient"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config.js",
          "imports": [
            "AccountInfo",
            "getGlobalConfig",
            "saveGlobalConfig",
            "normalizeApiKeyForConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "OAuthService",
          "type": "named"
        },
        {
          "name": "createAndStoreApiKey",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/oauth.ts",
        "src/utils/browser.ts",
        "src/utils/log.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/components/ConsoleOAuthFlow.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\openai.ts",
      "relativePath": "src/services/openai.ts",
      "name": "openai.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "openai",
          "imports": [
            "OpenAI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "getGlobalConfig",
            "GlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "undici",
          "imports": [
            "ProxyAgent",
            "fetch",
            "Response"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/sessionState",
          "imports": [
            "setSessionState",
            "getSessionState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/debugLogger",
          "imports": [
            "debugLogger",
            "getCurrentRequest",
            "logAPIError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getGPT5CompletionWithProfile",
          "type": "named"
        },
        {
          "name": "getModelFeatures",
          "type": "named"
        },
        {
          "name": "applyModelSpecificTransformations",
          "type": "named"
        },
        {
          "name": "getCompletionWithProfile",
          "type": "named"
        },
        {
          "name": "createStreamProcessor",
          "type": "named"
        },
        {
          "name": "streamCompletion",
          "type": "named"
        },
        {
          "name": "callGPT5ResponsesAPI",
          "type": "named"
        },
        {
          "name": "fetchCustomModels",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts",
        "src/utils/sessionState.ts",
        "src/utils/debugLogger.ts"
      ],
      "dependents": [
        "src/components/ModelSelector.tsx",
        "src/services/claude.ts",
        "src/services/gpt5ConnectionTest.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\responseStateManager.ts",
      "relativePath": "src/services/responseStateManager.ts",
      "name": "responseStateManager.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "responseStateManager",
          "type": "named"
        },
        {
          "name": "getConversationId",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/services/claude.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\sentry.ts",
      "relativePath": "src/services/sentry.ts",
      "name": "sentry.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "initSentry",
          "type": "named"
        },
        {
          "name": "captureException",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/SentryErrorBoundary.ts",
        "src/entrypoints/cli.tsx",
        "src/utils/log.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\systemReminder.ts",
      "relativePath": "src/services/systemReminder.ts",
      "name": "systemReminder.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "../utils/todoStorage",
          "imports": [
            "getTodos",
            "TodoItem"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ReminderMessage",
          "type": "named"
        },
        {
          "name": "systemReminderService",
          "type": "named"
        },
        {
          "name": "generateSystemReminders",
          "type": "named"
        },
        {
          "name": "generateFileChangeReminder",
          "type": "named"
        },
        {
          "name": "emitReminderEvent",
          "type": "named"
        },
        {
          "name": "resetReminderSession",
          "type": "named"
        },
        {
          "name": "getReminderSessionState",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/todoStorage.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/query.ts",
        "src/services/claude.ts",
        "src/services/fileFreshness.ts",
        "src/services/mentionProcessor.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\services\\vcr.ts",
      "relativePath": "src/services/vcr.ts",
      "name": "vcr.ts",
      "extension": ".ts",
      "directory": "src/services",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "createHash",
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "mkdirSync",
            "readFileSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "AssistantMessage",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "mapValues"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ContentBlock"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "withVCR",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/env.ts",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/services/claude.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\test\\testAdapters.ts",
      "relativePath": "src/test/testAdapters.ts",
      "name": "testAdapters.ts",
      "extension": ".ts",
      "directory": "src/test",
      "level": 1,
      "imports": [
        {
          "source": "../services/modelAdapterFactory",
          "imports": [
            "ModelAdapterFactory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/modelCapabilities",
          "imports": [
            "getModelCapabilities"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/config",
          "imports": [
            "ModelProfile"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [],
      "dependencies": [
        "src/services/modelAdapterFactory.ts",
        "src/constants/modelCapabilities.ts",
        "src/utils/config.ts"
      ],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\Tool.ts",
      "relativePath": "src/Tool.ts",
      "name": "Tool.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ToolUseContext",
          "type": "named"
        },
        {
          "name": "ExtendedToolUseContext",
          "type": "named"
        },
        {
          "name": "ValidationResult",
          "type": "named"
        },
        {
          "name": "Tool",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/commands/ctx_viz.ts",
        "src/commands.ts",
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Message.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx",
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/components/PromptInput.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useCancelRequest.ts",
        "src/hooks/useCanUseTool.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/screens/REPL.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/services/adapters/base.ts",
        "src/services/adapters/chatCompletions.ts",
        "src/services/adapters/responsesAPI.ts",
        "src/services/claude.ts",
        "src/services/mcpClient.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MCPTool/MCPTool.tsx",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/tools/StickerRequestTool/StickerRequestTool.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/tools/WebSearchTool/WebSearchTool.tsx",
        "src/tools.ts",
        "src/utils/ask.tsx",
        "src/utils/conversationRecovery.ts",
        "src/utils/messages.tsx",
        "src/utils/toolExecutionController.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\ArchitectTool\\ArchitectTool.tsx",
      "relativePath": "src/tools/ArchitectTool/ArchitectTool.tsx",
      "name": "ArchitectTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/ArchitectTool",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlock"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "Message",
            "query"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/generators",
          "imports": [
            "lastX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "createUserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "ARCHITECT_SYSTEM_PROMPT",
            "DESCRIPTION"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ArchitectTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/HighlightedCode.tsx",
        "src/context.ts",
        "src/query.ts",
        "src/utils/generators.ts",
        "src/utils/messages.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/ArchitectTool/prompt.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\ArchitectTool\\prompt.ts",
      "relativePath": "src/tools/ArchitectTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/ArchitectTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "ARCHITECT_SYSTEM_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/ArchitectTool/ArchitectTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\AskExpertModelTool\\AskExpertModelTool.tsx",
      "relativePath": "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
      "name": "AskExpertModelTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/AskExpertModelTool",
      "level": 2,
      "imports": [
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "createUserMessage",
            "createAssistantMessage",
            "INTERRUPT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/expertChatStorage",
          "imports": [
            "createExpertChatSession",
            "loadExpertChatSession",
            "getSessionMessages",
            "addMessageToSession"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "queryLLM"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/debugLogger",
          "imports": [
            "debugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/markdown",
          "imports": [
            "applyMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "inputSchema",
          "type": "named"
        },
        {
          "name": "AskExpertModelTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/utils/model.ts",
        "src/utils/theme.ts",
        "src/utils/messages.tsx",
        "src/utils/log.ts",
        "src/utils/expertChatStorage.ts",
        "src/services/claude.ts",
        "src/utils/debugLogger.ts",
        "src/utils/markdown.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\BashTool.tsx",
      "relativePath": "src/tools/BashTool/BashTool.tsx",
      "name": "BashTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "relative",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/commands",
          "imports": [
            "splitCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file",
          "imports": [
            "isInDirectory"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/PersistentShell",
          "imports": [
            "PersistentShell"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd",
            "getOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./BashToolResultMessage",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "BANNED_COMMANDS",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "formatOutput",
            "getCommandFilePaths"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "inputSchema",
          "type": "named"
        },
        {
          "name": "BashTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/constants/product.ts",
        "src/services/claude.ts",
        "src/Tool.ts",
        "src/utils/commands.ts",
        "src/utils/file.ts",
        "src/utils/log.ts",
        "src/utils/PersistentShell.ts",
        "src/utils/state.ts",
        "src/utils/config.ts",
        "src/utils/model.ts",
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/tools/BashTool/prompt.ts",
        "src/tools/BashTool/utils.ts"
      ],
      "dependents": [
        "src/commands/review.ts",
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/constants/prompts.ts",
        "src/entrypoints/mcp.ts",
        "src/hooks/useCanUseTool.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts",
        "src/utils/messages.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\BashToolResultMessage.tsx",
      "relativePath": "src/tools/BashTool/BashToolResultMessage.tsx",
      "name": "BashToolResultMessage.tsx",
      "extension": ".tsx",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./OutputLine",
          "imports": [
            "OutputLine"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./BashTool",
          "imports": [
            "BashOut"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [
        "src/tools/BashTool/OutputLine.tsx",
        "src/utils/theme.ts",
        "src/tools/BashTool/BashTool.tsx"
      ],
      "dependents": [
        "src/components/messages/AssistantBashOutputMessage.tsx",
        "src/tools/BashTool/BashTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\OutputLine.tsx",
      "relativePath": "src/tools/BashTool/OutputLine.tsx",
      "name": "OutputLine.tsx",
      "extension": ".tsx",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "MAX_RENDERED_LINES"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "OutputLine",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/theme.ts",
        "src/tools/BashTool/prompt.ts"
      ],
      "dependents": [
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/tools/MCPTool/MCPTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\prompt.ts",
      "relativePath": "src/tools/BashTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "../../constants/product",
          "imports": [
            "PRODUCT_NAME",
            "PRODUCT_URL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../TaskTool/constants",
          "imports": [
            "TASK_TOOL_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GlobTool/prompt",
          "imports": [
            "GLOB_TOOL_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GrepTool/prompt",
          "imports": [
            "GREP_TOOL_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MAX_OUTPUT_LENGTH",
          "type": "named"
        },
        {
          "name": "MAX_RENDERED_LINES",
          "type": "named"
        },
        {
          "name": "BANNED_COMMANDS",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/product.ts",
        "src/tools/TaskTool/constants.ts",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/GlobTool/prompt.ts",
        "src/tools/GrepTool/prompt.ts",
        "src/tools/lsTool/lsTool.tsx"
      ],
      "dependents": [
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/BashTool/OutputLine.tsx",
        "src/tools/BashTool/utils.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\BashTool\\utils.ts",
      "relativePath": "src/tools/BashTool/utils.ts",
      "name": "utils.ts",
      "extension": ".ts",
      "directory": "src/tools/BashTool",
      "level": 2,
      "imports": [
        {
          "source": "../../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages",
          "imports": [
            "extractTag"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "MAX_OUTPUT_LENGTH"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "formatOutput",
          "type": "named"
        },
        {
          "name": "getCommandFilePaths",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/claude.ts",
        "src/utils/messages.tsx",
        "src/tools/BashTool/prompt.ts"
      ],
      "dependents": [
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileEditTool\\FileEditTool.tsx",
      "relativePath": "src/tools/FileEditTool/FileEditTool.tsx",
      "name": "FileEditTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/FileEditTool",
      "level": 2,
      "imports": [
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync",
            "readFileSync",
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "isAbsolute",
            "relative",
            "resolve",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FileEditToolUpdatedMessage",
          "imports": [
            "FileEditToolUpdatedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "addLineNumbers",
            "detectFileEncoding",
            "detectLineEndings",
            "findSimilarFile",
            "writeTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./utils",
          "imports": [
            "applyEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasWritePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileEditTool",
          "type": "named"
        },
        {
          "name": "getSnippet",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/StructuredDiff.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/array.ts",
        "src/utils/log.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/FileEditTool/prompt.ts",
        "src/tools/FileEditTool/utils.ts",
        "src/utils/permissions/filesystem.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/permissions.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileEditTool\\prompt.ts",
      "relativePath": "src/tools/FileEditTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/FileEditTool",
      "level": 2,
      "imports": [
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/NotebookEditTool/NotebookEditTool.tsx"
      ],
      "dependents": [
        "src/tools/FileEditTool/FileEditTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileEditTool\\utils.ts",
      "relativePath": "src/tools/FileEditTool/utils.ts",
      "name": "utils.ts",
      "extension": ".ts",
      "directory": "src/tools/FileEditTool",
      "level": 2,
      "imports": [
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file",
          "imports": [
            "detectFileEncoding"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "applyEdit",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/utils/file.ts",
        "src/utils/diff.ts"
      ],
      "dependents": [
        "src/tools/FileEditTool/FileEditTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileReadTool\\FileReadTool.tsx",
      "relativePath": "src/tools/FileReadTool/FileReadTool.tsx",
      "name": "FileReadTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/FileReadTool",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ImageBlockParam"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:fs",
          "imports": [
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:path",
          "imports": [
            "extname",
            "relative"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "addLineNumbers",
            "findSimilarFile",
            "normalizeFilePath",
            "readTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileRead",
            "generateFileModificationReminder"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/secureFile",
          "imports": [
            "secureFileService"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "sharp",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileReadTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/HighlightedCode.tsx",
        "src/Tool.ts",
        "src/utils/state.ts",
        "src/utils/log.ts",
        "src/utils/theme.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts",
        "src/tools/FileReadTool/prompt.ts",
        "src/utils/permissions/filesystem.ts",
        "src/utils/secureFile.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/BashTool/prompt.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileReadTool\\prompt.ts",
      "relativePath": "src/tools/FileReadTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/FileReadTool",
      "level": 2,
      "imports": [
        {
          "source": "../NotebookReadTool/NotebookReadTool",
          "imports": [
            "NotebookReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ],
      "dependents": [
        "src/tools/FileReadTool/FileReadTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileWriteTool\\FileWriteTool.tsx",
      "relativePath": "src/tools/FileWriteTool/FileWriteTool.tsx",
      "name": "FileWriteTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/FileWriteTool",
      "level": 2,
      "imports": [
        {
          "source": "diff",
          "imports": [
            "Hunk"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync",
            "readFileSync",
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "extname",
            "isAbsolute",
            "relative",
            "resolve",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FileEditToolUpdatedMessage",
          "imports": [
            "FileEditToolUpdatedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "addLineNumbers",
            "detectFileEncoding",
            "detectLineEndings",
            "detectRepoLineEndings",
            "writeTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasWritePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "FileWriteTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/HighlightedCode.tsx",
        "src/components/StructuredDiff.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/array.ts",
        "src/utils/log.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/tools/FileWriteTool/prompt.ts",
        "src/utils/permissions/filesystem.ts",
        "src/utils/diff.ts",
        "src/constants/product.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedbackOption.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/permissions.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\FileWriteTool\\prompt.ts",
      "relativePath": "src/tools/FileWriteTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/FileWriteTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/FileWriteTool/FileWriteTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\GlobTool\\GlobTool.tsx",
      "relativePath": "src/tools/GlobTool/GlobTool.tsx",
      "name": "GlobTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/GlobTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file",
          "imports": [
            "glob"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "TOOL_NAME_FOR_PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "relative",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "GlobTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/Cost.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/state.ts",
        "src/utils/file.ts",
        "src/tools/GlobTool/prompt.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\GlobTool\\prompt.ts",
      "relativePath": "src/tools/GlobTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/GlobTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME_FOR_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/BashTool/prompt.ts",
        "src/tools/GlobTool/GlobTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\GrepTool\\GrepTool.tsx",
      "relativePath": "src/tools/GrepTool/GrepTool.tsx",
      "name": "GrepTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/GrepTool",
      "level": 2,
      "imports": [
        {
          "source": "fs/promises",
          "imports": [
            "stat"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "getAbsolutePath",
            "getAbsoluteAndRelativePaths"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/ripgrep",
          "imports": [
            "ripGrep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "TOOL_NAME_FOR_PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "GrepTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/Cost.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/state.ts",
        "src/utils/ripgrep.ts",
        "src/tools/GrepTool/prompt.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/messages/UserToolResultMessage/utils.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/entrypoints/mcp.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\GrepTool\\prompt.ts",
      "relativePath": "src/tools/GrepTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/GrepTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME_FOR_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/BashTool/prompt.ts",
        "src/tools/GrepTool/GrepTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\lsTool\\lsTool.tsx",
      "relativePath": "src/tools/lsTool/lsTool.tsx",
      "name": "lsTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/lsTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "readdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "basename",
            "isAbsolute",
            "join",
            "relative",
            "resolve",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "LSTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/log.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/tools/lsTool/prompt.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/context.ts",
        "src/entrypoints/mcp.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/BashTool/prompt.ts",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\lsTool\\prompt.ts",
      "relativePath": "src/tools/lsTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/lsTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/lsTool/lsTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MCPTool\\MCPTool.tsx",
      "relativePath": "src/tools/MCPTool/MCPTool.tsx",
      "name": "MCPTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/MCPTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../BashTool/OutputLine",
          "imports": [
            "OutputLine"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MCPTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/theme.ts",
        "src/tools/MCPTool/prompt.ts",
        "src/tools/BashTool/OutputLine.tsx"
      ],
      "dependents": [
        "src/services/mcpClient.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MCPTool\\prompt.ts",
      "relativePath": "src/tools/MCPTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/MCPTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/MCPTool/MCPTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MemoryReadTool\\MemoryReadTool.tsx",
      "relativePath": "src/tools/MemoryReadTool/MemoryReadTool.tsx",
      "name": "MemoryReadTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/MemoryReadTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "lstatSync",
            "mkdirSync",
            "readdirSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/env",
          "imports": [
            "MEMORY_DIR"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentStorage",
          "imports": [
            "resolveAgentId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MemoryReadTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/env.ts",
        "src/utils/agentStorage.ts",
        "src/tools/MemoryReadTool/prompt.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MemoryReadTool\\prompt.ts",
      "relativePath": "src/tools/MemoryReadTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/MemoryReadTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/MemoryReadTool/MemoryReadTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MemoryWriteTool\\MemoryWriteTool.tsx",
      "relativePath": "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
      "name": "MemoryWriteTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/MemoryWriteTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "mkdirSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/env",
          "imports": [
            "MEMORY_DIR"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentStorage",
          "imports": [
            "resolveAgentId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MemoryWriteTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/utils/env.ts",
        "src/utils/agentStorage.ts",
        "src/services/fileFreshness.ts",
        "src/tools/MemoryWriteTool/prompt.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MemoryWriteTool\\prompt.ts",
      "relativePath": "src/tools/MemoryWriteTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/MemoryWriteTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MultiEditTool\\MultiEditTool.tsx",
      "relativePath": "src/tools/MultiEditTool/MultiEditTool.tsx",
      "name": "MultiEditTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/MultiEditTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync",
            "readFileSync",
            "statSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "isAbsolute",
            "relative",
            "resolve",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FileEditToolUpdatedMessage",
          "imports": [
            "FileEditToolUpdatedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/StructuredDiff",
          "imports": [
            "StructuredDiff"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/array",
          "imports": [
            "intersperse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "addLineNumbers",
            "detectFileEncoding",
            "detectLineEndings",
            "findSimilarFile",
            "writeTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasWritePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/diff",
          "imports": [
            "getPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MultiEditTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/StructuredDiff.tsx",
        "src/Tool.ts",
        "src/utils/array.ts",
        "src/utils/log.ts",
        "src/utils/state.ts",
        "src/utils/theme.ts",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/utils/permissions/filesystem.ts",
        "src/constants/product.ts",
        "src/tools/MultiEditTool/prompt.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts",
        "src/utils/diff.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\MultiEditTool\\prompt.ts",
      "relativePath": "src/tools/MultiEditTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/MultiEditTool",
      "level": 2,
      "imports": [
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/tools/NotebookEditTool/NotebookEditTool.tsx"
      ],
      "dependents": [
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\NotebookEditTool\\NotebookEditTool.tsx",
      "relativePath": "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "name": "NotebookEditTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/NotebookEditTool",
      "level": 2,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "extname",
            "isAbsolute",
            "relative",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/HighlightedCode",
          "imports": [
            "HighlightedCode"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../../types/notebook",
          "imports": [
            "NotebookCellType",
            "NotebookContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file.js",
          "imports": [
            "detectFileEncoding",
            "detectLineEndings",
            "writeTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasWritePermission"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "recordFileEdit"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "NotebookEditTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/HighlightedCode.tsx",
        "src/Tool.ts",
        "src/types/notebook.ts",
        "src/utils/json.ts",
        "src/utils/state.ts",
        "src/tools/NotebookEditTool/prompt.ts",
        "src/utils/permissions/filesystem.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/permissions.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileEditTool/prompt.ts",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/MultiEditTool/prompt.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\NotebookEditTool\\prompt.ts",
      "relativePath": "src/tools/NotebookEditTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/NotebookEditTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/NotebookEditTool/NotebookEditTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\NotebookReadTool\\NotebookReadTool.tsx",
      "relativePath": "src/tools/NotebookReadTool/NotebookReadTool.tsx",
      "name": "NotebookReadTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/NotebookReadTool",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ImageBlockParam",
            "TextBlockParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "extname",
            "isAbsolute",
            "relative",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../types/notebook",
          "imports": [
            "NotebookCellSource",
            "NotebookContent",
            "NotebookCell",
            "NotebookOutputImage",
            "NotebookCellSourceOutput",
            "NotebookCellOutput",
            "NotebookCellType"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../BashTool/utils",
          "imports": [
            "formatOutput"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/file",
          "imports": [
            "findSimilarFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/permissions/filesystem",
          "imports": [
            "hasReadPermission"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "NotebookReadTool",
          "type": "named"
        },
        {
          "name": "isNotebookCellType",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/types/notebook.ts",
        "src/tools/BashTool/utils.ts",
        "src/utils/state.ts",
        "src/utils/file.ts",
        "src/tools/NotebookReadTool/prompt.ts",
        "src/utils/permissions/filesystem.ts"
      ],
      "dependents": [
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/PermissionRequest.tsx",
        "src/tools/FileReadTool/prompt.ts",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\NotebookReadTool\\prompt.ts",
      "relativePath": "src/tools/NotebookReadTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/NotebookReadTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\StickerRequestTool\\prompt.ts",
      "relativePath": "src/tools/StickerRequestTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/StickerRequestTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/StickerRequestTool/StickerRequestTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\StickerRequestTool\\StickerRequestTool.tsx",
      "relativePath": "src/tools/StickerRequestTool/StickerRequestTool.tsx",
      "name": "StickerRequestTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/StickerRequestTool",
      "level": 2,
      "imports": [
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ToolUseContext",
            "ExtendedToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/StickerRequestForm",
          "imports": [
            "StickerRequestForm",
            "FormData"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "StickerRequestTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/tools/StickerRequestTool/prompt.ts",
        "src/components/StickerRequestForm.tsx",
        "src/utils/theme.ts"
      ],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TaskTool\\constants.ts",
      "relativePath": "src/tools/TaskTool/constants.ts",
      "name": "constants.ts",
      "extension": ".ts",
      "directory": "src/tools/TaskTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/BashTool/prompt.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TaskTool\\prompt.ts",
      "relativePath": "src/tools/TaskTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/TaskTool",
      "level": 2,
      "imports": [
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../tools",
          "imports": [
            "getTools",
            "getReadOnlyTools"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./TaskTool",
          "imports": [
            "TaskTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentLoader",
          "imports": [
            "getActiveAgents"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getTaskTools",
          "type": "named"
        },
        {
          "name": "getPrompt",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/tools.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/utils/model.ts",
        "src/utils/agentLoader.ts"
      ],
      "dependents": [
        "src/tools/TaskTool/TaskTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TaskTool\\TaskTool.tsx",
      "relativePath": "src/tools/TaskTool/TaskTool.tsx",
      "name": "TaskTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/TaskTool",
      "level": 2,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "TextBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "last",
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default",
            "useState",
            "useEffect"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../constants/prompts",
          "imports": [
            "getAgentPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../permissions",
          "imports": [
            "hasPermissionsToUseTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../query",
          "imports": [
            "AssistantMessage",
            "MessageType",
            "query"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/format",
          "imports": [
            "formatDuration",
            "formatNumber"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/log.js",
          "imports": [
            "getMessagesPath",
            "getNextAvailableLogSidechainNumber",
            "overwriteLog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/markdown",
          "imports": [
            "applyMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/messages.js",
          "imports": [
            "createAssistantMessage",
            "createUserMessage",
            "getLastAssistantMessageId",
            "INTERRUPT_MESSAGE",
            "normalizeMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/thinking",
          "imports": [
            "getMaxThinkingTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentStorage",
          "imports": [
            "generateAgentId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/debugLogger",
          "imports": [
            "debugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "getTaskTools",
            "getPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./constants",
          "imports": [
            "TOOL_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/agentLoader",
          "imports": [
            "getActiveAgents",
            "getAgentByType",
            "getAvailableAgentTypes"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TaskTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/utils/format.tsx",
        "src/utils/markdown.ts",
        "src/utils/model.ts",
        "src/utils/thinking.ts",
        "src/utils/theme.ts",
        "src/utils/agentStorage.ts",
        "src/utils/debugLogger.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools/TaskTool/constants.ts",
        "src/utils/agentLoader.ts"
      ],
      "dependents": [
        "src/entrypoints/mcp.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\ThinkTool\\prompt.ts",
      "relativePath": "src/tools/ThinkTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/ThinkTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/ThinkTool/ThinkTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\ThinkTool\\ThinkTool.tsx",
      "relativePath": "src/tools/ThinkTool/ThinkTool.tsx",
      "name": "ThinkTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/ThinkTool",
      "level": 2,
      "imports": [
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/MessageResponse",
          "imports": [
            "MessageResponse"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/model",
          "imports": [
            "USE_BEDROCK",
            "USE_VERTEX"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ThinkTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/tools/ThinkTool/prompt.ts",
        "src/utils/theme.ts",
        "src/components/MessageResponse.tsx",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/tools.ts",
        "src/utils/thinking.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TodoWriteTool\\prompt.ts",
      "relativePath": "src/tools/TodoWriteTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/TodoWriteTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "DESCRIPTION",
          "type": "named"
        },
        {
          "name": "PROMPT",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/TodoWriteTool/TodoWriteTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\TodoWriteTool\\TodoWriteTool.tsx",
      "relativePath": "src/tools/TodoWriteTool/TodoWriteTool.tsx",
      "name": "TodoWriteTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/TodoWriteTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/TodoItem",
          "imports": [
            "TodoItemComponent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ValidationResult"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/todoStorage",
          "imports": [
            "setTodos",
            "getTodos",
            "TodoItem"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/systemReminder",
          "imports": [
            "emitReminderEvent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/fileFreshness",
          "imports": [
            "startWatchingTodoFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../utils/theme",
          "imports": [
            "getTheme"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TodoWriteTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/TodoItem.tsx",
        "src/Tool.ts",
        "src/utils/todoStorage.ts",
        "src/services/systemReminder.ts",
        "src/services/fileFreshness.ts",
        "src/tools/TodoWriteTool/prompt.ts",
        "src/utils/theme.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\URLFetcherTool\\cache.ts",
      "relativePath": "src/tools/URLFetcherTool/cache.ts",
      "name": "cache.ts",
      "extension": ".ts",
      "directory": "src/tools/URLFetcherTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "urlCache",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/URLFetcherTool/URLFetcherTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\URLFetcherTool\\htmlToMarkdown.ts",
      "relativePath": "src/tools/URLFetcherTool/htmlToMarkdown.ts",
      "name": "htmlToMarkdown.ts",
      "extension": ".ts",
      "directory": "src/tools/URLFetcherTool",
      "level": 2,
      "imports": [
        {
          "source": "turndown",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "convertHtmlToMarkdown",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/URLFetcherTool/URLFetcherTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\URLFetcherTool\\prompt.ts",
      "relativePath": "src/tools/URLFetcherTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/URLFetcherTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME_FOR_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/URLFetcherTool/URLFetcherTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\URLFetcherTool\\URLFetcherTool.tsx",
      "relativePath": "src/tools/URLFetcherTool/URLFetcherTool.tsx",
      "name": "URLFetcherTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/URLFetcherTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node-fetch",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "TOOL_NAME_FOR_PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./htmlToMarkdown",
          "imports": [
            "convertHtmlToMarkdown"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./cache",
          "imports": [
            "urlCache"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "URLFetcherTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/Cost.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/tools/URLFetcherTool/prompt.ts",
        "src/tools/URLFetcherTool/htmlToMarkdown.ts",
        "src/tools/URLFetcherTool/cache.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\WebSearchTool\\prompt.ts",
      "relativePath": "src/tools/WebSearchTool/prompt.ts",
      "name": "prompt.ts",
      "extension": ".ts",
      "directory": "src/tools/WebSearchTool",
      "level": 2,
      "imports": [],
      "exports": [
        {
          "name": "TOOL_NAME_FOR_PROMPT",
          "type": "named"
        },
        {
          "name": "DESCRIPTION",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/WebSearchTool/WebSearchTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\WebSearchTool\\searchProviders.ts",
      "relativePath": "src/tools/WebSearchTool/searchProviders.ts",
      "name": "searchProviders.ts",
      "extension": ".ts",
      "directory": "src/tools/WebSearchTool",
      "level": 2,
      "imports": [
        {
          "source": "node-fetch",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node-html-parser",
          "imports": [
            "parse"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SearchResult",
          "type": "named"
        },
        {
          "name": "SearchProvider",
          "type": "named"
        },
        {
          "name": "searchProviders",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/WebSearchTool/WebSearchTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools\\WebSearchTool\\WebSearchTool.tsx",
      "relativePath": "src/tools/WebSearchTool/WebSearchTool.tsx",
      "name": "WebSearchTool.tsx",
      "extension": ".tsx",
      "directory": "src/tools/WebSearchTool",
      "level": 2,
      "imports": [
        {
          "source": "ink",
          "imports": [
            "Box",
            "Text"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "zod",
          "imports": [
            "z"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/Cost",
          "imports": [
            "Cost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../components/FallbackToolUseRejectedMessage",
          "imports": [
            "FallbackToolUseRejectedMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../../Tool",
          "imports": [
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./prompt",
          "imports": [
            "DESCRIPTION",
            "TOOL_NAME_FOR_PROMPT"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./searchProviders",
          "imports": [
            "SearchResult",
            "searchProviders"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "WebSearchTool",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/components/Cost.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/Tool.ts",
        "src/tools/WebSearchTool/prompt.ts",
        "src/tools/WebSearchTool/searchProviders.ts"
      ],
      "dependents": [
        "src/tools.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\tools.ts",
      "relativePath": "src/tools.ts",
      "name": "tools.ts",
      "extension": ".ts",
      "directory": "src",
      "level": 0,
      "imports": [
        {
          "source": "./Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/TaskTool/TaskTool",
          "imports": [
            "TaskTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/ArchitectTool/ArchitectTool",
          "imports": [
            "ArchitectTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/AskExpertModelTool/AskExpertModelTool",
          "imports": [
            "AskExpertModelTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileEditTool/FileEditTool",
          "imports": [
            "FileEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileReadTool/FileReadTool",
          "imports": [
            "FileReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/FileWriteTool/FileWriteTool",
          "imports": [
            "FileWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/MultiEditTool/MultiEditTool",
          "imports": [
            "MultiEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/GlobTool/GlobTool",
          "imports": [
            "GlobTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/GrepTool/GrepTool",
          "imports": [
            "GrepTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/lsTool/lsTool",
          "imports": [
            "LSTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/NotebookEditTool/NotebookEditTool",
          "imports": [
            "NotebookEditTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/NotebookReadTool/NotebookReadTool",
          "imports": [
            "NotebookReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/MemoryReadTool/MemoryReadTool",
          "imports": [
            "MemoryReadTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/MemoryWriteTool/MemoryWriteTool",
          "imports": [
            "MemoryWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/ThinkTool/ThinkTool",
          "imports": [
            "ThinkTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/TodoWriteTool/TodoWriteTool",
          "imports": [
            "TodoWriteTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/WebSearchTool/WebSearchTool",
          "imports": [
            "WebSearchTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tools/URLFetcherTool/URLFetcherTool",
          "imports": [
            "URLFetcherTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./services/mcpClient",
          "imports": [
            "getMCPTools"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getAllTools",
          "type": "named"
        },
        {
          "name": "getTools",
          "type": "named"
        },
        {
          "name": "getReadOnlyTools",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/tools/WebSearchTool/WebSearchTool.tsx",
        "src/tools/URLFetcherTool/URLFetcherTool.tsx",
        "src/services/mcpClient.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/tools/TaskTool/prompt.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\common.d.ts",
      "relativePath": "src/types/common.d.ts",
      "name": "common.d.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [],
      "dependencies": [],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\conversation.ts",
      "relativePath": "src/types/conversation.ts",
      "name": "conversation.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "MessageParam"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "APIAssistantMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "UserMessage",
          "type": "named"
        },
        {
          "name": "AssistantMessage",
          "type": "named"
        },
        {
          "name": "ProgressMessage",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/utils/debugLogger.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\logs.ts",
      "relativePath": "src/types/logs.ts",
      "name": "logs.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SerializedMessage",
          "type": "named"
        },
        {
          "name": "LogOption",
          "type": "named"
        },
        {
          "name": "LogListProps",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/LogSelector.tsx",
        "src/screens/LogList.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/utils/log.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\modelCapabilities.ts",
      "relativePath": "src/types/modelCapabilities.ts",
      "name": "modelCapabilities.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "ModelCapabilities",
          "type": "named"
        },
        {
          "name": "UnifiedRequestParams",
          "type": "named"
        },
        {
          "name": "UnifiedResponse",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/constants/modelCapabilities.ts",
        "src/services/adapters/base.ts",
        "src/services/adapters/chatCompletions.ts",
        "src/services/adapters/responsesAPI.ts",
        "src/services/claude.ts",
        "src/services/modelAdapterFactory.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\notebook.ts",
      "relativePath": "src/types/notebook.ts",
      "name": "notebook.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "NotebookOutputImage",
          "type": "named"
        },
        {
          "name": "NotebookCellSourceOutput",
          "type": "named"
        },
        {
          "name": "NotebookCellSource",
          "type": "named"
        },
        {
          "name": "NotebookCellOutput",
          "type": "named"
        },
        {
          "name": "NotebookCell",
          "type": "named"
        },
        {
          "name": "NotebookContent",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\PermissionMode.ts",
      "relativePath": "src/types/PermissionMode.ts",
      "name": "PermissionMode.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "PermissionContext",
          "type": "named"
        },
        {
          "name": "ModeConfig",
          "type": "named"
        },
        {
          "name": "MODE_CONFIGS",
          "type": "named"
        },
        {
          "name": "getNextPermissionMode",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/context/PermissionContext.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\types\\RequestContext.ts",
      "relativePath": "src/types/RequestContext.ts",
      "name": "RequestContext.ts",
      "extension": ".ts",
      "directory": "src/types",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "RequestContext",
          "type": "named"
        },
        {
          "name": "AbortBarrier",
          "type": "named"
        },
        {
          "name": "createRequestContext",
          "type": "named"
        },
        {
          "name": "createAbortBarrier",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\advancedFuzzyMatcher.ts",
      "relativePath": "src/utils/advancedFuzzyMatcher.ts",
      "name": "advancedFuzzyMatcher.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "MatchResult",
          "type": "named"
        },
        {
          "name": "AdvancedFuzzyMatcher",
          "type": "named"
        },
        {
          "name": "advancedMatcher",
          "type": "named"
        },
        {
          "name": "matchAdvanced",
          "type": "named"
        },
        {
          "name": "matchManyAdvanced",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/utils/fuzzyMatcher.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\agentLoader.ts",
      "relativePath": "src/utils/agentLoader.ts",
      "name": "agentLoader.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "readdirSync",
            "statSync",
            "watch",
            "FSWatcher"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "gray-matter",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "AgentConfig",
          "type": "named"
        },
        {
          "name": "getActiveAgents",
          "type": "named"
        },
        {
          "name": "getAllAgents",
          "type": "named"
        },
        {
          "name": "clearAgentCache",
          "type": "named"
        },
        {
          "name": "getAgentByType",
          "type": "named"
        },
        {
          "name": "getAvailableAgentTypes",
          "type": "named"
        },
        {
          "name": "startAgentWatcher",
          "type": "named"
        },
        {
          "name": "stopAgentWatcher",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/components/messages/TaskToolMessage.tsx",
        "src/entrypoints/cli.tsx",
        "src/hooks/useUnifiedCompletion.ts",
        "src/services/mentionProcessor.ts",
        "src/tools/TaskTool/prompt.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\agentStorage.ts",
      "relativePath": "src/utils/agentStorage.ts",
      "name": "agentStorage.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync",
            "mkdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getAgentFilePath",
          "type": "named"
        },
        {
          "name": "readAgentData",
          "type": "named"
        },
        {
          "name": "writeAgentData",
          "type": "named"
        },
        {
          "name": "getDefaultAgentId",
          "type": "named"
        },
        {
          "name": "resolveAgentId",
          "type": "named"
        },
        {
          "name": "generateAgentId",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/services/fileFreshness.ts",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/todoStorage.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\array.ts",
      "relativePath": "src/utils/array.ts",
      "name": "array.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "intersperse",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\ask.tsx",
      "relativePath": "src/utils/ask.tsx",
      "name": "ask.tsx",
      "extension": ".tsx",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "last"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "Command"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/prompts",
          "imports": [
            "getSystemPrompt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../cost-tracker",
          "imports": [
            "getTotalCost"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message",
            "query"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../hooks/useCanUseTool",
          "imports": [
            "CanUseToolFn"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "setCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "getMessagesPath",
            "overwriteLog"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages",
          "imports": [
            "createUserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ask",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/cost-tracker.ts",
        "src/query.ts",
        "src/hooks/useCanUseTool.ts",
        "src/Tool.ts",
        "src/utils/model.ts",
        "src/utils/state.ts",
        "src/utils/log.ts",
        "src/utils/messages.tsx"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\auth.ts",
      "relativePath": "src/utils/auth.ts",
      "name": "auth.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./model",
          "imports": [
            "USE_BEDROCK",
            "USE_VERTEX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "isAnthropicAuthEnabled",
          "type": "named"
        },
        {
          "name": "isLoggedInToAnthropic",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/model.ts",
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/commands/login.tsx",
        "src/commands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\autoCompactCore.ts",
      "relativePath": "src/utils/autoCompactCore.ts",
      "name": "autoCompactCore.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./tokens",
          "imports": [
            "countTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../messages",
          "imports": [
            "getMessagesGetter",
            "getMessagesSetter"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../context",
          "imports": [
            "getContext"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/style",
          "imports": [
            "getCodeStyle"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/terminal",
          "imports": [
            "clearTerminal"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/fileFreshness",
          "imports": [
            "resetFileFreshnessSession"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../utils/messages",
          "imports": [
            "createUserMessage",
            "normalizeMessagesForAPI"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "queryLLM"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./fileRecoveryCore",
          "imports": [
            "selectAndReadFiles"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./file",
          "imports": [
            "addLineNumbers"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./model",
          "imports": [
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "checkAutoCompact",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/tokens.ts",
        "src/messages.ts",
        "src/context.ts",
        "src/utils/style.ts",
        "src/utils/terminal.ts",
        "src/services/fileFreshness.ts",
        "src/utils/messages.tsx",
        "src/services/claude.ts",
        "src/utils/fileRecoveryCore.ts",
        "src/utils/file.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/query.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\autoUpdater.ts",
      "relativePath": "src/utils/autoUpdater.ts",
      "name": "autoUpdater.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "semver",
          "imports": [
            "lt",
            "gt"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "isAutoUpdaterDisabled"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "assertMinVersion",
          "type": "named"
        },
        {
          "name": "getLatestVersion",
          "type": "named"
        },
        {
          "name": "getUpdateCommandSuggestions",
          "type": "named"
        },
        {
          "name": "checkAndNotifyUpdate",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/execFileNoThrow.ts",
        "src/utils/log.ts",
        "src/constants/macros.ts",
        "src/constants/product.ts",
        "src/utils/config.ts",
        "src/utils/env.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\browser.ts",
      "relativePath": "src/utils/browser.ts",
      "name": "browser.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "openBrowser",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/execFileNoThrow.ts"
      ],
      "dependents": [
        "src/components/Bug.tsx",
        "src/services/oauth.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\cleanup.ts",
      "relativePath": "src/utils/cleanup.ts",
      "name": "cleanup.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "fs"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "CACHE_PATHS"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "convertFileNameToDate",
          "type": "named"
        },
        {
          "name": "cleanupOldMessageFiles",
          "type": "named"
        },
        {
          "name": "cleanupOldMessageFilesInBackground",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\commands.ts",
      "relativePath": "src/utils/commands.ts",
      "name": "commands.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "API_ERROR_MESSAGE_PREFIX",
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "shell-quote",
          "imports": [
            "ControlOperator",
            "parse",
            "ParseEntry"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_NAME"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "splitCommand",
          "type": "named"
        },
        {
          "name": "getCommandSubcommandPrefix",
          "type": "named"
        },
        {
          "name": "isUnsafeCompoundCommand",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/claude.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/permissions/PermissionRequest.tsx",
        "src/components/permissions/toolUseOptions.ts",
        "src/hooks/useCanUseTool.ts",
        "src/permissions.ts",
        "src/tools/BashTool/BashTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\commonUnixCommands.ts",
      "relativePath": "src/utils/commonUnixCommands.ts",
      "name": "commonUnixCommands.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "COMMON_UNIX_COMMANDS",
          "type": "named"
        },
        {
          "name": "getCommonSystemCommands",
          "type": "named"
        },
        {
          "name": "getCommandPriority",
          "type": "named"
        },
        {
          "name": "getEssentialCommands",
          "type": "named"
        },
        {
          "name": "getMinimalFallbackCommands",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/hooks/useUnifiedCompletion.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\config.ts",
      "relativePath": "src/utils/config.ts",
      "name": "config.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "resolve",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "cloneDeep",
            "memoize",
            "pick"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./env",
          "imports": [
            "GLOBAL_CLAUDE_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomBytes"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./errors",
          "imports": [
            "ConfigParseError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./theme",
          "imports": [
            "ThemeNames"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./debugLogger",
          "imports": [
            "debugLogger"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./sessionState",
          "imports": [
            "getSessionState",
            "setSessionState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./model",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "isAutoUpdaterStatus",
          "type": "named"
        },
        {
          "name": "DEFAULT_GLOBAL_CONFIG",
          "type": "named"
        },
        {
          "name": "GLOBAL_CONFIG_KEYS",
          "type": "named"
        },
        {
          "name": "isGlobalConfigKey",
          "type": "named"
        },
        {
          "name": "PROJECT_CONFIG_KEYS",
          "type": "named"
        },
        {
          "name": "checkHasTrustDialogAccepted",
          "type": "named"
        },
        {
          "name": "isProjectConfigKey",
          "type": "named"
        },
        {
          "name": "saveGlobalConfig",
          "type": "named"
        },
        {
          "name": "getGlobalConfig",
          "type": "named"
        },
        {
          "name": "getAnthropicApiKey",
          "type": "named"
        },
        {
          "name": "normalizeApiKeyForConfig",
          "type": "named"
        },
        {
          "name": "getCustomApiKeyStatus",
          "type": "named"
        },
        {
          "name": "enableConfigs",
          "type": "named"
        },
        {
          "name": "getCurrentProjectConfig",
          "type": "named"
        },
        {
          "name": "saveCurrentProjectConfig",
          "type": "named"
        },
        {
          "name": "isAutoUpdaterDisabled",
          "type": "named"
        },
        {
          "name": "TEST_MCPRC_CONFIG_FOR_TESTING",
          "type": "named"
        },
        {
          "name": "clearMcprcConfigForTesting",
          "type": "named"
        },
        {
          "name": "addMcprcServerForTesting",
          "type": "named"
        },
        {
          "name": "removeMcprcServerForTesting",
          "type": "named"
        },
        {
          "name": "getMcprcConfig",
          "type": "named"
        },
        {
          "name": "getOrCreateUserID",
          "type": "named"
        },
        {
          "name": "getConfigForCLI",
          "type": "named"
        },
        {
          "name": "setConfigForCLI",
          "type": "named"
        },
        {
          "name": "deleteConfigForCLI",
          "type": "named"
        },
        {
          "name": "listConfigForCLI",
          "type": "named"
        },
        {
          "name": "listConfigForCLI",
          "type": "named"
        },
        {
          "name": "listConfigForCLI",
          "type": "named"
        },
        {
          "name": "getOpenAIApiKey",
          "type": "named"
        },
        {
          "name": "setAllPointersToModel",
          "type": "named"
        },
        {
          "name": "setModelPointer",
          "type": "named"
        },
        {
          "name": "isGPT5ModelName",
          "type": "named"
        },
        {
          "name": "validateAndRepairGPT5Profile",
          "type": "named"
        },
        {
          "name": "validateAndRepairAllGPT5Profiles",
          "type": "named"
        },
        {
          "name": "getGPT5ConfigRecommendations",
          "type": "named"
        },
        {
          "name": "createGPT5ModelProfile",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts",
        "src/utils/state.ts",
        "src/utils/json.ts",
        "src/utils/errors.ts",
        "src/utils/theme.ts",
        "src/utils/debugLogger.ts",
        "src/utils/sessionState.ts",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/commands/logout.tsx",
        "src/commands/model.tsx",
        "src/commands/onboarding.tsx",
        "src/commands/terminalSetup.ts",
        "src/components/ApproveApiKey.tsx",
        "src/components/Bug.tsx",
        "src/components/Logo.tsx",
        "src/components/ModelStatusDisplay.tsx",
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx",
        "src/hooks/useApiKeyVerification.ts",
        "src/screens/REPL.tsx",
        "src/services/adapters/base.ts",
        "src/services/claude.ts",
        "src/services/mcpServerApproval.tsx",
        "src/services/modelAdapterFactory.ts",
        "src/services/notifier.ts",
        "src/services/openai.ts",
        "src/test/testAdapters.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/auth.ts",
        "src/utils/autoUpdater.ts",
        "src/utils/model.ts",
        "src/utils/theme.ts",
        "src/utils/user.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\conversationRecovery.ts",
      "relativePath": "src/utils/conversationRecovery.ts",
      "name": "conversationRecovery.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs/promises",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "loadMessagesFromLog",
          "type": "named"
        },
        {
          "name": "deserializeMessages",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/Tool.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/screens/ResumeConversation.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\Cursor.ts",
      "relativePath": "src/utils/Cursor.ts",
      "name": "Cursor.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "wrap-ansi",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Cursor",
          "type": "named"
        },
        {
          "name": "MeasuredText",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/hooks/useTextInput.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\debugLogger.ts",
      "relativePath": "src/utils/debugLogger.ts",
      "name": "debugLogger.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync",
            "appendFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "env-paths",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "SESSION_ID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/conversation",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "debugLog",
          "type": "named"
        },
        {
          "name": "debug",
          "type": "named"
        },
        {
          "name": "startRequest",
          "type": "named"
        },
        {
          "name": "endRequest",
          "type": "named"
        },
        {
          "name": "getCurrentRequest",
          "type": "named"
        },
        {
          "name": "markPhase",
          "type": "named"
        },
        {
          "name": "logReminderEvent",
          "type": "named"
        },
        {
          "name": "logAPIError",
          "type": "named"
        },
        {
          "name": "logLLMInteraction",
          "type": "named"
        },
        {
          "name": "logSystemPromptConstruction",
          "type": "named"
        },
        {
          "name": "logContextCompression",
          "type": "named"
        },
        {
          "name": "logUserFriendly",
          "type": "named"
        },
        {
          "name": "initDebugLogger",
          "type": "named"
        },
        {
          "name": "diagnoseError",
          "type": "named"
        },
        {
          "name": "logErrorWithDiagnosis",
          "type": "named"
        },
        {
          "name": "getDebugInfo",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/product.ts",
        "src/utils/log.ts",
        "src/types/conversation.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/query.ts",
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/services/openai.ts",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/utils/config.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\diff.ts",
      "relativePath": "src/utils/diff.ts",
      "name": "diff.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "diff",
          "imports": [
            "Hunk",
            "structuredPatch"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getPatch",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/tools/FileEditTool/utils.ts",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\env.ts",
      "relativePath": "src/utils/env.ts",
      "name": "env.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "CONFIG_BASE_DIR",
            "CONFIG_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "CLAUDE_BASE_DIR",
          "type": "named"
        },
        {
          "name": "GLOBAL_CLAUDE_FILE",
          "type": "named"
        },
        {
          "name": "MEMORY_DIR",
          "type": "named"
        },
        {
          "name": "env",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/execFileNoThrow.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/terminalSetup.ts",
        "src/components/Bug.tsx",
        "src/components/Link.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/permissions/hooks.ts",
        "src/components/permissions/utils.ts",
        "src/constants/figures.ts",
        "src/constants/prompts.ts",
        "src/entrypoints/cli.tsx",
        "src/hooks/usePermissionRequestLogging.ts",
        "src/services/vcr.ts",
        "src/tools/MemoryReadTool/MemoryReadTool.tsx",
        "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
        "src/utils/autoUpdater.ts",
        "src/utils/config.ts",
        "src/utils/exampleCommands.ts",
        "src/utils/user.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\errors.ts",
      "relativePath": "src/utils/errors.ts",
      "name": "errors.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "MalformedCommandError",
          "type": "named"
        },
        {
          "name": "DeprecatedCommandError",
          "type": "named"
        },
        {
          "name": "AbortError",
          "type": "named"
        },
        {
          "name": "ConfigParseError",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/InvalidConfigDialog.tsx",
        "src/entrypoints/cli.tsx",
        "src/hooks/useCanUseTool.ts",
        "src/permissions.ts",
        "src/utils/config.ts",
        "src/utils/messages.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\exampleCommands.ts",
      "relativePath": "src/utils/exampleCommands.ts",
      "name": "exampleCommands.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./config.js",
          "imports": [
            "getGlobalConfig",
            "saveGlobalConfig",
            "getCurrentProjectConfig",
            "saveCurrentProjectConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "exec"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize",
            "sample"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "util",
          "imports": [
            "promisify"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./git",
          "imports": [
            "getIsGit"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getExampleCommands",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/env.ts",
        "src/utils/state.ts",
        "src/utils/log.ts",
        "src/utils/git.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\execFileNoThrow.ts",
      "relativePath": "src/utils/execFileNoThrow.ts",
      "name": "execFileNoThrow.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "child_process",
          "imports": [
            "execFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "execFileNoThrow",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands/listen.ts",
        "src/commands/terminalSetup.ts",
        "src/context.ts",
        "src/utils/autoUpdater.ts",
        "src/utils/browser.ts",
        "src/utils/env.ts",
        "src/utils/git.ts",
        "src/utils/ripgrep.ts",
        "src/utils/user.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\expertChatStorage.ts",
      "relativePath": "src/utils/expertChatStorage.ts",
      "name": "expertChatStorage.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync",
            "mkdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ChatMessage",
          "type": "named"
        },
        {
          "name": "ExpertChatSession",
          "type": "named"
        },
        {
          "name": "createExpertChatSession",
          "type": "named"
        },
        {
          "name": "loadExpertChatSession",
          "type": "named"
        },
        {
          "name": "saveExpertChatSession",
          "type": "named"
        },
        {
          "name": "addMessageToSession",
          "type": "named"
        },
        {
          "name": "getSessionMessages",
          "type": "named"
        },
        {
          "name": "generateSessionId",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\file.ts",
      "relativePath": "src/utils/file.ts",
      "name": "file.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "readFileSync",
            "writeFileSync",
            "openSync",
            "readSync",
            "closeSync",
            "existsSync",
            "readdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "normalize",
            "resolve",
            "resolvePath",
            "relative",
            "sep",
            "basename",
            "dirname",
            "extname",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "glob",
          "imports": [
            "globLib"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "process",
          "imports": [
            "cwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./ripgrep",
          "imports": [
            "listAllContentFiles"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lru-cache",
          "imports": [
            "LRUCache"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "glob",
          "type": "named"
        },
        {
          "name": "readFileSafe",
          "type": "named"
        },
        {
          "name": "isInDirectory",
          "type": "named"
        },
        {
          "name": "readTextContent",
          "type": "named"
        },
        {
          "name": "writeTextContent",
          "type": "named"
        },
        {
          "name": "detectRepoLineEndings",
          "type": "named"
        },
        {
          "name": "detectRepoLineEndingsDirect",
          "type": "named"
        },
        {
          "name": "detectFileEncoding",
          "type": "named"
        },
        {
          "name": "detectFileEncodingDirect",
          "type": "named"
        },
        {
          "name": "detectLineEndings",
          "type": "named"
        },
        {
          "name": "detectLineEndingsDirect",
          "type": "named"
        },
        {
          "name": "normalizeFilePath",
          "type": "named"
        },
        {
          "name": "getAbsolutePath",
          "type": "named"
        },
        {
          "name": "getAbsoluteAndRelativePaths",
          "type": "named"
        },
        {
          "name": "findSimilarFile",
          "type": "named"
        },
        {
          "name": "addLineNumbers",
          "type": "named"
        },
        {
          "name": "isDirEmpty",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/utils/ripgrep.ts",
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/ProjectOnboarding.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/utils.ts",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/fileRecoveryCore.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\fileRecoveryCore.ts",
      "relativePath": "src/utils/fileRecoveryCore.ts",
      "name": "fileRecoveryCore.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./file",
          "imports": [
            "readTextContent"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/fileFreshness",
          "imports": [
            "fileFreshnessService"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "selectAndReadFiles",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/file.ts",
        "src/services/fileFreshness.ts"
      ],
      "dependents": [
        "src/utils/autoCompactCore.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\format.tsx",
      "relativePath": "src/utils/format.tsx",
      "name": "format.tsx",
      "extension": ".tsx",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "wrapText",
          "type": "named"
        },
        {
          "name": "formatDuration",
          "type": "named"
        },
        {
          "name": "formatNumber",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/StructuredDiff.tsx",
        "src/cost-tracker.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\fuzzyMatcher.ts",
      "relativePath": "src/utils/fuzzyMatcher.ts",
      "name": "fuzzyMatcher.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./advancedFuzzyMatcher",
          "imports": [
            "matchManyAdvanced"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MatchResult",
          "type": "named"
        },
        {
          "name": "FuzzyMatcherConfig",
          "type": "named"
        },
        {
          "name": "FuzzyMatcher",
          "type": "named"
        },
        {
          "name": "defaultMatcher",
          "type": "named"
        },
        {
          "name": "matchCommand",
          "type": "named"
        },
        {
          "name": "matchCommands",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/advancedFuzzyMatcher.ts"
      ],
      "dependents": [
        "src/hooks/useUnifiedCompletion.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\generators.ts",
      "relativePath": "src/utils/generators.ts",
      "name": "generators.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "lastX",
          "type": "named"
        },
        {
          "name": "all",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/context.ts",
        "src/entrypoints/mcp.ts",
        "src/query.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/utils/messages.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\git.ts",
      "relativePath": "src/utils/git.ts",
      "name": "git.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getIsGit",
          "type": "named"
        },
        {
          "name": "getHead",
          "type": "named"
        },
        {
          "name": "getBranch",
          "type": "named"
        },
        {
          "name": "getRemoteUrl",
          "type": "named"
        },
        {
          "name": "getIsHeadOnRemote",
          "type": "named"
        },
        {
          "name": "getIsClean",
          "type": "named"
        },
        {
          "name": "GitRepoState",
          "type": "named"
        },
        {
          "name": "getGitState",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/execFileNoThrow.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/utils.ts",
        "src/components/Bug.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/utils/exampleCommands.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\globalLogger.ts",
      "relativePath": "src/utils/globalLogger.ts",
      "name": "globalLogger.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "globalLogger",
          "type": "named"
        },
        {
          "name": "logger",
          "type": "named"
        },
        {
          "name": "debugLog",
          "type": "named"
        },
        {
          "name": "statusLog",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\http.ts",
      "relativePath": "src/utils/http.ts",
      "name": "http.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "USER_AGENT",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/constants/macros.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/components/Bug.tsx",
        "src/services/claude.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\imagePaste.ts",
      "relativePath": "src/utils/imagePaste.ts",
      "name": "imagePaste.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "child_process",
          "imports": [
            "execSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "CLIPBOARD_ERROR_MESSAGE",
          "type": "named"
        },
        {
          "name": "getImageFromClipboard",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\json.ts",
      "relativePath": "src/utils/json.ts",
      "name": "json.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "safeParseJSON",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/commands/terminalSetup.ts",
        "src/services/mcpClient.ts",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/utils/config.ts",
        "src/utils/terminal.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\log.ts",
      "relativePath": "src/utils/log.ts",
      "name": "log.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "mkdirSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "dirname",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "writeFileSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/sentry",
          "imports": [
            "captureException"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "randomUUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "env-paths",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "fsPromises"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/logs",
          "imports": [
            "LogOption",
            "SerializedMessage"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SESSION_ID",
          "type": "named"
        },
        {
          "name": "CACHE_PATHS",
          "type": "named"
        },
        {
          "name": "dateToFilename",
          "type": "named"
        },
        {
          "name": "getMessagesPath",
          "type": "named"
        },
        {
          "name": "logError",
          "type": "named"
        },
        {
          "name": "getErrorsLog",
          "type": "named"
        },
        {
          "name": "getInMemoryErrors",
          "type": "named"
        },
        {
          "name": "overwriteLog",
          "type": "named"
        },
        {
          "name": "loadLogList",
          "type": "named"
        },
        {
          "name": "parseLogFilename",
          "type": "named"
        },
        {
          "name": "getNextAvailableLogForkNumber",
          "type": "named"
        },
        {
          "name": "getNextAvailableLogSidechainNumber",
          "type": "named"
        },
        {
          "name": "getForkNumberFromFilename",
          "type": "named"
        },
        {
          "name": "sortLogs",
          "type": "named"
        },
        {
          "name": "formatDate",
          "type": "named"
        },
        {
          "name": "parseISOString",
          "type": "named"
        },
        {
          "name": "logMCPError",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/services/sentry.ts",
        "src/types/logs.ts",
        "src/constants/macros.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/listen.ts",
        "src/commands/resume.tsx",
        "src/commands/terminalSetup.ts",
        "src/components/Bug.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/HighlightedCode.tsx",
        "src/components/LogSelector.tsx",
        "src/components/Message.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/messages/UserPromptMessage.tsx",
        "src/context.ts",
        "src/cost-tracker.ts",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useCanUseTool.ts",
        "src/hooks/useLogMessages.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/screens/LogList.tsx",
        "src/screens/REPL.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/services/claude.ts",
        "src/services/mcpClient.ts",
        "src/services/oauth.ts",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/utils/ask.tsx",
        "src/utils/autoUpdater.ts",
        "src/utils/cleanup.ts",
        "src/utils/conversationRecovery.ts",
        "src/utils/debugLogger.ts",
        "src/utils/exampleCommands.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/file.ts",
        "src/utils/json.ts",
        "src/utils/markdown.ts",
        "src/utils/messages.tsx",
        "src/utils/model.ts",
        "src/utils/PersistentShell.ts",
        "src/utils/ripgrep.ts",
        "src/utils/terminal.ts",
        "src/utils/user.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\markdown.ts",
      "relativePath": "src/utils/markdown.ts",
      "name": "markdown.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "marked",
          "imports": [
            "marked",
            "Token"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages",
          "imports": [
            "stripSystemMessages"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "EOL"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "cli-highlight",
          "imports": [
            "highlight",
            "supportsLanguage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "applyMarkdown",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/messages.tsx",
        "src/utils/log.ts"
      ],
      "dependents": [
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/AssistantThinkingMessage.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\messageContextManager.ts",
      "relativePath": "src/utils/messageContextManager.ts",
      "name": "messageContextManager.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../types/common",
          "imports": [
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./tokens",
          "imports": [
            "countTokens"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "crypto",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "MessageRetentionStrategy",
          "type": "named"
        },
        {
          "name": "MessageTruncationResult",
          "type": "named"
        },
        {
          "name": "MessageContextManager",
          "type": "named"
        },
        {
          "name": "createRetentionStrategy",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/tokens.ts"
      ],
      "dependents": [
        "src/services/claude.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\messages.tsx",
      "relativePath": "src/utils/messages.tsx",
      "name": "messages.tsx",
      "extension": ".tsx",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "crypto",
          "imports": [
            "randomUUID",
            "UUID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "ink",
          "imports": [
            "Box"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query.js",
          "imports": [
            "AssistantMessage",
            "Message",
            "ProgressMessage",
            "UserMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../commands",
          "imports": [
            "getCommand",
            "hasCommand"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./errors",
          "imports": [
            "MalformedCommandError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "last",
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "SetToolJSXFn",
            "Tool",
            "ToolUseContext"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "../utils/generators",
          "imports": [
            "lastX"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "NO_CONTENT_MESSAGE"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ImageBlockParam",
            "TextBlockParam",
            "ToolResultBlockParam",
            "ToolUseBlockParam",
            "APIMessage",
            "ContentBlockParam",
            "ContentBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "setCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "chalk",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "react",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/messages/UserBashInputMessage",
          "imports": [
            "UserBashInputMessage"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../components/Spinner",
          "imports": [
            "Spinner"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/BashTool/BashTool",
          "imports": [
            "BashTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/customCommands",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        },
        {
          "source": "../services/mentionProcessor",
          "imports": [
            "*"
          ],
          "type": "dynamic",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "INTERRUPT_MESSAGE",
          "type": "named"
        },
        {
          "name": "INTERRUPT_MESSAGE_FOR_TOOL_USE",
          "type": "named"
        },
        {
          "name": "CANCEL_MESSAGE",
          "type": "named"
        },
        {
          "name": "REJECT_MESSAGE",
          "type": "named"
        },
        {
          "name": "NO_RESPONSE_REQUESTED",
          "type": "named"
        },
        {
          "name": "SYNTHETIC_ASSISTANT_MESSAGES",
          "type": "named"
        },
        {
          "name": "createAssistantMessage",
          "type": "named"
        },
        {
          "name": "createAssistantAPIErrorMessage",
          "type": "named"
        },
        {
          "name": "createUserMessage",
          "type": "named"
        },
        {
          "name": "createProgressMessage",
          "type": "named"
        },
        {
          "name": "createToolResultStopMessage",
          "type": "named"
        },
        {
          "name": "processUserInput",
          "type": "named"
        },
        {
          "name": "extractTagFromMessage",
          "type": "named"
        },
        {
          "name": "extractTag",
          "type": "named"
        },
        {
          "name": "isNotEmptyMessage",
          "type": "named"
        },
        {
          "name": "normalizeMessages",
          "type": "named"
        },
        {
          "name": "reorderMessages",
          "type": "named"
        },
        {
          "name": "getUnresolvedToolUseIDs",
          "type": "named"
        },
        {
          "name": "getInProgressToolUseIDs",
          "type": "named"
        },
        {
          "name": "getErroredToolUseMessages",
          "type": "named"
        },
        {
          "name": "normalizeMessagesForAPI",
          "type": "named"
        },
        {
          "name": "normalizeContentFromAPI",
          "type": "named"
        },
        {
          "name": "isEmptyMessageText",
          "type": "named"
        },
        {
          "name": "stripSystemMessages",
          "type": "named"
        },
        {
          "name": "getToolUseID",
          "type": "named"
        },
        {
          "name": "getLastAssistantMessageId",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/commands.ts",
        "src/utils/errors.ts",
        "src/utils/log.ts",
        "src/Tool.ts",
        "src/utils/generators.ts",
        "src/services/claude.ts",
        "src/utils/state.ts",
        "src/components/messages/UserBashInputMessage.tsx",
        "src/components/Spinner.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/services/customCommands.ts",
        "src/services/mentionProcessor.ts"
      ],
      "dependents": [
        "src/components/binary-feedback/BinaryFeedback.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Message.tsx",
        "src/components/messages/AssistantBashOutputMessage.tsx",
        "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
        "src/components/messages/UserBashInputMessage.tsx",
        "src/components/messages/UserCommandMessage.tsx",
        "src/components/messages/UserKodingInputMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
        "src/components/PromptInput.tsx",
        "src/hooks/useCanUseTool.ts",
        "src/services/claude.ts",
        "src/tools/ArchitectTool/ArchitectTool.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/utils.ts",
        "src/utils/ask.tsx",
        "src/utils/autoCompactCore.ts",
        "src/utils/markdown.ts",
        "src/utils/thinking.ts",
        "src/utils/tokens.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\model.ts",
      "relativePath": "src/utils/model.ts",
      "name": "model.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig",
            "ModelProfile",
            "ModelPointerType",
            "saveGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "USE_BEDROCK",
          "type": "named"
        },
        {
          "name": "USE_VERTEX",
          "type": "named"
        },
        {
          "name": "ModelConfig",
          "type": "named"
        },
        {
          "name": "getSlowAndCapableModel",
          "type": "named"
        },
        {
          "name": "isDefaultSlowAndCapableModel",
          "type": "named"
        },
        {
          "name": "getVertexRegionForModel",
          "type": "named"
        },
        {
          "name": "ModelManager",
          "type": "named"
        },
        {
          "name": "getModelManager",
          "type": "named"
        },
        {
          "name": "reloadModelManager",
          "type": "named"
        },
        {
          "name": "getQuickModel",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/model.tsx",
        "src/components/Config.tsx",
        "src/components/Logo.tsx",
        "src/components/ModelConfig.tsx",
        "src/components/ModelListManager.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/ModelStatusDisplay.tsx",
        "src/components/PromptInput.tsx",
        "src/context.ts",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useUnifiedCompletion.ts",
        "src/screens/REPL.tsx",
        "src/screens/ResumeConversation.tsx",
        "src/services/claude.ts",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/TaskTool/prompt.ts",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/utils/ask.tsx",
        "src/utils/auth.ts",
        "src/utils/autoCompactCore.ts",
        "src/utils/config.ts",
        "src/utils/thinking.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\permissions\\filesystem.ts",
      "relativePath": "src/utils/permissions/filesystem.ts",
      "name": "filesystem.ts",
      "extension": ".ts",
      "directory": "src/utils/permissions",
      "level": 2,
      "imports": [
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "resolve",
            "relative",
            "sep"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../state",
          "imports": [
            "getCwd",
            "getOriginalCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "toAbsolutePath",
          "type": "named"
        },
        {
          "name": "pathInOriginalCwd",
          "type": "named"
        },
        {
          "name": "hasReadPermission",
          "type": "named"
        },
        {
          "name": "hasWritePermission",
          "type": "named"
        },
        {
          "name": "saveReadPermissionForTest",
          "type": "named"
        },
        {
          "name": "grantReadPermissionForOriginalDir",
          "type": "named"
        },
        {
          "name": "grantWritePermissionForOriginalDir",
          "type": "named"
        },
        {
          "name": "clearFilePermissions",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts"
      ],
      "dependents": [
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/entrypoints/cli.tsx",
        "src/permissions.ts",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\PersistentShell.ts",
      "relativePath": "src/utils/PersistentShell.ts",
      "name": "PersistentShell.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "fs",
          "imports": [
            "existsSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "shell-quote",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "spawn",
            "execSync",
            "ChildProcess"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "isAbsolute",
            "resolve",
            "join"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "os",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PRODUCT_COMMAND"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "PersistentShell",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/entrypoints/cli.tsx",
        "src/tools/BashTool/BashTool.tsx",
        "src/utils/state.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\responseState.ts",
      "relativePath": "src/utils/responseState.ts",
      "name": "responseState.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "getLastResponseId",
          "type": "named"
        },
        {
          "name": "setLastResponseId",
          "type": "named"
        },
        {
          "name": "clearResponseId",
          "type": "named"
        },
        {
          "name": "clearAllResponseIds",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": []
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\ripgrep.ts",
      "relativePath": "src/utils/ripgrep.ts",
      "name": "ripgrep.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "spawn-rx",
          "imports": [
            "findActualExecutable"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:url",
          "imports": [
            "fileURLToPath",
            "resolve"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "*"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "child_process",
          "imports": [
            "execFile"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "debug",
          "imports": [
            "default"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "ripGrep",
          "type": "named"
        },
        {
          "name": "listAllContentFiles",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/log.ts",
        "src/utils/execFileNoThrow.ts"
      ],
      "dependents": [
        "src/context.ts",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/utils/file.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\secureFile.ts",
      "relativePath": "src/utils/secureFile.ts",
      "name": "secureFile.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "node:fs",
          "imports": [
            "existsSync",
            "readFileSync",
            "writeFileSync",
            "mkdirSync",
            "statSync",
            "unlinkSync",
            "renameSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:path",
          "imports": [
            "join",
            "dirname",
            "normalize",
            "resolve",
            "extname",
            "relative",
            "isAbsolute"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "node:os",
          "imports": [
            "homedir"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "SecureFileService",
          "type": "named"
        },
        {
          "name": "secureFileService",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/tools/FileReadTool/FileReadTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\sessionState.ts",
      "relativePath": "src/utils/sessionState.ts",
      "name": "sessionState.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "SessionState",
          "type": "named"
        },
        {
          "name": "setSessionState",
          "type": "named"
        },
        {
          "name": "getSessionState",
          "type": "named"
        },
        {
          "name": "default",
          "type": "default"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/Spinner.tsx",
        "src/services/openai.ts",
        "src/utils/config.ts",
        "src/utils/todoStorage.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\state.ts",
      "relativePath": "src/utils/state.ts",
      "name": "state.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "process",
          "imports": [
            "cwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./PersistentShell",
          "imports": [
            "PersistentShell"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "setCwd",
          "type": "named"
        },
        {
          "name": "setOriginalCwd",
          "type": "named"
        },
        {
          "name": "getOriginalCwd",
          "type": "named"
        },
        {
          "name": "getCwd",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/PersistentShell.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/clear.ts",
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/Logo.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/components/permissions/toolUseOptions.ts",
        "src/components/TrustDialog.tsx",
        "src/constants/prompts.ts",
        "src/context.ts",
        "src/entrypoints/cli.tsx",
        "src/entrypoints/mcp.ts",
        "src/hooks/useUnifiedCompletion.ts",
        "src/permissions.ts",
        "src/query.ts",
        "src/screens/REPL.tsx",
        "src/services/customCommands.ts",
        "src/services/mcpClient.ts",
        "src/services/mentionProcessor.ts",
        "src/services/vcr.ts",
        "src/tools/BashTool/BashTool.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileEditTool/utils.ts",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/GlobTool/GlobTool.tsx",
        "src/tools/GrepTool/GrepTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/NotebookEditTool/NotebookEditTool.tsx",
        "src/tools/NotebookReadTool/NotebookReadTool.tsx",
        "src/utils/agentLoader.ts",
        "src/utils/ask.tsx",
        "src/utils/config.ts",
        "src/utils/exampleCommands.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/file.ts",
        "src/utils/messages.tsx",
        "src/utils/permissions/filesystem.ts",
        "src/utils/style.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\style.ts",
      "relativePath": "src/utils/style.ts",
      "name": "style.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "fs",
          "imports": [
            "existsSync",
            "readFileSync"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "path",
          "imports": [
            "join",
            "parse",
            "dirname"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./state",
          "imports": [
            "getCwd"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/product",
          "imports": [
            "PROJECT_FILE"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getCodeStyle",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/state.ts",
        "src/constants/product.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/context.ts",
        "src/utils/autoCompactCore.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\terminal.ts",
      "relativePath": "src/utils/terminal.ts",
      "name": "terminal.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./json",
          "imports": [
            "safeParseJSON"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../services/claude",
          "imports": [
            "queryQuick"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "setTerminalTitle",
          "type": "named"
        },
        {
          "name": "updateTerminalTitle",
          "type": "named"
        },
        {
          "name": "clearTerminal",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/json.ts",
        "src/utils/log.ts",
        "src/services/claude.ts"
      ],
      "dependents": [
        "src/commands/clear.ts",
        "src/commands/compact.ts",
        "src/commands/login.tsx",
        "src/commands/logout.tsx",
        "src/commands/onboarding.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/Onboarding.tsx",
        "src/components/PromptInput.tsx",
        "src/entrypoints/cli.tsx",
        "src/screens/REPL.tsx",
        "src/utils/autoCompactCore.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\theme.ts",
      "relativePath": "src/utils/theme.ts",
      "name": "theme.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "Theme",
          "type": "named"
        },
        {
          "name": "getTheme",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts"
      ],
      "dependents": [
        "src/commands/agents.tsx",
        "src/commands/mcp.ts",
        "src/commands/terminalSetup.ts",
        "src/components/ApproveApiKey.tsx",
        "src/components/AsciiLogo.tsx",
        "src/components/binary-feedback/BinaryFeedbackView.tsx",
        "src/components/Bug.tsx",
        "src/components/Config.tsx",
        "src/components/ConsoleOAuthFlow.tsx",
        "src/components/CostThresholdDialog.tsx",
        "src/components/CustomSelect/select-option.tsx",
        "src/components/CustomSelect/select.tsx",
        "src/components/FallbackToolUseRejectedMessage.tsx",
        "src/components/FileEditToolUpdatedMessage.tsx",
        "src/components/Help.tsx",
        "src/components/InvalidConfigDialog.tsx",
        "src/components/Logo.tsx",
        "src/components/LogSelector.tsx",
        "src/components/MCPServerApprovalDialog.tsx",
        "src/components/MCPServerMultiselectDialog.tsx",
        "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
        "src/components/messages/AssistantRedactedThinkingMessage.tsx",
        "src/components/messages/AssistantTextMessage.tsx",
        "src/components/messages/AssistantThinkingMessage.tsx",
        "src/components/messages/AssistantToolUseMessage.tsx",
        "src/components/messages/TaskProgressMessage.tsx",
        "src/components/messages/TaskToolMessage.tsx",
        "src/components/messages/UserBashInputMessage.tsx",
        "src/components/messages/UserCommandMessage.tsx",
        "src/components/messages/UserKodingInputMessage.tsx",
        "src/components/messages/UserPromptMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
        "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
        "src/components/MessageSelector.tsx",
        "src/components/ModeIndicator.tsx",
        "src/components/ModelConfig.tsx",
        "src/components/ModelListManager.tsx",
        "src/components/ModelSelector.tsx",
        "src/components/ModelStatusDisplay.tsx",
        "src/components/Onboarding.tsx",
        "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
        "src/components/permissions/PermissionRequestTitle.tsx",
        "src/components/permissions/toolUseOptions.ts",
        "src/components/PressEnterToContinue.tsx",
        "src/components/PromptInput.tsx",
        "src/components/Spinner.tsx",
        "src/components/StructuredDiff.tsx",
        "src/components/TextInput.tsx",
        "src/components/TokenWarning.tsx",
        "src/components/ToolUseLoader.tsx",
        "src/components/TrustDialog.tsx",
        "src/entrypoints/cli.tsx",
        "src/ProjectOnboarding.tsx",
        "src/screens/Doctor.tsx",
        "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
        "src/tools/BashTool/BashToolResultMessage.tsx",
        "src/tools/BashTool/OutputLine.tsx",
        "src/tools/FileEditTool/FileEditTool.tsx",
        "src/tools/FileReadTool/FileReadTool.tsx",
        "src/tools/FileWriteTool/FileWriteTool.tsx",
        "src/tools/lsTool/lsTool.tsx",
        "src/tools/MCPTool/MCPTool.tsx",
        "src/tools/MultiEditTool/MultiEditTool.tsx",
        "src/tools/StickerRequestTool/StickerRequestTool.tsx",
        "src/tools/TaskTool/TaskTool.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx",
        "src/utils/config.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\thinking.ts",
      "relativePath": "src/utils/thinking.ts",
      "name": "thinking.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "lodash-es",
          "imports": [
            "last"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": true
        },
        {
          "source": "./messages",
          "imports": [
            "getLastAssistantMessageId"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../tools/ThinkTool/ThinkTool",
          "imports": [
            "ThinkTool"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./model",
          "imports": [
            "USE_BEDROCK",
            "USE_VERTEX",
            "getModelManager"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getMaxThinkingTokens",
          "type": "named"
        },
        {
          "name": "getReasoningEffort",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/messages.tsx",
        "src/tools/ThinkTool/ThinkTool.tsx",
        "src/utils/model.ts"
      ],
      "dependents": [
        "src/screens/REPL.tsx",
        "src/services/claude.ts",
        "src/tools/TaskTool/TaskTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\todoStorage.ts",
      "relativePath": "src/utils/todoStorage.ts",
      "name": "todoStorage.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./sessionState",
          "imports": [
            "setSessionState",
            "getSessionState"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./agentStorage",
          "imports": [
            "readAgentData",
            "writeAgentData",
            "resolveAgentId"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "TodoItem",
          "type": "named"
        },
        {
          "name": "TodoQuery",
          "type": "named"
        },
        {
          "name": "TodoStorageConfig",
          "type": "named"
        },
        {
          "name": "TodoMetrics",
          "type": "named"
        },
        {
          "name": "getTodoMetrics",
          "type": "named"
        },
        {
          "name": "getTodos",
          "type": "named"
        },
        {
          "name": "setTodos",
          "type": "named"
        },
        {
          "name": "getTodoConfig",
          "type": "named"
        },
        {
          "name": "setTodoConfig",
          "type": "named"
        },
        {
          "name": "addTodo",
          "type": "named"
        },
        {
          "name": "updateTodo",
          "type": "named"
        },
        {
          "name": "deleteTodo",
          "type": "named"
        },
        {
          "name": "clearTodos",
          "type": "named"
        },
        {
          "name": "getTodoById",
          "type": "named"
        },
        {
          "name": "getTodosByStatus",
          "type": "named"
        },
        {
          "name": "getTodosByPriority",
          "type": "named"
        },
        {
          "name": "queryTodos",
          "type": "named"
        },
        {
          "name": "getTodoStatistics",
          "type": "named"
        },
        {
          "name": "optimizeTodoStorage",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/sessionState.ts",
        "src/utils/agentStorage.ts"
      ],
      "dependents": [
        "src/components/TodoItem.tsx",
        "src/services/systemReminder.ts",
        "src/tools/TodoWriteTool/TodoWriteTool.tsx"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\tokens.ts",
      "relativePath": "src/utils/tokens.ts",
      "name": "tokens.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "../query",
          "imports": [
            "Message"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./messages",
          "imports": [
            "SYNTHETIC_ASSISTANT_MESSAGES"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "countTokens",
          "type": "named"
        },
        {
          "name": "countCachedTokens",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/query.ts",
        "src/utils/messages.tsx"
      ],
      "dependents": [
        "src/components/PromptInput.tsx",
        "src/services/claude.ts",
        "src/utils/autoCompactCore.ts",
        "src/utils/messageContextManager.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\toolExecutionController.ts",
      "relativePath": "src/utils/toolExecutionController.ts",
      "name": "toolExecutionController.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "@anthropic-ai/sdk/resources/index.mjs",
          "imports": [
            "ToolUseBlock"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../Tool",
          "imports": [
            "Tool"
          ],
          "type": "static",
          "isTypeOnly": true
        }
      ],
      "exports": [
        {
          "name": "ToolExecutionGroup",
          "type": "named"
        },
        {
          "name": "ToolExecutionController",
          "type": "named"
        },
        {
          "name": "createToolExecutionController",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/Tool.ts"
      ],
      "dependents": [
        "src/query.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\unaryLogging.ts",
      "relativePath": "src/utils/unaryLogging.ts",
      "name": "unaryLogging.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "logUnaryEvent",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": [
        "src/components/permissions/FallbackPermissionRequest.tsx",
        "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
        "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
        "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
        "src/components/permissions/hooks.ts",
        "src/components/permissions/utils.ts",
        "src/hooks/usePermissionRequestLogging.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\user.ts",
      "relativePath": "src/utils/user.ts",
      "name": "user.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [
        {
          "source": "./config",
          "imports": [
            "getGlobalConfig",
            "getOrCreateUserID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "lodash-es",
          "imports": [
            "memoize"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./env",
          "imports": [
            "env"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./execFileNoThrow",
          "imports": [
            "execFileNoThrow"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "./log",
          "imports": [
            "logError",
            "SESSION_ID"
          ],
          "type": "static",
          "isTypeOnly": false
        },
        {
          "source": "../constants/macros",
          "imports": [
            "MACRO"
          ],
          "type": "static",
          "isTypeOnly": false
        }
      ],
      "exports": [
        {
          "name": "getGitEmail",
          "type": "named"
        },
        {
          "name": "getUser",
          "type": "named"
        }
      ],
      "dependencies": [
        "src/utils/config.ts",
        "src/utils/env.ts",
        "src/utils/execFileNoThrow.ts",
        "src/utils/log.ts",
        "src/constants/macros.ts"
      ],
      "dependents": [
        "src/context.ts"
      ]
    },
    {
      "path": "D:\\github\\2015\\09\\Kode-novel-worktrees\\local-dev\\src\\utils\\validate.ts",
      "relativePath": "src/utils/validate.ts",
      "name": "validate.ts",
      "extension": ".ts",
      "directory": "src/utils",
      "level": 1,
      "imports": [],
      "exports": [
        {
          "name": "validateField",
          "type": "named"
        }
      ],
      "dependencies": [],
      "dependents": []
    }
  ],
  "totalFiles": 274,
  "directories": [
    "src",
    "src/commands",
    "src/components",
    "src/components/CustomSelect",
    "src/components/binary-feedback",
    "src/components/messages",
    "src/components/messages/UserToolResultMessage",
    "src/components/permissions",
    "src/components/permissions/BashPermissionRequest",
    "src/components/permissions/FileEditPermissionRequest",
    "src/components/permissions/FileWritePermissionRequest",
    "src/components/permissions/FilesystemPermissionRequest",
    "src/constants",
    "src/context",
    "src/entrypoints",
    "src/hooks",
    "src/screens",
    "src/services",
    "src/services/adapters",
    "src/test",
    "src/tools",
    "src/tools/ArchitectTool",
    "src/tools/AskExpertModelTool",
    "src/tools/BashTool",
    "src/tools/FileEditTool",
    "src/tools/FileReadTool",
    "src/tools/FileWriteTool",
    "src/tools/GlobTool",
    "src/tools/GrepTool",
    "src/tools/MCPTool",
    "src/tools/MemoryReadTool",
    "src/tools/MemoryWriteTool",
    "src/tools/MultiEditTool",
    "src/tools/NotebookEditTool",
    "src/tools/NotebookReadTool",
    "src/tools/StickerRequestTool",
    "src/tools/TaskTool",
    "src/tools/ThinkTool",
    "src/tools/TodoWriteTool",
    "src/tools/URLFetcherTool",
    "src/tools/WebSearchTool",
    "src/tools/lsTool",
    "src/types",
    "src/utils",
    "src/utils/permissions"
  ],
  "entryPoints": [
    "src/components/SentryErrorBoundary.ts",
    "src/entrypoints/cli.tsx",
    "src/index.ts",
    "src/services/sentry.ts"
  ],
  "dependencyGraph": {
    "src/commands/agents.tsx": [
      "src/utils/agentLoader.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/services/mcpClient.ts",
      "src/utils/model.ts",
      "src/services/claude.ts"
    ],
    "src/commands/approvedTools.ts": [],
    "src/commands/bug.tsx": [
      "src/commands.ts",
      "src/components/Bug.tsx",
      "src/constants/product.ts"
    ],
    "src/commands/clear.ts": [
      "src/commands.ts",
      "src/messages.ts",
      "src/context.ts",
      "src/utils/style.ts",
      "src/utils/terminal.ts",
      "src/utils/state.ts",
      "src/query.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/commands/compact.ts": [
      "src/commands.ts",
      "src/context.ts",
      "src/messages.ts",
      "src/services/claude.ts",
      "src/utils/style.ts",
      "src/utils/terminal.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/commands/config.tsx": [
      "src/commands.ts",
      "src/components/Config.tsx"
    ],
    "src/commands/cost.ts": [
      "src/commands.ts",
      "src/cost-tracker.ts"
    ],
    "src/commands/ctx_viz.ts": [
      "src/commands.ts",
      "src/Tool.ts",
      "src/constants/prompts.ts",
      "src/context.ts",
      "src/messages.ts",
      "src/constants/product.ts"
    ],
    "src/commands/doctor.ts": [
      "src/commands.ts",
      "src/screens/Doctor.tsx",
      "src/constants/product.ts"
    ],
    "src/commands/help.tsx": [
      "src/commands.ts",
      "src/components/Help.tsx"
    ],
    "src/commands/init.ts": [
      "src/commands.ts",
      "src/ProjectOnboarding.tsx",
      "src/constants/product.ts"
    ],
    "src/commands/listen.ts": [
      "src/commands.ts",
      "src/utils/log.ts",
      "src/utils/execFileNoThrow.ts"
    ],
    "src/commands/login.tsx": [
      "src/commands.ts",
      "src/components/ConsoleOAuthFlow.tsx",
      "src/utils/terminal.ts",
      "src/utils/auth.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/commands/clear.ts"
    ],
    "src/commands/logout.tsx": [
      "src/commands.ts",
      "src/utils/config.ts",
      "src/utils/terminal.ts"
    ],
    "src/commands/mcp.ts": [
      "src/commands.ts",
      "src/services/mcpClient.ts",
      "src/constants/product.ts",
      "src/utils/theme.ts"
    ],
    "src/commands/model.tsx": [
      "src/components/ModelConfig.tsx",
      "src/utils/config.ts",
      "src/messages.ts",
      "src/utils/model.ts"
    ],
    "src/commands/modelstatus.tsx": [
      "src/commands.ts",
      "src/components/ModelStatusDisplay.tsx"
    ],
    "src/commands/onboarding.tsx": [
      "src/commands.ts",
      "src/components/Onboarding.tsx",
      "src/utils/terminal.ts",
      "src/utils/config.ts",
      "src/commands/clear.ts"
    ],
    "src/commands/pr_comments.ts": [
      "src/commands.ts"
    ],
    "src/commands/refreshCommands.ts": [
      "src/commands.ts",
      "src/services/customCommands.ts"
    ],
    "src/commands/release-notes.ts": [
      "src/commands.ts",
      "src/constants/releaseNotes.ts"
    ],
    "src/commands/resume.tsx": [
      "src/commands.ts",
      "src/screens/ResumeConversation.tsx",
      "src/utils/log.ts"
    ],
    "src/commands/review.ts": [
      "src/commands.ts",
      "src/tools/BashTool/BashTool.tsx"
    ],
    "src/commands/terminalSetup.ts": [
      "src/commands.ts",
      "src/utils/execFileNoThrow.ts",
      "src/utils/theme.ts",
      "src/utils/env.ts",
      "src/utils/config.ts",
      "src/ProjectOnboarding.tsx",
      "src/utils/json.ts",
      "src/utils/log.ts"
    ],
    "src/commands.ts": [
      "src/commands/bug.tsx",
      "src/commands/clear.ts",
      "src/commands/compact.ts",
      "src/commands/config.tsx",
      "src/commands/cost.ts",
      "src/commands/ctx_viz.ts",
      "src/commands/doctor.ts",
      "src/commands/help.tsx",
      "src/commands/init.ts",
      "src/commands/listen.ts",
      "src/commands/login.tsx",
      "src/commands/logout.tsx",
      "src/commands/mcp.ts",
      "src/commands/model.tsx",
      "src/commands/modelstatus.tsx",
      "src/commands/onboarding.tsx",
      "src/commands/pr_comments.ts",
      "src/commands/refreshCommands.ts",
      "src/commands/release-notes.ts",
      "src/commands/review.ts",
      "src/commands/terminalSetup.ts",
      "src/Tool.ts",
      "src/commands/resume.tsx",
      "src/commands/agents.tsx",
      "src/services/mcpClient.ts",
      "src/services/customCommands.ts",
      "src/query.ts",
      "src/utils/auth.ts"
    ],
    "src/components/ApproveApiKey.tsx": [
      "src/utils/config.ts",
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/AsciiLogo.tsx": [
      "src/utils/theme.ts",
      "src/constants/product.ts"
    ],
    "src/components/binary-feedback/BinaryFeedback.tsx": [
      "src/hooks/useNotifyAfterTimeout.ts",
      "src/query.ts",
      "src/Tool.ts",
      "src/utils/messages.tsx",
      "src/components/binary-feedback/BinaryFeedbackView.tsx",
      "src/constants/product.ts"
    ],
    "src/components/binary-feedback/BinaryFeedbackOption.tsx": [
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
      "src/components/Message.tsx",
      "src/Tool.ts",
      "src/hooks/useTerminalSize.ts",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
      "src/query.ts"
    ],
    "src/components/binary-feedback/BinaryFeedbackView.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/Tool.ts",
      "src/utils/messages.tsx",
      "src/components/binary-feedback/BinaryFeedbackOption.tsx",
      "src/query.ts",
      "src/components/binary-feedback/utils.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/constants/product.ts"
    ],
    "src/components/binary-feedback/utils.ts": [
      "src/query.ts",
      "src/services/claude.ts",
      "src/utils/git.ts"
    ],
    "src/components/Bug.tsx": [
      "src/utils/theme.ts",
      "src/messages.ts",
      "src/query.ts",
      "src/components/TextInput.tsx",
      "src/utils/log.ts",
      "src/utils/env.ts",
      "src/utils/git.ts",
      "src/hooks/useTerminalSize.ts",
      "src/utils/config.ts",
      "src/utils/http.ts",
      "src/constants/product.ts",
      "src/services/claude.ts",
      "src/utils/browser.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/constants/macros.ts"
    ],
    "src/components/Config.tsx": [
      "src/utils/theme.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/utils/model.ts"
    ],
    "src/components/ConsoleOAuthFlow.tsx": [
      "src/components/TextInput.tsx",
      "src/services/oauth.ts",
      "src/utils/theme.ts",
      "src/components/AsciiLogo.tsx",
      "src/hooks/useTerminalSize.ts",
      "src/utils/log.ts",
      "src/utils/terminal.ts",
      "src/components/Spinner.tsx",
      "src/components/Onboarding.tsx",
      "src/constants/product.ts",
      "src/services/notifier.ts"
    ],
    "src/components/Cost.tsx": [],
    "src/components/CostThresholdDialog.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/utils/theme.ts",
      "src/components/Link.tsx"
    ],
    "src/components/CustomSelect/option-map.ts": [
      "src/components/CustomSelect/select.tsx"
    ],
    "src/components/CustomSelect/select-option.tsx": [
      "src/components/CustomSelect/theme.ts",
      "src/utils/theme.ts"
    ],
    "src/components/CustomSelect/select.tsx": [
      "src/components/CustomSelect/select-option.tsx",
      "src/components/CustomSelect/theme.ts",
      "src/components/CustomSelect/use-select-state.ts",
      "src/components/CustomSelect/use-select.ts",
      "src/utils/theme.ts"
    ],
    "src/components/CustomSelect/theme.ts": [],
    "src/components/CustomSelect/use-select-state.ts": [
      "src/components/CustomSelect/option-map.ts",
      "src/components/CustomSelect/select.tsx"
    ],
    "src/components/CustomSelect/use-select.ts": [
      "src/components/CustomSelect/use-select-state.ts"
    ],
    "src/components/FallbackToolUseRejectedMessage.tsx": [
      "src/utils/theme.ts",
      "src/constants/product.ts"
    ],
    "src/components/FileEditToolUpdatedMessage.tsx": [
      "src/utils/array.ts",
      "src/components/StructuredDiff.tsx",
      "src/utils/theme.ts",
      "src/utils/state.ts",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/Help.tsx": [
      "src/commands.ts",
      "src/constants/product.ts",
      "src/services/customCommands.ts",
      "src/utils/theme.ts",
      "src/components/PressEnterToContinue.tsx",
      "src/constants/macros.ts"
    ],
    "src/components/HighlightedCode.tsx": [
      "src/utils/log.ts"
    ],
    "src/components/InvalidConfigDialog.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/utils/errors.ts",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/Link.tsx": [
      "src/utils/env.ts"
    ],
    "src/components/Logo.tsx": [
      "src/utils/theme.ts",
      "src/constants/product.ts",
      "src/utils/config.ts",
      "src/utils/state.ts",
      "src/components/AsciiLogo.tsx",
      "src/services/mcpClient.ts",
      "src/utils/model.ts",
      "src/constants/macros.ts"
    ],
    "src/components/LogSelector.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/types/logs.ts",
      "src/utils/theme.ts",
      "src/hooks/useTerminalSize.ts",
      "src/utils/log.ts"
    ],
    "src/components/MCPServerApprovalDialog.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/components/MCPServerDialogCopy.tsx",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/MCPServerDialogCopy.tsx": [
      "src/constants/product.ts"
    ],
    "src/components/MCPServerMultiselectDialog.tsx": [
      "src/utils/theme.ts",
      "src/components/MCPServerDialogCopy.tsx",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/Message.tsx": [
      "src/query.ts",
      "src/Tool.ts",
      "src/utils/log.ts",
      "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx",
      "src/components/messages/AssistantToolUseMessage.tsx",
      "src/components/messages/AssistantTextMessage.tsx",
      "src/components/messages/UserTextMessage.tsx",
      "src/utils/messages.tsx",
      "src/components/messages/AssistantThinkingMessage.tsx",
      "src/components/messages/AssistantRedactedThinkingMessage.tsx",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/MessageResponse.tsx": [],
    "src/components/messages/AssistantBashOutputMessage.tsx": [
      "src/tools/BashTool/BashToolResultMessage.tsx",
      "src/utils/messages.tsx"
    ],
    "src/components/messages/AssistantLocalCommandOutputMessage.tsx": [
      "src/utils/messages.tsx",
      "src/utils/theme.ts"
    ],
    "src/components/messages/AssistantRedactedThinkingMessage.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/messages/AssistantTextMessage.tsx": [
      "src/components/messages/AssistantBashOutputMessage.tsx",
      "src/components/messages/AssistantLocalCommandOutputMessage.tsx",
      "src/utils/theme.ts",
      "src/components/Cost.tsx",
      "src/constants/figures.ts",
      "src/utils/markdown.ts",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/messages/AssistantThinkingMessage.tsx": [
      "src/utils/theme.ts",
      "src/utils/markdown.ts"
    ],
    "src/components/messages/AssistantToolUseMessage.tsx": [
      "src/utils/log.ts",
      "src/Tool.ts",
      "src/components/Cost.tsx",
      "src/components/ToolUseLoader.tsx",
      "src/utils/theme.ts",
      "src/constants/figures.ts",
      "src/tools/ThinkTool/ThinkTool.tsx",
      "src/components/messages/AssistantThinkingMessage.tsx",
      "src/components/messages/TaskToolMessage.tsx"
    ],
    "src/components/messages/TaskProgressMessage.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/messages/TaskToolMessage.tsx": [
      "src/utils/agentLoader.ts",
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserBashInputMessage.tsx": [
      "src/utils/messages.tsx",
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserCommandMessage.tsx": [
      "src/utils/theme.ts",
      "src/utils/messages.tsx"
    ],
    "src/components/messages/UserKodingInputMessage.tsx": [
      "src/utils/messages.tsx",
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserPromptMessage.tsx": [
      "src/utils/theme.ts",
      "src/utils/log.ts",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/messages/UserTextMessage.tsx": [
      "src/components/messages/UserBashInputMessage.tsx",
      "src/components/messages/UserKodingInputMessage.tsx",
      "src/components/messages/UserCommandMessage.tsx",
      "src/components/messages/UserPromptMessage.tsx",
      "src/services/claude.ts"
    ],
    "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx": [
      "src/Tool.ts",
      "src/query.ts",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/messages/UserToolResultMessage/utils.tsx",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/messages/UserToolResultMessage/UserToolResultMessage.tsx": [
      "src/Tool.ts",
      "src/query.ts",
      "src/utils/messages.tsx",
      "src/components/messages/UserToolResultMessage/UserToolCanceledMessage.tsx",
      "src/components/messages/UserToolResultMessage/UserToolErrorMessage.tsx",
      "src/components/messages/UserToolResultMessage/UserToolRejectMessage.tsx",
      "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx"
    ],
    "src/components/messages/UserToolResultMessage/UserToolSuccessMessage.tsx": [
      "src/Tool.ts",
      "src/query.ts",
      "src/components/messages/UserToolResultMessage/utils.tsx"
    ],
    "src/components/messages/UserToolResultMessage/utils.tsx": [
      "src/query.ts",
      "src/Tool.ts",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx"
    ],
    "src/components/MessageSelector.tsx": [
      "src/utils/theme.ts",
      "src/components/Message.tsx",
      "src/Tool.ts",
      "src/query.ts",
      "src/hooks/useExitOnCtrlCD.ts"
    ],
    "src/components/ModeIndicator.tsx": [
      "src/context/PermissionContext.tsx",
      "src/utils/theme.ts"
    ],
    "src/components/ModelConfig.tsx": [
      "src/utils/theme.ts",
      "src/utils/model.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/components/ModelSelector.tsx",
      "src/components/ModelListManager.tsx"
    ],
    "src/components/ModelListManager.tsx": [
      "src/utils/theme.ts",
      "src/utils/model.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/components/ModelSelector.tsx"
    ],
    "src/components/ModelSelector.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/utils/model.ts",
      "src/constants/product.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/constants/models.ts",
      "src/components/TextInput.tsx",
      "src/services/claude.ts",
      "src/services/openai.ts",
      "src/services/gpt5ConnectionTest.ts"
    ],
    "src/components/ModelStatusDisplay.tsx": [
      "src/utils/model.ts",
      "src/utils/config.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/utils/theme.ts"
    ],
    "src/components/Onboarding.tsx": [
      "src/constants/product.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/components/Logo.tsx",
      "src/components/CustomSelect/select.tsx",
      "src/components/StructuredDiff.tsx",
      "src/utils/theme.ts",
      "src/utils/terminal.ts",
      "src/components/PressEnterToContinue.tsx",
      "src/components/ModelSelector.tsx"
    ],
    "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx": [
      "src/hooks/usePermissionRequestLogging.ts",
      "src/permissions.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/utils/theme.ts",
      "src/components/permissions/hooks.ts",
      "src/components/permissions/PermissionRequestTitle.tsx",
      "src/components/permissions/utils.ts",
      "src/components/CustomSelect/select.tsx",
      "src/components/permissions/toolUseOptions.ts"
    ],
    "src/components/permissions/FallbackPermissionRequest.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/utils/theme.ts",
      "src/utils/unaryLogging.ts",
      "src/utils/env.ts",
      "src/utils/state.ts",
      "src/permissions.ts"
    ],
    "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/permissions.ts",
      "src/utils/env.ts",
      "src/utils/theme.ts",
      "src/utils/unaryLogging.ts",
      "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx",
      "src/hooks/useTerminalSize.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/components/permissions/FileEditPermissionRequest/FileEditToolDiff.tsx": [
      "src/components/StructuredDiff.tsx",
      "src/utils/theme.ts",
      "src/utils/array.ts",
      "src/utils/state.ts",
      "src/utils/diff.ts"
    ],
    "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/utils/theme.ts",
      "src/utils/unaryLogging.ts",
      "src/utils/env.ts",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/NotebookReadTool/NotebookReadTool.tsx",
      "src/components/permissions/FallbackPermissionRequest.tsx",
      "src/utils/state.ts"
    ],
    "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx": [
      "src/components/CustomSelect/select.tsx",
      "src/utils/theme.ts",
      "src/utils/unaryLogging.ts",
      "src/utils/env.ts",
      "src/permissions.ts",
      "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx",
      "src/hooks/useTerminalSize.ts"
    ],
    "src/components/permissions/FileWritePermissionRequest/FileWriteToolDiff.tsx": [
      "src/components/StructuredDiff.tsx",
      "src/utils/theme.ts",
      "src/utils/array.ts",
      "src/utils/state.ts",
      "src/utils/file.ts",
      "src/components/HighlightedCode.tsx",
      "src/utils/diff.ts"
    ],
    "src/components/permissions/hooks.ts": [
      "src/utils/unaryLogging.ts",
      "src/components/permissions/PermissionRequest.tsx",
      "src/utils/env.ts"
    ],
    "src/components/permissions/PermissionRequest.tsx": [
      "src/Tool.ts",
      "src/query.ts",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/components/permissions/FileEditPermissionRequest/FileEditPermissionRequest.tsx",
      "src/components/permissions/BashPermissionRequest/BashPermissionRequest.tsx",
      "src/components/permissions/FallbackPermissionRequest.tsx",
      "src/hooks/useNotifyAfterTimeout.ts",
      "src/components/permissions/FileWritePermissionRequest/FileWritePermissionRequest.tsx",
      "src/utils/commands.ts",
      "src/components/permissions/FilesystemPermissionRequest/FilesystemPermissionRequest.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/NotebookReadTool/NotebookReadTool.tsx",
      "src/constants/product.ts"
    ],
    "src/components/permissions/PermissionRequestTitle.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/permissions/toolUseOptions.ts": [
      "src/utils/commands.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx"
    ],
    "src/components/permissions/utils.ts": [
      "src/utils/env.ts",
      "src/utils/unaryLogging.ts",
      "src/components/permissions/PermissionRequest.tsx"
    ],
    "src/components/PressEnterToContinue.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/PromptInput.tsx": [
      "src/utils/exampleCommands.ts",
      "src/query.ts",
      "src/utils/messages.tsx",
      "src/hooks/useArrowKeyHistory.ts",
      "src/hooks/useUnifiedCompletion.ts",
      "src/history.ts",
      "src/components/TextInput.tsx",
      "src/utils/tokens.ts",
      "src/components/SentryErrorBoundary.ts",
      "src/commands.ts",
      "src/Tool.ts",
      "src/components/TokenWarning.tsx",
      "src/hooks/useTerminalSize.ts",
      "src/utils/theme.ts",
      "src/utils/model.ts",
      "src/utils/config.ts",
      "src/utils/terminal.ts",
      "src/commands/terminalSetup.ts",
      "src/context/PermissionContext.tsx",
      "src/services/claude.ts"
    ],
    "src/components/SentryErrorBoundary.ts": [
      "src/services/sentry.ts"
    ],
    "src/components/Spinner.tsx": [
      "src/utils/theme.ts",
      "src/utils/sessionState.ts"
    ],
    "src/components/StickerRequestForm.tsx": [],
    "src/components/StructuredDiff.tsx": [
      "src/utils/theme.ts",
      "src/utils/format.tsx"
    ],
    "src/components/TextInput.tsx": [
      "src/hooks/useTextInput.ts",
      "src/utils/theme.ts"
    ],
    "src/components/TodoItem.tsx": [
      "src/utils/todoStorage.ts"
    ],
    "src/components/TokenWarning.tsx": [
      "src/utils/theme.ts"
    ],
    "src/components/ToolUseLoader.tsx": [
      "src/hooks/useInterval.ts",
      "src/utils/theme.ts",
      "src/constants/figures.ts"
    ],
    "src/components/TrustDialog.tsx": [
      "src/utils/theme.ts",
      "src/components/CustomSelect/select.tsx",
      "src/constants/product.ts",
      "src/hooks/useExitOnCtrlCD.ts",
      "src/utils/state.ts",
      "src/components/Link.tsx"
    ],
    "src/constants/claude-asterisk-ascii-art.tsx": [],
    "src/constants/figures.ts": [
      "src/utils/env.ts"
    ],
    "src/constants/macros.ts": [],
    "src/constants/modelCapabilities.ts": [
      "src/types/modelCapabilities.ts"
    ],
    "src/constants/models.ts": [],
    "src/constants/oauth.ts": [],
    "src/constants/product.ts": [],
    "src/constants/prompts.ts": [
      "src/utils/env.ts",
      "src/utils/git.ts",
      "src/utils/state.ts",
      "src/constants/product.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/constants/macros.ts"
    ],
    "src/constants/releaseNotes.ts": [],
    "src/context/PermissionContext.tsx": [
      "src/types/PermissionMode.ts"
    ],
    "src/context.ts": [
      "src/utils/log.ts",
      "src/utils/style.ts",
      "src/utils/state.ts",
      "src/tools/lsTool/lsTool.tsx",
      "src/utils/git.ts",
      "src/utils/ripgrep.ts",
      "src/utils/execFileNoThrow.ts",
      "src/utils/model.ts",
      "src/utils/generators.ts",
      "src/utils/user.ts",
      "src/constants/product.ts"
    ],
    "src/cost-tracker.ts": [
      "src/utils/format.tsx",
      "src/utils/log.ts"
    ],
    "src/entrypoints/cli.tsx": [
      "src/services/sentry.ts",
      "src/constants/product.ts",
      "src/history.ts",
      "src/context.ts",
      "src/utils/ask.tsx",
      "src/permissions.ts",
      "src/tools.ts",
      "src/utils/config.ts",
      "src/utils/log.ts",
      "src/utils/debugLogger.ts",
      "src/components/Onboarding.tsx",
      "src/screens/Doctor.tsx",
      "src/components/ApproveApiKey.tsx",
      "src/components/TrustDialog.tsx",
      "src/screens/LogList.tsx",
      "src/screens/ResumeConversation.tsx",
      "src/utils/model.ts",
      "src/entrypoints/mcp.ts",
      "src/utils/env.ts",
      "src/utils/state.ts",
      "src/commands.ts",
      "src/utils/conversationRecovery.ts",
      "src/utils/cleanup.ts",
      "src/commands/approvedTools.ts",
      "src/services/mcpClient.ts",
      "src/services/mcpServerApproval.tsx",
      "src/utils/exampleCommands.ts",
      "src/utils/autoUpdater.ts",
      "src/utils/PersistentShell.ts",
      "src/utils/terminal.ts",
      "src/components/InvalidConfigDialog.tsx",
      "src/utils/errors.ts",
      "src/utils/permissions/filesystem.ts",
      "src/constants/macros.ts",
      "src/utils/agentLoader.ts",
      "src/screens/REPL.tsx",
      "src/utils/theme.ts"
    ],
    "src/entrypoints/mcp.ts": [
      "src/tools/TaskTool/TaskTool.tsx",
      "src/permissions.ts",
      "src/utils/state.ts",
      "src/utils/model.ts",
      "src/utils/log.ts",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/Tool.ts",
      "src/commands.ts",
      "src/commands/review.ts",
      "src/utils/generators.ts",
      "src/constants/macros.ts"
    ],
    "src/history.ts": [],
    "src/hooks/useApiKeyVerification.ts": [
      "src/services/claude.ts",
      "src/utils/config.ts"
    ],
    "src/hooks/useArrowKeyHistory.ts": [
      "src/history.ts"
    ],
    "src/hooks/useCancelRequest.ts": [
      "src/components/permissions/PermissionRequest.tsx",
      "src/screens/REPL.tsx",
      "src/Tool.ts"
    ],
    "src/hooks/useCanUseTool.ts": [
      "src/permissions.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/utils/commands.ts",
      "src/utils/messages.tsx",
      "src/Tool.ts",
      "src/query.ts",
      "src/components/permissions/PermissionRequest.tsx",
      "src/utils/errors.ts",
      "src/utils/log.ts"
    ],
    "src/hooks/useDoublePress.ts": [],
    "src/hooks/useExitOnCtrlCD.ts": [
      "src/hooks/useDoublePress.ts"
    ],
    "src/hooks/useInterval.ts": [],
    "src/hooks/useLogMessages.ts": [
      "src/query.ts",
      "src/utils/log.ts"
    ],
    "src/hooks/useLogStartupTime.ts": [],
    "src/hooks/useNotifyAfterTimeout.ts": [
      "src/services/notifier.ts"
    ],
    "src/hooks/usePermissionRequestLogging.ts": [
      "src/utils/unaryLogging.ts",
      "src/components/permissions/PermissionRequest.tsx",
      "src/utils/env.ts"
    ],
    "src/hooks/useTerminalSize.ts": [],
    "src/hooks/useTextInput.ts": [
      "src/hooks/useDoublePress.ts",
      "src/utils/Cursor.ts"
    ],
    "src/hooks/useUnifiedCompletion.ts": [
      "src/utils/state.ts",
      "src/commands.ts",
      "src/utils/agentLoader.ts",
      "src/utils/model.ts",
      "src/utils/fuzzyMatcher.ts",
      "src/utils/commonUnixCommands.ts"
    ],
    "src/index.ts": [],
    "src/messages.ts": [
      "src/query.ts"
    ],
    "src/permissions.ts": [
      "src/hooks/useCanUseTool.ts",
      "src/Tool.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/utils/commands.ts",
      "src/utils/errors.ts",
      "src/utils/log.ts",
      "src/utils/permissions/filesystem.ts",
      "src/utils/state.ts",
      "src/constants/product.ts"
    ],
    "src/ProjectOnboarding.tsx": [
      "src/commands/terminalSetup.ts",
      "src/utils/theme.ts",
      "src/constants/releaseNotes.ts",
      "src/utils/file.ts",
      "src/constants/macros.ts",
      "src/constants/product.ts"
    ],
    "src/query.ts": [
      "src/Tool.ts",
      "src/hooks/useCanUseTool.ts",
      "src/services/systemReminder.ts",
      "src/utils/generators.ts",
      "src/utils/log.ts",
      "src/utils/debugLogger.ts",
      "src/utils/toolExecutionController.ts",
      "src/tools/BashTool/BashTool.tsx",
      "src/utils/state.ts",
      "src/utils/autoCompactCore.ts"
    ],
    "src/screens/Doctor.tsx": [
      "src/utils/theme.ts",
      "src/components/PressEnterToContinue.tsx"
    ],
    "src/screens/LogList.tsx": [
      "src/utils/log.ts",
      "src/components/LogSelector.tsx",
      "src/types/logs.ts"
    ],
    "src/screens/REPL.tsx": [
      "src/components/CostThresholdDialog.tsx",
      "src/commands.ts",
      "src/components/Logo.tsx",
      "src/components/Message.tsx",
      "src/components/MessageResponse.tsx",
      "src/components/MessageSelector.tsx",
      "src/components/PromptInput.tsx",
      "src/components/Spinner.tsx",
      "src/constants/prompts.ts",
      "src/context.ts",
      "src/cost-tracker.ts",
      "src/hooks/useLogStartupTime.ts",
      "src/history.ts",
      "src/hooks/useApiKeyVerification.ts",
      "src/hooks/useCancelRequest.ts",
      "src/hooks/useCanUseTool.ts",
      "src/hooks/useLogMessages.ts",
      "src/context/PermissionContext.tsx",
      "src/components/ModeIndicator.tsx",
      "src/messages.ts",
      "src/services/mcpClient.ts",
      "src/Tool.ts",
      "src/utils/config.ts",
      "src/constants/macros.ts",
      "src/utils/log.ts",
      "src/utils/model.ts",
      "src/utils/terminal.ts",
      "src/components/binary-feedback/BinaryFeedback.tsx",
      "src/utils/thinking.ts",
      "src/utils/state.ts",
      "src/commands/terminalSetup.ts",
      "src/utils/debugLogger.ts"
    ],
    "src/screens/ResumeConversation.tsx": [
      "src/screens/REPL.tsx",
      "src/utils/conversationRecovery.ts",
      "src/components/LogSelector.tsx",
      "src/types/logs.ts",
      "src/utils/log.ts",
      "src/Tool.ts",
      "src/commands.ts",
      "src/utils/model.ts"
    ],
    "src/services/adapters/base.ts": [
      "src/types/modelCapabilities.ts",
      "src/utils/config.ts",
      "src/Tool.ts"
    ],
    "src/services/adapters/chatCompletions.ts": [
      "src/services/adapters/base.ts",
      "src/types/modelCapabilities.ts",
      "src/Tool.ts"
    ],
    "src/services/adapters/responsesAPI.ts": [
      "src/services/adapters/base.ts",
      "src/types/modelCapabilities.ts",
      "src/Tool.ts"
    ],
    "src/services/browserMocks.ts": [],
    "src/services/claude.ts": [
      "src/cost-tracker.ts",
      "src/constants/models.ts",
      "src/query.ts",
      "src/Tool.ts",
      "src/utils/config.ts",
      "src/context.ts",
      "src/utils/log.ts",
      "src/utils/http.ts",
      "src/utils/messages.tsx",
      "src/utils/tokens.ts",
      "src/services/vcr.ts",
      "src/utils/debugLogger.ts",
      "src/utils/messageContextManager.ts",
      "src/utils/model.ts",
      "src/services/modelAdapterFactory.ts",
      "src/types/modelCapabilities.ts",
      "src/services/responseStateManager.ts",
      "src/constants/prompts.ts",
      "src/services/openai.ts",
      "src/utils/thinking.ts",
      "src/services/systemReminder.ts"
    ],
    "src/services/customCommands.ts": [
      "src/commands.ts",
      "src/utils/state.ts"
    ],
    "src/services/fileFreshness.ts": [
      "src/services/systemReminder.ts",
      "src/utils/agentStorage.ts"
    ],
    "src/services/gpt5ConnectionTest.ts": [
      "src/services/openai.ts"
    ],
    "src/services/mcpClient.ts": [
      "src/utils/state.ts",
      "src/utils/json.ts",
      "src/Tool.ts",
      "src/tools/MCPTool/MCPTool.tsx",
      "src/utils/log.ts",
      "src/commands.ts"
    ],
    "src/services/mcpServerApproval.tsx": [
      "src/components/MCPServerMultiselectDialog.tsx",
      "src/components/MCPServerApprovalDialog.tsx",
      "src/services/mcpClient.ts",
      "src/utils/config.ts"
    ],
    "src/services/mentionProcessor.ts": [
      "src/services/systemReminder.ts",
      "src/utils/agentLoader.ts",
      "src/utils/state.ts"
    ],
    "src/services/modelAdapterFactory.ts": [
      "src/services/adapters/base.ts",
      "src/services/adapters/responsesAPI.ts",
      "src/services/adapters/chatCompletions.ts",
      "src/constants/modelCapabilities.ts",
      "src/utils/config.ts",
      "src/types/modelCapabilities.ts"
    ],
    "src/services/notifier.ts": [
      "src/utils/config.ts"
    ],
    "src/services/oauth.ts": [
      "src/constants/oauth.ts",
      "src/utils/browser.ts",
      "src/utils/log.ts",
      "src/services/claude.ts"
    ],
    "src/services/openai.ts": [
      "src/utils/config.ts",
      "src/utils/sessionState.ts",
      "src/utils/debugLogger.ts"
    ],
    "src/services/responseStateManager.ts": [],
    "src/services/sentry.ts": [],
    "src/services/systemReminder.ts": [
      "src/utils/todoStorage.ts"
    ],
    "src/services/vcr.ts": [
      "src/query.ts",
      "src/utils/env.ts",
      "src/utils/state.ts"
    ],
    "src/test/testAdapters.ts": [
      "src/services/modelAdapterFactory.ts",
      "src/constants/modelCapabilities.ts",
      "src/utils/config.ts"
    ],
    "src/Tool.ts": [],
    "src/tools/ArchitectTool/ArchitectTool.tsx": [
      "src/Tool.ts",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/HighlightedCode.tsx",
      "src/context.ts",
      "src/query.ts",
      "src/utils/generators.ts",
      "src/utils/messages.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/ArchitectTool/prompt.ts"
    ],
    "src/tools/ArchitectTool/prompt.ts": [],
    "src/tools/AskExpertModelTool/AskExpertModelTool.tsx": [
      "src/Tool.ts",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/utils/model.ts",
      "src/utils/theme.ts",
      "src/utils/messages.tsx",
      "src/utils/log.ts",
      "src/utils/expertChatStorage.ts",
      "src/services/claude.ts",
      "src/utils/debugLogger.ts",
      "src/utils/markdown.ts"
    ],
    "src/tools/BashTool/BashTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/constants/product.ts",
      "src/services/claude.ts",
      "src/Tool.ts",
      "src/utils/commands.ts",
      "src/utils/file.ts",
      "src/utils/log.ts",
      "src/utils/PersistentShell.ts",
      "src/utils/state.ts",
      "src/utils/config.ts",
      "src/utils/model.ts",
      "src/tools/BashTool/BashToolResultMessage.tsx",
      "src/tools/BashTool/prompt.ts",
      "src/tools/BashTool/utils.ts"
    ],
    "src/tools/BashTool/BashToolResultMessage.tsx": [
      "src/tools/BashTool/OutputLine.tsx",
      "src/utils/theme.ts",
      "src/tools/BashTool/BashTool.tsx"
    ],
    "src/tools/BashTool/OutputLine.tsx": [
      "src/utils/theme.ts",
      "src/tools/BashTool/prompt.ts"
    ],
    "src/tools/BashTool/prompt.ts": [
      "src/constants/product.ts",
      "src/tools/TaskTool/constants.ts",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/GlobTool/prompt.ts",
      "src/tools/GrepTool/prompt.ts",
      "src/tools/lsTool/lsTool.tsx"
    ],
    "src/tools/BashTool/utils.ts": [
      "src/services/claude.ts",
      "src/utils/messages.tsx",
      "src/tools/BashTool/prompt.ts"
    ],
    "src/tools/FileEditTool/FileEditTool.tsx": [
      "src/components/FileEditToolUpdatedMessage.tsx",
      "src/components/StructuredDiff.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/array.ts",
      "src/utils/log.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/FileEditTool/prompt.ts",
      "src/tools/FileEditTool/utils.ts",
      "src/utils/permissions/filesystem.ts",
      "src/constants/product.ts"
    ],
    "src/tools/FileEditTool/prompt.ts": [
      "src/tools/NotebookEditTool/NotebookEditTool.tsx"
    ],
    "src/tools/FileEditTool/utils.ts": [
      "src/utils/state.ts",
      "src/utils/file.ts",
      "src/utils/diff.ts"
    ],
    "src/tools/FileReadTool/FileReadTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/HighlightedCode.tsx",
      "src/Tool.ts",
      "src/utils/state.ts",
      "src/utils/log.ts",
      "src/utils/theme.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts",
      "src/tools/FileReadTool/prompt.ts",
      "src/utils/permissions/filesystem.ts",
      "src/utils/secureFile.ts"
    ],
    "src/tools/FileReadTool/prompt.ts": [
      "src/tools/NotebookReadTool/NotebookReadTool.tsx"
    ],
    "src/tools/FileWriteTool/FileWriteTool.tsx": [
      "src/components/FileEditToolUpdatedMessage.tsx",
      "src/components/HighlightedCode.tsx",
      "src/components/StructuredDiff.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/array.ts",
      "src/utils/log.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/tools/FileWriteTool/prompt.ts",
      "src/utils/permissions/filesystem.ts",
      "src/utils/diff.ts",
      "src/constants/product.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/tools/FileWriteTool/prompt.ts": [],
    "src/tools/GlobTool/GlobTool.tsx": [
      "src/components/Cost.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/state.ts",
      "src/utils/file.ts",
      "src/tools/GlobTool/prompt.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/tools/GlobTool/prompt.ts": [],
    "src/tools/GrepTool/GrepTool.tsx": [
      "src/components/Cost.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/state.ts",
      "src/utils/ripgrep.ts",
      "src/tools/GrepTool/prompt.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/tools/GrepTool/prompt.ts": [],
    "src/tools/lsTool/lsTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/log.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/tools/lsTool/prompt.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/tools/lsTool/prompt.ts": [],
    "src/tools/MCPTool/MCPTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/theme.ts",
      "src/tools/MCPTool/prompt.ts",
      "src/tools/BashTool/OutputLine.tsx"
    ],
    "src/tools/MCPTool/prompt.ts": [],
    "src/tools/MemoryReadTool/MemoryReadTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/env.ts",
      "src/utils/agentStorage.ts",
      "src/tools/MemoryReadTool/prompt.ts"
    ],
    "src/tools/MemoryReadTool/prompt.ts": [],
    "src/tools/MemoryWriteTool/MemoryWriteTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/utils/env.ts",
      "src/utils/agentStorage.ts",
      "src/services/fileFreshness.ts",
      "src/tools/MemoryWriteTool/prompt.ts"
    ],
    "src/tools/MemoryWriteTool/prompt.ts": [],
    "src/tools/MultiEditTool/MultiEditTool.tsx": [
      "src/components/FileEditToolUpdatedMessage.tsx",
      "src/components/StructuredDiff.tsx",
      "src/Tool.ts",
      "src/utils/array.ts",
      "src/utils/log.ts",
      "src/utils/state.ts",
      "src/utils/theme.ts",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/utils/permissions/filesystem.ts",
      "src/constants/product.ts",
      "src/tools/MultiEditTool/prompt.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts",
      "src/utils/diff.ts"
    ],
    "src/tools/MultiEditTool/prompt.ts": [
      "src/tools/NotebookEditTool/NotebookEditTool.tsx"
    ],
    "src/tools/NotebookEditTool/NotebookEditTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/HighlightedCode.tsx",
      "src/Tool.ts",
      "src/types/notebook.ts",
      "src/utils/json.ts",
      "src/utils/state.ts",
      "src/tools/NotebookEditTool/prompt.ts",
      "src/utils/permissions/filesystem.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/tools/NotebookEditTool/prompt.ts": [],
    "src/tools/NotebookReadTool/NotebookReadTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/types/notebook.ts",
      "src/tools/BashTool/utils.ts",
      "src/utils/state.ts",
      "src/utils/file.ts",
      "src/tools/NotebookReadTool/prompt.ts",
      "src/utils/permissions/filesystem.ts"
    ],
    "src/tools/NotebookReadTool/prompt.ts": [],
    "src/tools/StickerRequestTool/prompt.ts": [],
    "src/tools/StickerRequestTool/StickerRequestTool.tsx": [
      "src/Tool.ts",
      "src/tools/StickerRequestTool/prompt.ts",
      "src/components/StickerRequestForm.tsx",
      "src/utils/theme.ts"
    ],
    "src/tools/TaskTool/constants.ts": [],
    "src/tools/TaskTool/prompt.ts": [
      "src/Tool.ts",
      "src/tools.ts",
      "src/tools/TaskTool/TaskTool.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/utils/model.ts",
      "src/utils/agentLoader.ts"
    ],
    "src/tools/TaskTool/TaskTool.tsx": [
      "src/Tool.ts",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/constants/prompts.ts",
      "src/context.ts",
      "src/permissions.ts",
      "src/query.ts",
      "src/utils/format.tsx",
      "src/utils/markdown.ts",
      "src/utils/model.ts",
      "src/utils/thinking.ts",
      "src/utils/theme.ts",
      "src/utils/agentStorage.ts",
      "src/utils/debugLogger.ts",
      "src/tools/TaskTool/prompt.ts",
      "src/tools/TaskTool/constants.ts",
      "src/utils/agentLoader.ts"
    ],
    "src/tools/ThinkTool/prompt.ts": [],
    "src/tools/ThinkTool/ThinkTool.tsx": [
      "src/Tool.ts",
      "src/tools/ThinkTool/prompt.ts",
      "src/utils/theme.ts",
      "src/components/MessageResponse.tsx",
      "src/utils/model.ts"
    ],
    "src/tools/TodoWriteTool/prompt.ts": [],
    "src/tools/TodoWriteTool/TodoWriteTool.tsx": [
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/components/TodoItem.tsx",
      "src/Tool.ts",
      "src/utils/todoStorage.ts",
      "src/services/systemReminder.ts",
      "src/services/fileFreshness.ts",
      "src/tools/TodoWriteTool/prompt.ts",
      "src/utils/theme.ts"
    ],
    "src/tools/URLFetcherTool/cache.ts": [],
    "src/tools/URLFetcherTool/htmlToMarkdown.ts": [],
    "src/tools/URLFetcherTool/prompt.ts": [],
    "src/tools/URLFetcherTool/URLFetcherTool.tsx": [
      "src/components/Cost.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/tools/URLFetcherTool/prompt.ts",
      "src/tools/URLFetcherTool/htmlToMarkdown.ts",
      "src/tools/URLFetcherTool/cache.ts",
      "src/services/claude.ts"
    ],
    "src/tools/WebSearchTool/prompt.ts": [],
    "src/tools/WebSearchTool/searchProviders.ts": [],
    "src/tools/WebSearchTool/WebSearchTool.tsx": [
      "src/components/Cost.tsx",
      "src/components/FallbackToolUseRejectedMessage.tsx",
      "src/Tool.ts",
      "src/tools/WebSearchTool/prompt.ts",
      "src/tools/WebSearchTool/searchProviders.ts"
    ],
    "src/tools.ts": [
      "src/Tool.ts",
      "src/tools/TaskTool/TaskTool.tsx",
      "src/tools/ArchitectTool/ArchitectTool.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/tools/AskExpertModelTool/AskExpertModelTool.tsx",
      "src/tools/FileEditTool/FileEditTool.tsx",
      "src/tools/FileReadTool/FileReadTool.tsx",
      "src/tools/FileWriteTool/FileWriteTool.tsx",
      "src/tools/MultiEditTool/MultiEditTool.tsx",
      "src/tools/GlobTool/GlobTool.tsx",
      "src/tools/GrepTool/GrepTool.tsx",
      "src/tools/lsTool/lsTool.tsx",
      "src/tools/NotebookEditTool/NotebookEditTool.tsx",
      "src/tools/NotebookReadTool/NotebookReadTool.tsx",
      "src/tools/MemoryReadTool/MemoryReadTool.tsx",
      "src/tools/MemoryWriteTool/MemoryWriteTool.tsx",
      "src/tools/ThinkTool/ThinkTool.tsx",
      "src/tools/TodoWriteTool/TodoWriteTool.tsx",
      "src/tools/WebSearchTool/WebSearchTool.tsx",
      "src/tools/URLFetcherTool/URLFetcherTool.tsx",
      "src/services/mcpClient.ts"
    ],
    "src/types/common.d.ts": [],
    "src/types/conversation.ts": [],
    "src/types/logs.ts": [],
    "src/types/modelCapabilities.ts": [],
    "src/types/notebook.ts": [],
    "src/types/PermissionMode.ts": [],
    "src/types/RequestContext.ts": [],
    "src/utils/advancedFuzzyMatcher.ts": [],
    "src/utils/agentLoader.ts": [
      "src/utils/state.ts"
    ],
    "src/utils/agentStorage.ts": [],
    "src/utils/array.ts": [],
    "src/utils/ask.tsx": [
      "src/commands.ts",
      "src/constants/prompts.ts",
      "src/context.ts",
      "src/cost-tracker.ts",
      "src/query.ts",
      "src/hooks/useCanUseTool.ts",
      "src/Tool.ts",
      "src/utils/model.ts",
      "src/utils/state.ts",
      "src/utils/log.ts",
      "src/utils/messages.tsx"
    ],
    "src/utils/auth.ts": [
      "src/utils/model.ts",
      "src/utils/config.ts"
    ],
    "src/utils/autoCompactCore.ts": [
      "src/query.ts",
      "src/utils/tokens.ts",
      "src/messages.ts",
      "src/context.ts",
      "src/utils/style.ts",
      "src/utils/terminal.ts",
      "src/services/fileFreshness.ts",
      "src/utils/messages.tsx",
      "src/services/claude.ts",
      "src/utils/fileRecoveryCore.ts",
      "src/utils/file.ts",
      "src/utils/model.ts"
    ],
    "src/utils/autoUpdater.ts": [
      "src/utils/execFileNoThrow.ts",
      "src/utils/log.ts",
      "src/constants/macros.ts",
      "src/constants/product.ts",
      "src/utils/config.ts",
      "src/utils/env.ts"
    ],
    "src/utils/browser.ts": [
      "src/utils/execFileNoThrow.ts"
    ],
    "src/utils/cleanup.ts": [
      "src/utils/log.ts"
    ],
    "src/utils/commands.ts": [
      "src/services/claude.ts",
      "src/constants/product.ts"
    ],
    "src/utils/commonUnixCommands.ts": [],
    "src/utils/config.ts": [
      "src/utils/env.ts",
      "src/utils/state.ts",
      "src/utils/json.ts",
      "src/utils/errors.ts",
      "src/utils/theme.ts",
      "src/utils/debugLogger.ts",
      "src/utils/sessionState.ts",
      "src/utils/model.ts"
    ],
    "src/utils/conversationRecovery.ts": [
      "src/utils/log.ts",
      "src/Tool.ts"
    ],
    "src/utils/Cursor.ts": [],
    "src/utils/debugLogger.ts": [
      "src/constants/product.ts",
      "src/utils/log.ts",
      "src/types/conversation.ts"
    ],
    "src/utils/diff.ts": [],
    "src/utils/env.ts": [
      "src/utils/execFileNoThrow.ts",
      "src/constants/product.ts"
    ],
    "src/utils/errors.ts": [],
    "src/utils/exampleCommands.ts": [
      "src/utils/env.ts",
      "src/utils/state.ts",
      "src/utils/log.ts",
      "src/utils/git.ts",
      "src/services/claude.ts"
    ],
    "src/utils/execFileNoThrow.ts": [
      "src/utils/state.ts",
      "src/utils/log.ts"
    ],
    "src/utils/expertChatStorage.ts": [],
    "src/utils/file.ts": [
      "src/utils/log.ts",
      "src/utils/ripgrep.ts",
      "src/utils/state.ts"
    ],
    "src/utils/fileRecoveryCore.ts": [
      "src/utils/file.ts",
      "src/services/fileFreshness.ts"
    ],
    "src/utils/format.tsx": [],
    "src/utils/fuzzyMatcher.ts": [
      "src/utils/advancedFuzzyMatcher.ts"
    ],
    "src/utils/generators.ts": [],
    "src/utils/git.ts": [
      "src/utils/execFileNoThrow.ts"
    ],
    "src/utils/globalLogger.ts": [],
    "src/utils/http.ts": [
      "src/constants/macros.ts",
      "src/constants/product.ts"
    ],
    "src/utils/imagePaste.ts": [],
    "src/utils/json.ts": [
      "src/utils/log.ts"
    ],
    "src/utils/log.ts": [
      "src/services/sentry.ts",
      "src/types/logs.ts",
      "src/constants/macros.ts",
      "src/constants/product.ts"
    ],
    "src/utils/markdown.ts": [
      "src/utils/messages.tsx",
      "src/utils/log.ts"
    ],
    "src/utils/messageContextManager.ts": [
      "src/query.ts",
      "src/utils/tokens.ts"
    ],
    "src/utils/messages.tsx": [
      "src/commands.ts",
      "src/utils/errors.ts",
      "src/utils/log.ts",
      "src/Tool.ts",
      "src/utils/generators.ts",
      "src/services/claude.ts",
      "src/utils/state.ts",
      "src/components/messages/UserBashInputMessage.tsx",
      "src/components/Spinner.tsx",
      "src/tools/BashTool/BashTool.tsx",
      "src/services/customCommands.ts",
      "src/services/mentionProcessor.ts"
    ],
    "src/utils/model.ts": [
      "src/utils/log.ts",
      "src/utils/config.ts"
    ],
    "src/utils/permissions/filesystem.ts": [
      "src/utils/state.ts"
    ],
    "src/utils/PersistentShell.ts": [
      "src/utils/log.ts",
      "src/constants/product.ts"
    ],
    "src/utils/responseState.ts": [],
    "src/utils/ripgrep.ts": [
      "src/utils/log.ts",
      "src/utils/execFileNoThrow.ts"
    ],
    "src/utils/secureFile.ts": [],
    "src/utils/sessionState.ts": [],
    "src/utils/state.ts": [
      "src/utils/PersistentShell.ts"
    ],
    "src/utils/style.ts": [
      "src/utils/state.ts",
      "src/constants/product.ts"
    ],
    "src/utils/terminal.ts": [
      "src/utils/json.ts",
      "src/utils/log.ts",
      "src/services/claude.ts"
    ],
    "src/utils/theme.ts": [
      "src/utils/config.ts"
    ],
    "src/utils/thinking.ts": [
      "src/query.ts",
      "src/utils/messages.tsx",
      "src/tools/ThinkTool/ThinkTool.tsx",
      "src/utils/model.ts"
    ],
    "src/utils/todoStorage.ts": [
      "src/utils/sessionState.ts",
      "src/utils/agentStorage.ts"
    ],
    "src/utils/tokens.ts": [
      "src/query.ts",
      "src/utils/messages.tsx"
    ],
    "src/utils/toolExecutionController.ts": [
      "src/Tool.ts"
    ],
    "src/utils/unaryLogging.ts": [],
    "src/utils/user.ts": [
      "src/utils/config.ts",
      "src/utils/env.ts",
      "src/utils/execFileNoThrow.ts",
      "src/utils/log.ts",
      "src/constants/macros.ts"
    ],
    "src/utils/validate.ts": []
  },
  "scannedAt": "2025-09-17T07:15:55.711Z"
}