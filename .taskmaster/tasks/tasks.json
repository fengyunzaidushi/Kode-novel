{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Monorepo with Bun and Node.js Support",
        "description": "Set up the project repository with Bun as the primary runtime and Node.js as fallback, including tsx loader and cross-platform CLI wrapper.",
        "details": "Use Bun v1.1+ for optimal performance and Node.js 20+ as fallback. Scaffold the project with a monorepo structure using pnpm workspaces. Add tsx for TypeScript execution. Ensure CLI entry points are cross-platform compatible (Windows, macOS, Linux). Integrate linting (eslint), formatting (prettier), and commit hooks (husky).",
        "testStrategy": "Verify CLI launches in all supported OS environments. Run sample commands to ensure Bun and Node.js fallback both work. Check linting and formatting on commit.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement REPL Terminal UI with Ink",
        "description": "Develop an interactive terminal UI using the Ink framework, supporting syntax highlighting and real-time feedback.",
        "details": "Use Ink v4+ for React-based CLI. Create custom components for input, output, syntax highlighting (recommend 'cli-highlight' or 'chalk'), and progress indicators. Design for responsive updates and accessibility. Integrate with the main CLI entry point.",
        "testStrategy": "Manual and automated tests for input/output rendering, syntax highlighting, and responsiveness. Snapshot tests for UI components.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop Unified Model Manager",
        "description": "Create a unified interface for managing multiple AI model integrations, supporting runtime switching and model pointers.",
        "details": "Implement a ModelManager class in TypeScript. Integrate OpenAI (v4+), Claude (Anthropic v3+), Gemini (Google v1.5+), and Qwen Coder APIs. Use environment variables for API keys. Support runtime model switching (Tab key), default model pointers, and @ask-model-name syntax. Implement cost optimization logic based on model pricing.",
        "testStrategy": "Unit tests for model switching, pointer configuration, and API integration. Mock API responses for reliability.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Build Agent Loader and Orchestration System",
        "description": "Implement dynamic agent discovery, loading, and orchestration with 5-tier configuration and parallel execution.",
        "details": "Create agentLoader.ts to scan for agent definitions in built-in, user, and project directories. Parse Markdown files with YAML frontmatter (use 'gray-matter'). Support @run-agent-name syntax and parallel execution via Promise.all. Implement agent permission checks.",
        "testStrategy": "Unit and integration tests for agent discovery, loading, and parallel execution. Test YAML parsing and permission enforcement.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Permission Manager and Security Modes",
        "description": "Develop a granular permission system for tool and agent operations, supporting YOLO and --safe modes.",
        "details": "Create permissions.ts with Zod schemas for permission policies. Implement runtime checks for file, command, and tool access. Support YOLO (default, permissive) and --safe (restricted) modes. Log permission violations and provide user feedback.",
        "testStrategy": "Unit tests for permission enforcement. Simulate restricted and permissive scenarios. Fuzz test for security edge cases.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Develop Context Manager for Conversation State",
        "description": "Create a context manager to handle conversation continuity, context window sizing, and state preservation across model switches.",
        "details": "Implement messageContextManager.ts to track conversation history, dynamically size context windows based on model limits, and preserve state during model/agent switches. Use efficient in-memory storage and context summarization for large histories.",
        "testStrategy": "Unit tests for context window sizing, state preservation, and summarization. Integration tests for model switching scenarios.",
        "priority": "high",
        "dependencies": [
          1,
          3,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Integrate Secure Shell Command Execution",
        "description": "Enable secure shell command execution with real-time output and permission checks.",
        "details": "Use Node.js 'child_process' (or Bun equivalent) to run shell commands. Stream output to the REPL UI. Enforce permission checks before execution. Sanitize inputs to prevent injection. Support command interruption and timeouts.",
        "testStrategy": "Integration tests for command execution, output streaming, and permission enforcement. Security tests for injection and privilege escalation.",
        "priority": "high",
        "dependencies": [
          2,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Smart File Editing and Codebase Understanding",
        "description": "Develop context-aware file editing and deep project structure analysis for codebase understanding.",
        "details": "Use Node.js/Bun fs APIs for file operations. Parse project structure using 'globby' or 'fast-glob'. Implement code pattern preservation using AST parsing (e.g., 'recast' for JS/TS). Map file relationships and dependencies. Integrate with ModelManager for context-aware edits.",
        "testStrategy": "Unit and integration tests for file editing, AST parsing, and relationship mapping. Fuzz tests for edge cases.",
        "priority": "high",
        "dependencies": [
          2,
          3,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Develop Advanced Completion System",
        "description": "Create a hyphen-aware fuzzy matching system for commands, files, and agents with real-time discovery.",
        "details": "Implement fuzzy matching using 'fuse.js' or 'fast-fuzzy'. Support hyphen-aware matching and auto-prefix detection for @ and # mentions. Dynamically discover commands from system PATH and agent/model registries. Integrate with REPL UI for real-time suggestions.",
        "testStrategy": "Unit tests for fuzzy matching accuracy. Integration tests for real-time discovery and UI integration.",
        "priority": "medium",
        "dependencies": [
          2,
          4,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Ensure AGENTS.md Standard Compatibility",
        "description": "Implement full compatibility with AGENTS.md and Claude.md protocols for agent configuration and documentation.",
        "details": "Parse and generate AGENTS.md files using Markdown and YAML frontmatter. Support OpenAI and Claude standards for agent definitions. Implement migration tools for Claude.md compatibility. Auto-generate documentation from agent configs.",
        "testStrategy": "Unit tests for parsing/generation. Integration tests for migration and documentation workflows.",
        "priority": "medium",
        "dependencies": [
          4,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Workflow Automation and Task Orchestration",
        "description": "Enable orchestration of complex, multi-step development workflows across models and agents.",
        "details": "Design a workflow engine to sequence tasks, delegate to appropriate models/agents, and manage dependencies. Use async/await for step execution. Integrate with ModelManager and AgentLoader for dynamic routing.",
        "testStrategy": "Integration tests for multi-step workflows, error handling, and dependency management.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          6,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Optimize Performance and Memory Management",
        "description": "Profile and optimize memory usage, response times, and context window management for large projects.",
        "details": "Use Node.js/Bun profiling tools to identify bottlenecks. Optimize context storage and retrieval. Implement lazy loading and caching for large codebases. Monitor and limit memory usage per session.",
        "testStrategy": "Performance benchmarks, stress tests, and memory profiling. Regression tests for large projects.",
        "priority": "medium",
        "dependencies": [
          6,
          8,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Develop Comprehensive Testing Suite",
        "description": "Set up unit, integration, and end-to-end tests using Bun test runner and modern testing libraries.",
        "details": "Use Bun's built-in test runner for fast execution. Integrate with 'jest' or 'vitest' for advanced features. Cover all modules: REPL, ModelManager, AgentLoader, permissions, context, file editing, and workflows. Include CI integration (GitHub Actions).",
        "testStrategy": "Automated test coverage reports. CI pipeline runs on all pushes and PRs. Manual exploratory testing for edge cases.",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Generate and Maintain API and User Documentation",
        "description": "Automate API and usage documentation generation, including Markdown-based guides and AGENTS.md updates.",
        "details": "Use 'typedoc' for API docs and custom scripts for Markdown generation. Auto-update AGENTS.md and usage examples on code changes. Integrate documentation checks into CI.",
        "testStrategy": "Check for up-to-date docs on each build. Manual review for completeness and clarity.",
        "priority": "medium",
        "dependencies": [
          10,
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Cross-Platform Distribution and Release Automation",
        "description": "Package and distribute the CLI as an npm package with cross-platform support and automated release pipeline.",
        "details": "Configure npm package.json for CLI distribution. Use 'pkg' or 'nexe' for binary builds if needed. Test on Windows, macOS, and Linux. Set up GitHub Actions for automated releases and versioning.",
        "testStrategy": "Install and run CLI on all supported platforms. Verify release pipeline and version bumps.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          13,
          14
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-15T13:27:52.639Z",
      "updated": "2025-09-15T13:27:52.639Z",
      "description": "Tasks for master context"
    }
  }
}